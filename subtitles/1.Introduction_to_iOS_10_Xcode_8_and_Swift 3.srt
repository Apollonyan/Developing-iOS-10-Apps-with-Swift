1
00:00:00,401 --> 00:00:04,402
本字幕由志愿者义务贡献，采用许可协议
知识共享 署名-非商业性使用-相同方式共享 3.0 美国

2
00:00:04,471 --> 00:00:07,239
Stanford University.
斯坦福大学

3
00:00:07,308 --> 00:00:11,877
Okay, well, welcome to CS193P, Stanford CS193P.
欢迎参加 2017 年冬季学期斯坦福

4
00:00:13,481 --> 00:00:17,515
This is Developing Applications for iOS, winter
CS193P 课程，iOS 应用程序开发

5
00:00:17,584 --> 00:00:21,553
of 2017. Today we're going to talk a little bit about what
我们今天先会讲讲本课的主要内容

6
00:00:21,622 --> 00:00:23,955
this class is about, and the prerequisites you need.
和上这门课之前你所需要具备的能力

7
00:00:24,024 --> 00:00:28,427
Then I'm, really fast, gonna go over iOS and what's in it.
之后我会很快地过一遍什么是 iOS，由什么构成

8
00:00:28,496 --> 00:00:32,330
And then, I'm gonna dive into a big, long demo.
最后我会带大家做一个很完整的示例程序

9
00:00:32,399 --> 00:00:34,833
And this demo is gonna really quickly let you see what it's
给你们展示一下开发 iOS 程序是什么感觉

10
00:00:34,902 --> 00:00:37,402
like to develop an application for iOS, so you can decide,
你们可以再决定

11
00:00:37,471 --> 00:00:40,738
is this for me, or not? So, what are you gonna learn?
究竟适不适合你。这门课主要我们主要会讲

12
00:00:40,807 --> 00:00:43,441
Well you're gonna learn to build cool apps, all right,
如何开发很酷的 app

13
00:00:43,510 --> 00:00:46,778
that's, that's what we're here for. Why are these apps in iOS
当然了，你们来这里就是为了这个。可是为什么 iOS 上的程序这么 cool 呢？

14
00:00:46,847 --> 00:00:48,947
cool? Well for a number of reasons, okay?
这其中有几个原因

15
00:00:49,016 --> 00:00:50,982
One is they're in your back pocket,
首先是你可以随时

16
00:00:51,051 --> 00:00:54,085
you can pull them out and show your friends on your phone,
把手机拿出来展示给他们看

17
00:00:54,154 --> 00:00:57,288
a lot of them are networked so there're kind of social
许多 app 可以联网，而这些社交类的程序

18
00:00:57,357 --> 00:01:00,525
apps and a lot of that can be a lot of fun.
通常都能给我们带来欢乐

19
00:01:00,594 --> 00:01:03,595
Also if you decide to turn your app into a product it's
如果你决定发布你写的程序

20
00:01:03,663 --> 00:01:06,030
really easy to get it out to customers via the App Store.
你能很轻松地通过 App Store 展示给顾客

21
00:01:06,099 --> 00:01:07,900
You don't have to wrap it in a box and
你不再需要把程序

22
00:01:07,968 --> 00:01:10,468
put it on a shelf somewhere anymore. You can get it out
用盒子包装好后放到货架上了

23
00:01:10,537 --> 00:01:12,971
there real quick. And also you're going to see,
不仅上架的过程快，你马上会见识到

24
00:01:13,040 --> 00:01:16,608
today even, it's really easy to build pretty complex
就算是很复杂的 app

25
00:01:16,677 --> 00:01:20,012
app pretty quickly. So you get a lot of instant gratification
我们也能很轻松地写出来，让你马上就觉得

26
00:01:20,080 --> 00:01:22,548
from building iOS apps. For those of you in
开发 iOS 程序很有成就感

27
00:01:22,616 --> 00:01:25,751
computer science there's also this huge benefit, you're
对于那些选修计算机科学的同学们

28
00:01:25,819 --> 00:01:28,820
gonna get to see a real life object-oriented programming
你们能实际观察到面向对象系统的应用

29
00:01:28,889 --> 00:01:31,623
system. And not just object-oriented programming,
当然我们不只会讲面向对象编程

30
00:01:31,691 --> 00:01:34,192
but we're going to use databases in this class, and
我们还会使用数据库

31
00:01:34,261 --> 00:01:37,362
graphics, and multimedia, multi-threading, animation,
图形用户界面，多媒体，多线程，动画

32
00:01:37,430 --> 00:01:39,364
networking, all these things. And
网络，等等

33
00:01:39,433 --> 00:01:40,932
you're going to see it in a real world environment.
而且我们会在真实的情景下学习

34
00:01:41,001 --> 00:01:43,635
So you take a lot of classes on these subjects
你们多半已经上了不少关于编程或是计算机的课了

35
00:01:43,704 --> 00:01:46,137
and sometimes you get maybe a little disconnected from
相信有时候你会觉得那些课程

36
00:01:46,206 --> 00:01:47,472
what's this like in the real world, well,
都有些脱离实际

37
00:01:47,541 --> 00:01:52,211
you're gonna get to see it all in action here. Prerequisites,
我们这门课就是让你见识下这些抽象概念的实际运用

38
00:01:52,279 --> 00:01:55,414
just boiling it down really easily. The prerequisite for
上这门课之前你所需要具备的能力

39
00:01:55,483 --> 00:01:57,282
the class is object-oriented programming.
肯定少不了面向对象

40
00:01:57,350 --> 00:01:59,151
You have to know object-oriented programming,
你必须要了解面向对象编程

41
00:01:59,219 --> 00:02:01,586
I'm not gonna teach that in the class, I completely and
我绝不会在课上讲关于面向对象的知识

42
00:02:01,655 --> 00:02:04,289
utterly assume it. And not only do you have to know it,
你还不能只是听说过面向对象

43
00:02:04,358 --> 00:02:06,057
you have to have some experience doing it.
你还应该实际运用过

44
00:02:06,126 --> 00:02:09,260
So that's why here at Stanford CS106 A and
换言之，你需要上过斯坦福 CS106 A 或 B

45
00:02:09,329 --> 00:02:12,131
B are a hard prerequisite. You have to have taken those two,
这是硬性条件，你必须要上过至少其中一门

46
00:02:12,199 --> 00:02:14,733
those are object-oriented programming classes. And
你将会在那些课程中学到面向对象编程的相关知识

47
00:02:14,801 --> 00:02:16,535
then I just want to make sure you have some programming
其次是你要有些编程的经验

48
00:02:16,603 --> 00:02:19,338
experience, so either you've done something outside
可以是你课外活动

49
00:02:19,406 --> 00:02:22,608
of school, or you've taken CS107 or CS108 or CS110.
也可以是上过 CS107、CS108、CS110 其中的一个

50
00:02:22,676 --> 00:02:25,310
CS108 is a particularly great prerequisite,
如果你不满足这些条件，CS108 是个不错的选择

51
00:02:25,378 --> 00:02:27,646
that's object-oriented programming.
那门课会讲面向对象编程

52
00:02:27,715 --> 00:02:29,614
So if you have a chance to take CS108 and
所以如果你需要但还没有去上一门这样的课

53
00:02:29,683 --> 00:02:32,216
you haven't taken it yet, yeah, maybe taken it, and
你最好现在换成 CS108

54
00:02:32,285 --> 00:02:35,520
then take this class the next time it's offered, all right?
等下次提供 CS193P 的时候再来上也不迟

55
00:02:35,588 --> 00:02:41,025
So let's dive through what's in iOS really quickly here.
我们简单讲讲 iOS 系统的构成

56
00:02:41,094 --> 00:02:43,595
I've divided it here into four layers.
我将 iOS 分为了 4 层

57
00:02:43,664 --> 00:02:46,531
These layers are roughly close to the hardware.
越下面的越接近硬件

58
00:02:46,600 --> 00:02:49,968
And then up close to the user. So that bottom layer close to
越上面的越接近用户。我们看到那个

59
00:02:50,037 --> 00:02:53,238
the hardware, that's actually a UNIX operating system, okay?
最接近硬件的那层，那其实是 UNIX 操作系统

60
00:02:53,306 --> 00:02:56,941
Just like macOS, iOS is a UNIX operating system at
就像 macOS 一样，iOS 也是基于 UNIX 操作系统

61
00:02:57,010 --> 00:02:59,444
the bottom. None of these APIs are object oriented or
这些 API（应用程序接口）都不是面向对象的

62
00:02:59,513 --> 00:03:01,280
anything, they're basically C, okay? For
因为它们基本上都是用 C 语言写出来的

63
00:03:01,348 --> 00:03:05,551
the UNIX pretty much written in C, these API's are in C.
因为 UNIX 是用 C 语言写的，API 自然也是 C 风格的

64
00:03:05,619 --> 00:03:10,122
We're gonna do no work at that level in this class, okay?
我们不会在这门课中涉及到这个层次的编程

65
00:03:10,190 --> 00:03:10,989
This is an object-oriented programming only class,
我们只会涉及到有关于面向对象编程的内容

66
00:03:11,057 --> 00:03:11,690
so we're not gonna be doing anything there.
不会和 C 打交道

67
00:03:11,758 --> 00:03:14,659
So there's another layer right on top of that called core
在那一层之上是 Core Serviecs 层

68
00:03:14,728 --> 00:03:17,662
services. Sometimes people refer to this as foundation,
这一层主要是 Foundation

69
00:03:17,731 --> 00:03:21,333
but there's other things in this lever, layer,
但其实在这一层中除了 Foundation 以外

70
00:03:21,401 --> 00:03:24,836
besides foundation. And this is an object oriented layer
还有其它的功能。这一层实际上是

71
00:03:24,905 --> 00:03:27,539
on top of those things that were lower down. Okay, so
我们之前看到那一层经过了面向对象的封装

72
00:03:27,607 --> 00:03:30,875
now you can do networking, file system, things like that,
实现网络传输，访问文件系统的 API

73
00:03:30,944 --> 00:03:34,512
using object oriented API. But this is still non UI layer,
都是面向对象的。虽然这一层依旧不会涉及到用户界面

74
00:03:34,581 --> 00:03:38,283
right? It's still kinda closer to the hardware. So I'll
这层离硬件还算近的，

75
00:03:38,351 --> 00:03:40,619
definitely be teaching you a lot of stuff at this layer,
所以我们会在这上面多下点功夫

76
00:03:40,688 --> 00:03:43,721
'cause you just need it to do the things you're gonna do.
因为这些是必不可少的

77
00:03:43,790 --> 00:03:47,059
Now, there's another layer here, the media layer here I
下一层是媒体处理层

78
00:03:47,127 --> 00:03:51,262
call it. This is a huge layer, which has 3D graphics, and
这一层包含 3D 绘制

79
00:03:51,331 --> 00:03:55,533
audio playback and recording, image processing, video,
音频播放，录音，图像处理，视频等相关的功能。

80
00:03:55,602 --> 00:03:58,470
all that stuff. Unfortunately I'm not gonna have a lot of
可惜我们并没有什么时间学习这些

81
00:03:58,538 --> 00:04:01,006
time to spend here, even though it's a huge part of
即使这是 iOS 设备日常使用所需要的功能

82
00:04:01,074 --> 00:04:05,977
what an iOS device does. iOS devices all pretty much have
所有的 iOS 设备都能被当作一个 iPods 使用

83
00:04:06,046 --> 00:04:09,681
iPods in them, video iPods if you wanna think about it.
或者你也可以把它们叫做有显示屏的“iPods”

84
00:04:09,749 --> 00:04:12,584
And so there's a lot here. Unfortunately I can't cover it
当然不止这些功能，不过我依然不能细讲这些

85
00:04:12,653 --> 00:04:15,454
all. Because I'm gonna spend most of my time up here,
因为我们大部分时间都会花在这儿

86
00:04:15,523 --> 00:04:17,189
which is the Cocoa Touch layer.
Cocoa Touch 层

87
00:04:17,257 --> 00:04:20,058
This is where buttons and text fields and things are, but
这一层包含了按钮，文本字段等控件

88
00:04:20,127 --> 00:04:22,727
also much more powerful objects like maps.
甚至还包括那些功能强大的类，比如地图

89
00:04:22,796 --> 00:04:26,131
There's an object in Cocoa Touch which is a map object,
Cocoa Touch 层中定义了一个地图的类

90
00:04:26,200 --> 00:04:29,368
it's pretty much the entire Maps application on
那基本包含了 iOS 上地图程序所有的功能

91
00:04:29,436 --> 00:04:32,704
an iOS device, that you can drop right into a rectangle
你只需要把它放到你程序的界面上就行了

92
00:04:32,773 --> 00:04:35,573
in your app. With almost no work.
除此之外你基本什么都不需要做

93
00:04:35,642 --> 00:04:38,676
So, very powerful object to this layer. This is where
所以这一层的类都很好用

94
00:04:38,745 --> 00:04:40,779
we're gonna spend the vast majority of our time,
我们大部分时间也会学习

95
00:04:40,847 --> 00:04:43,315
building user interface apps at this layer.
如何在这个层面构建用户界面

96
00:04:44,618 --> 00:04:47,886
That's a rough overview. Trying to explain all
大概 iOS 系统的构成就是这样

97
00:04:47,955 --> 00:04:50,655
of iOS in two minutes is pretty much impossible, but
这么几分钟就完整地介绍 iOS 操作系统基本是不可能的

98
00:04:50,724 --> 00:04:53,825
that's kind of what we're doing in this class. We're
但你应该大概知道这门课程大概会包括哪些内容了

99
00:04:53,894 --> 00:04:57,029
gonna use all these components to get our work done.
iOS 开发是由以下几个部分构成的

100
00:04:57,098 --> 00:04:59,431
Top level there, Xcode 8, is gonna be...
首先是 Xcode 8

101
00:04:59,500 --> 00:05:01,766
everything we do is gonna be in Xcode 8.
我们所有事情都是在 Xcode 8 里完成的

102
00:05:01,835 --> 00:05:04,802
The debugger, the editor, everything, building,
调试器，编辑器，编译，等等

103
00:05:04,871 --> 00:05:08,173
it's all in Xcode 8. There's a little app, Instruments,
Xcode 8 都能搞定。我们还会用到 Instruments

104
00:05:08,242 --> 00:05:10,742
that goes along with it, for performance and stuff, but
Xcode 附带的小程序，能用来检测程序的性能

105
00:05:10,811 --> 00:05:13,845
pretty much it's all Xcode 8. Two, I'm gonna teach you
不过我们还是使用 Xcode 8 的时候比较多

106
00:05:13,914 --> 00:05:17,349
a new programming language. So if you're computer science
然后我们将学一门新的编程语言

107
00:05:17,418 --> 00:05:20,052
people, you know that learning different programming
学计算机科学的同学们应该知道

108
00:05:20,120 --> 00:05:22,354
languages, really valuable skill.
多学会一门语言是很有用的

109
00:05:22,423 --> 00:05:24,056
Not because you're necessarily gonna use all of them,
并不是说平常我们要把学过的语言都用上

110
00:05:24,124 --> 00:05:27,158
some you might or might not use. But just the process of
这需要根据情况取舍

111
00:05:27,227 --> 00:05:30,896
seeing how language designers pick and choose their syntax
不过光是研究设计语言这群人

112
00:05:30,965 --> 00:05:33,732
and, and the feature set, is really valuable.
决定的语法和功能，你都应该得到些收获

113
00:05:33,800 --> 00:05:36,702
So you'll get that I would think. It's a great language.
Swift 是世界上最好的语言

114
00:05:36,770 --> 00:05:38,770
It was just invented in the last two or three years, so
它在两三年前（2014年）才被发明出来

115
00:05:38,839 --> 00:05:40,806
it kind of incorporates the best of a lot of different
所以它集成了各种语言的精华

116
00:05:40,874 --> 00:05:44,475
languages. So I'm gonna kind of blitzkrieg teach that to
我将会用前几周的时间用填鸭式教会你们

117
00:05:44,544 --> 00:05:48,547
you in the first couple weeks. Frameworks: That's essentially
框架是必不可少的

118
00:05:48,615 --> 00:05:51,450
things like the Cocoa Touch UIKit framework.
就比如 Cocoa Touch 的 UIKit 框架

119
00:05:51,519 --> 00:05:52,884
It's where all the buttons and stuff are.
就是它包含了我们要用的按钮等控件

120
00:05:52,953 --> 00:05:54,452
Foundation is that, kind of,
Foundation 框架，正如我们之前说的

121
00:05:54,521 --> 00:05:56,021
mostly that Core Services layer.
主要是 Core Services 层的

122
00:05:56,089 --> 00:05:58,356
But there's a lot of other ones like Core Data framework,
当然还有不少其它的框架，比如 Core Data 框架

123
00:05:58,425 --> 00:05:59,625
object-oriented database,
面向对象的数据库

124
00:05:59,694 --> 00:06:01,293
we'll be doing that in assignment five.
我们将会在第五个作业中用到

125
00:06:01,361 --> 00:06:05,730
Also I talked about that map thing, that's in a framework
之前说的很牛的地图，那是 MapKit 框架里的

126
00:06:05,799 --> 00:06:08,534
called MapKit. And there's also things in Core Motion,
你能通过 Core Motion 框架读取

127
00:06:08,602 --> 00:06:11,470
like the accelerometer and the gyro in the device.
设备的加速度计和陀螺仪的数据

128
00:06:11,538 --> 00:06:13,071
All those things, I'm gonna be teaching you many,
一路上我们将学到

129
00:06:13,140 --> 00:06:15,540
many of these frameworks as we go on. And
越来越多的框架

130
00:06:15,609 --> 00:06:17,676
last, but definitely not least, and very,
最后， 非常重要的

131
00:06:17,745 --> 00:06:20,145
very important, is the design strategy for
是关于如何构建程序的设计模式

132
00:06:20,214 --> 00:06:23,315
how to build apps, it's called MVC, model-view-controller.
MVC, 即 Model（模型）-View（视图）-Controller（控制器）

133
00:06:23,384 --> 00:06:25,484
How many people already know MVC, have,
在场的同学有多少是听说过 MVC 的？

134
00:06:25,552 --> 00:06:27,152
have learned in a different class?
有多少学过的？

135
00:06:27,220 --> 00:06:30,288
See, so maybe half of you. I will spend the first part of
大概有一半吧。那我星期三

136
00:06:30,357 --> 00:06:33,659
Wednesday's lecture telling you about MVC and what it is.
上课时再讲讲 MVC 的概念

137
00:06:33,727 --> 00:06:38,696
We 100.0% have to use MVC when we develop apps for iOS.
我们在开发 iOS 程序的时候肯定会用到 MVC

138
00:06:38,765 --> 00:06:41,300
There's really no other way to do it, if you do it any other
可以说这是你无可厚非的选择

139
00:06:41,368 --> 00:06:43,902
way, you're swimming so up stream against the current of
如果你要另辟蹊径的话，那也只是逆水行舟

140
00:06:43,970 --> 00:06:47,239
iOS, it's... You'll end up with a mess of an application,
你最终会发现你的程序乱成一团糟

141
00:06:47,308 --> 00:06:50,275
okay, so we'll be going over that as well. This demo
所以我们会讲讲 MVC

142
00:06:50,343 --> 00:06:53,045
that I'm gonna do, we're gonna build a calculator.
接下了我们要写一个计算器程序

143
00:06:53,113 --> 00:06:56,181
A calculator's great because it's got a fairly simple UI,
因为它的界面很简单

144
00:06:56,250 --> 00:06:58,617
but it's got a little bit of guts on the inside,
其实计算结果的部分

145
00:06:58,686 --> 00:07:00,319
the actual calculating part. So
又有些难度

146
00:07:00,387 --> 00:07:03,355
it's just complicated enough to start showing you MVC and
用它来示范 MVC 刚刚好

147
00:07:03,424 --> 00:07:06,557
a lot of language features and things like that. But not so
能用到许多 Swift 语言的特性

148
00:07:06,626 --> 00:07:09,928
complicated that I can't do an entire calculator, basically,
但又不会难到

149
00:07:09,997 --> 00:07:13,131
in two lectures, okay, start to finish. All these topics up
我没法在两堂课内讲完。

150
00:07:13,200 --> 00:07:14,933
here, you don't have to look at them now.
你不需要太在意现在你看到的这些

151
00:07:15,002 --> 00:07:18,203
This is the slide to go look at after my lecture today and
在我讲完之后你自己再来看

152
00:07:18,272 --> 00:07:20,239
say, hmm did I learn that, yeah,
问问自己我是否学会了

153
00:07:20,307 --> 00:07:22,173
I think I got that. So
我是否掌握了

154
00:07:22,242 --> 00:07:25,177
it's kind of a summary of what I'm gonna do. Since I'm not
这就是这个课程大纲的用法

155
00:07:25,246 --> 00:07:27,045
gonna get back to the slides from the end of my demo,
既然我演示完之后多半下课了

156
00:07:27,114 --> 00:07:28,614
it's just gonna be the end of the lecture.
不会再回到这一页

157
00:07:28,682 --> 00:07:30,615
I'll tell you a little bit what's coming up.
我现在就先讲讲之后的课程安排

158
00:07:30,684 --> 00:07:33,251
On Wednesday, I'll be continuing this demo, but
星期三我会继续编这个计算器

159
00:07:33,320 --> 00:07:35,654
not until after I give you this talk about MVC,
但我肯定要先讲 MVC

160
00:07:35,723 --> 00:07:38,690
because what we're gonna do in the calculator is apply MVC
因为下节课我们就要

161
00:07:38,758 --> 00:07:41,760
to it, on Wednesday. And your first
在计算器中运用 MVC

162
00:07:41,829 --> 00:07:44,696
programming assignment will go out on Wednesday, which is
星期三我们还会放出第一个编程作业

163
00:07:44,765 --> 00:07:47,198
pretty much to replicate what I'm doing today and
你们只需要依葫芦画瓢

164
00:07:47,267 --> 00:07:51,069
on Wednesday, okay? And I'll give you a video of the demo,
照着我今天和星期三的视频做一遍

165
00:07:51,138 --> 00:07:54,840
so you'll see it, and you'll be able to watch it. And
没错，我会把视频发给你们

166
00:07:54,908 --> 00:07:57,709
then on Friday, we have an optional section.
星期五的课是选修课，不会放到 iTunes U 上

167
00:07:57,778 --> 00:07:59,211
So the Friday sections in this course,
所以星期五的课

168
00:07:59,280 --> 00:08:01,046
you don't have to go to if you don't want to.
同学们不感兴趣可以不来上

169
00:08:01,115 --> 00:08:03,248
But a lot of times, they're very valuable
但其实这些课程都一般都很有用

170
00:08:03,317 --> 00:08:07,085
feature. So if you have not used the debugger in Xcode 8
所以如果你没有用过 Xcode 8 的调试器

171
00:08:07,154 --> 00:08:10,022
you really might wanna go to Friday's lecture.
我推荐你来听听

172
00:08:10,090 --> 00:08:12,790
The location and time of it will be posted on the class
上课的时间和地点看我之后发的公告

173
00:08:12,859 --> 00:08:15,994
forums hopefully tomorrow. I've asked for the room and
我还在申请上课用的教室

174
00:08:16,062 --> 00:08:18,196
haven't quite got it yet so hopefully tomorrow. And
希望明天能搞定，然后通知你们

175
00:08:18,264 --> 00:08:20,565
then don't forget next Monday is a holiday so we're not
下周一放假，不上课

176
00:08:20,634 --> 00:08:23,067
meeting on Monday. Our next class after this Wednesday
所以再下一次上课是星期三

177
00:08:23,136 --> 00:08:28,540
will be next Wednesday. So let's hop into the demo...
好，我们开始 demo 吧

178
00:08:28,608 --> 00:08:31,743
I said we were gonna build a calculator, let me actually
既然我们要编一个计算器

179
00:08:31,811 --> 00:08:36,315
show you a calculator. This is the macOS calculator and
那我们先来看 macOS 上的计算器

180
00:08:36,383 --> 00:08:39,050
our calculator is gonna look very similar to this, right?
我们的计算器基本会照着这个来做

181
00:08:39,119 --> 00:08:42,520
It has to display along the top, it has the keypad for
最上面是显示，下面是按键

182
00:08:42,589 --> 00:08:46,058
typing numbers in and it's got these operation buttons. And
包括输入数字和执行运算的按钮

183
00:08:46,126 --> 00:08:49,294
then you can just multiply, times eight, you hit equals,
比如我们现在按 乘，8，等于

184
00:08:49,362 --> 00:08:50,395
it does the operation,
它就会计算出来

185
00:08:50,464 --> 00:08:52,463
that's pretty much what our calculator is gonna do.
我们的计算器就是要实现这样的功能

186
00:08:52,532 --> 00:08:55,100
It's not gonna look exactly like this. It's gonna have
我们 app 的界面不会和这个完全一样

187
00:08:55,169 --> 00:08:58,370
a look that's a little more appropriate for a iOS device,
因为我们会在保持界面基本元素的基础上

188
00:08:58,439 --> 00:09:03,041
but it's generally this. And I promised that Xcode would be
为适应 iOS 设备作出些微调

189
00:09:03,110 --> 00:09:05,210
your one-stop shop for doing all development, so
Xcode 无所不能

190
00:09:05,278 --> 00:09:08,847
we're gonna spend our entire time here working in Xcode.
因此我们开发会全程使用 Xcode

191
00:09:08,916 --> 00:09:12,117
Now Xcode is an app that you just go to the Mac App Store,
你可以从 Mac App Store 上免费下载

192
00:09:12,186 --> 00:09:13,952
and you download it. It's free.
请勿从百度云等第三方渠道下载

193
00:09:14,020 --> 00:09:16,688
When you first launch it, it's gonna put up this splash
当你第一次打开它的时候，你可以看到这个

194
00:09:16,757 --> 00:09:18,724
screen like you see right here.
这个欢迎界面

195
00:09:18,792 --> 00:09:21,927
And all of your projects are going to start accumulating
Xcode 会记住你的各个项目

196
00:09:21,995 --> 00:09:26,265
here over on this right side where this gray area is. And
并展示在现在这片灰色的地方

197
00:09:26,333 --> 00:09:29,634
you can basically do three other things here. You can use
这里有三个选项

198
00:09:29,703 --> 00:09:32,004
a playground, which I'll show the playgrounds on Wednesday,
你可以新建一个 playgroud，这我星期三会讲

199
00:09:32,072 --> 00:09:35,440
it's kind of a little play area for iOS programming. You
你可以在 playground 中简单试试自己的代码

200
00:09:35,509 --> 00:09:38,911
can check a existing project out of a source control
你可以添加代码管理源的项目

201
00:09:38,979 --> 00:09:41,079
management system which we're not gonna be doing.
但我们不会讲这个

202
00:09:41,148 --> 00:09:44,249
Although we're probably have a Friday section
也许星期五我们可以

203
00:09:44,318 --> 00:09:48,186
on doing a source code control. So we're gonna be
介绍下源代码管理

204
00:09:48,255 --> 00:09:50,956
doing this option right here, Create a new Xcode project.
我们大部分时候会用这个 Create a new Xcode project

205
00:09:51,024 --> 00:09:53,158
And in fact, when I do demos in this course,
实际上之后所有的 demo

206
00:09:53,227 --> 00:09:55,760
I almost always start from scratch.
我基本都会从零开始

207
00:09:55,829 --> 00:09:56,895
Cuz I don't want you to have to like,
因为我不想为了节约时间

208
00:09:56,963 --> 00:09:59,430
come up to speed on some code that I give you first, and
先编好一部分，发给你们

209
00:09:59,499 --> 00:10:03,368
then, learn from there. So we try to start from scratch, and
你们再以此为基础开始学

210
00:10:03,436 --> 00:10:06,271
see what we can do that way. So I'm gonna click on this,
所以我们会从头开始，不会藏着掖着

211
00:10:06,340 --> 00:10:09,107
to start a new app. It's asking, what kind
好，我们点了这个选项之后，Xcode 会问

212
00:10:09,175 --> 00:10:11,176
of app do we want to build, or what kind of project, and
你想编一个什么样的程序

213
00:10:11,245 --> 00:10:13,979
here you can see, we can do Watch apps, Apple TV apps,
你可以选开发 手表，电视，电脑上的程序

214
00:10:14,048 --> 00:10:17,616
even Mac OS apps, but we're doing iOS, and in fact,
不过我们这门课讲的是开发 iOS 程序

215
00:10:17,684 --> 00:10:21,453
we're always going to choose this Single View Application
所以我们一直会选这个 Single View Application 模版

216
00:10:21,522 --> 00:10:23,322
template. It's the simplest template, and
这是最简单的一个

217
00:10:23,390 --> 00:10:25,290
some of t hese other templates have code in there that I
其它的模版里面都已经帮你把重要的代码写好了

218
00:10:25,359 --> 00:10:27,525
actually want to show you how to write yourself instead of
我们这堂课就是教你们如何

219
00:10:27,594 --> 00:10:30,195
having the template just make that code appear, all right?
不依赖模版就能写出那些代码

220
00:10:30,264 --> 00:10:32,464
So we're gonna do Single View Application.
好，点击 Single View Application

221
00:10:32,532 --> 00:10:35,000
Now it wants some particulars on our application,
然后 Xcode 会让你填些详细信息

222
00:10:35,068 --> 00:10:37,302
most importantly at the top its name. Well,
这里最重要的是 Product Name，项目名称

223
00:10:37,371 --> 00:10:39,470
we're building a calculator so we're gonna call this
既然我们编的是计算器，所以取名叫 Calculator

224
00:10:39,539 --> 00:10:42,341
Calculator, okay, that's gonna be the name of our app.
因为各种原因请使用英文命名

225
00:10:42,409 --> 00:10:45,343
Now this second line here, team, that's the team of
下面这个 Team 是开发团队

226
00:10:45,412 --> 00:10:48,547
developers who are gonna work on this project, that's gonna
指定哪些人会开发这个程序

227
00:10:48,616 --> 00:10:52,050
be a team of one, which is you. Okay, when you launch
当然这里是你自己一个人组成的个人团队

228
00:10:52,119 --> 00:10:54,486
Xcode, this is probably not going to be a pull down list.
当你打开 Xcode 的时候，这里多半不是这样一个下拉列表

229
00:10:54,555 --> 00:10:57,021
It's gonna be a button that says Add Account or
你会看到一个写着 Add Account 

230
00:10:57,090 --> 00:11:00,925
something like that, Add Team. You click on that, all you'll
或是 Add Team 一类的按钮。点了那个按钮之后

231
00:11:00,994 --> 00:11:04,696
need is an Apple ID, any Apple ID will do, won't cost you any
你需要登录 Apple ID。如果你没有的话可以去免费注册一个

232
00:11:04,765 --> 00:11:07,866
money. And go through the dialog there and
登录之后

233
00:11:07,935 --> 00:11:11,636
it'll add a team for you, and you use that here. Alright?
你就能在这里看到你的个人团队了

234
00:11:11,705 --> 00:11:13,838
This organization name can be anything you want.
这里的 Organization Name, 组织名称可以随便填

235
00:11:13,907 --> 00:11:16,408
It's just gonna appear on the copyright symbol at the top of
Xcode 会在你每个文件的开头

236
00:11:16,477 --> 00:11:19,510
your source code files, that's it. But this one,
用这个组织名声明版权，仅此而已。但请保证下面这个

237
00:11:19,579 --> 00:11:24,316
it's super important that this be a unique identifier of you.
Organization Identifier，组织标识符是独一无二的

238
00:11:24,384 --> 00:11:30,021
Okay? So I strongly recommend doing edu.stanford.cs193p.
对于斯坦福的学生，我强烈建议使用

239
00:11:30,090 --> 00:11:35,160
You're SUNet ID here, okay? If you put that in there,
edu.stanford.cs193p.你的SUNetID

240
00:11:35,228 --> 00:11:36,895
you're almost guaranteed, if you're a Stanford student,
那至少对于每一个斯坦福学生来说，你不会和别人的重复

241
00:11:36,963 --> 00:11:38,830
for that to be unique. If you're not a Stanford student,
如果你不是斯坦福的学生

242
00:11:38,899 --> 00:11:41,733
you're watching this on iTunes U, pick something else that
也就是在 iTunes U 上观看的

243
00:11:41,801 --> 00:11:43,768
uniquely identifies you. Hopefully,
请自行挑选一个独特的标识符

244
00:11:43,837 --> 00:11:46,638
reverse DNS notation will work in your circumstance as well.
惯例是使用公司／个人网站域名的反写

245
00:11:48,575 --> 00:11:51,009
The language we're gonna use like I said is Swift.
Language，编程语言选 Swift

246
00:11:51,078 --> 00:11:53,812
iOS was originally written in a different language called
在发明 Swift 之前开发 iOS 程序都是使用 Objective-C

247
00:11:53,880 --> 00:11:56,681
Objective-C. Turns out you can use Objective-C and
当然现在也能够在同一个程序中

248
00:11:56,750 --> 00:11:59,384
Swift in the same application.
使用 Swift 和 Objective-C 混编

249
00:11:59,453 --> 00:12:04,222
They use the exact same underlying iOS API. So
这两个语言都使用的是同一个 iOS API

250
00:12:04,291 --> 00:12:06,257
everything you're gonna learn in this class in Swift,
你在这节课中学到的所有有关 Swift 的知识

251
00:12:06,326 --> 00:12:09,495
if you later went and learned Objective-C, all that learning
都能帮助你以后学 Objective-C（如果你想学 OC）

252
00:12:09,563 --> 00:12:11,863
would be valid, okay? Cuz it's the exact, in fact,
因为 Swift 有一部分正是

253
00:12:11,932 --> 00:12:15,367
it's the exact same code base, it's not just same API.
基于 Objective-C 的

254
00:12:15,435 --> 00:12:18,437
Swift was designed in a way to be quite compatible with
Swift 也在设计上尽量兼容 Objective-C

255
00:12:18,505 --> 00:12:20,639
Objective-C's APIs. And in the last couple years,
过去几年中苹果也在

256
00:12:20,707 --> 00:12:23,742
they've even enhanced Objective-C to catch up with
改善 Objective-C，吸收一些

257
00:12:23,810 --> 00:12:27,078
some of the advanced stuff that Swift does. Our app that
Swift 的优点

258
00:12:27,147 --> 00:12:29,081
we're going to build, our calculator is going to
这里的 Device，设备选 Universal，通用

259
00:12:29,149 --> 00:12:31,549
be universal. That means it's going to run on iPhone and
因为我们这个计算器在 iPhone 和 iPad 上都能运行

260
00:12:31,618 --> 00:12:36,255
on iPad. First couple weeks, it will be iPhone only but
虽然前几周我们只会顾及到 iPhone

261
00:12:36,323 --> 00:12:40,158
then, eventually, we'll add iPad support, as well.
之后我们会慢慢加入对 iPad 的支持

262
00:12:40,227 --> 00:12:42,127
We're not gonna be using a database in the calculator,
我们的计算器不需要使用数据库，所以不选择 Use Core Data

263
00:12:42,195 --> 00:12:45,297
but we will in your assignment five. And when it comes to
在之后的第五个作业中我们才会用到

264
00:12:45,366 --> 00:12:47,499
testing, which is super important, again, I'm hoping
Testing，测试是很重要的部分

265
00:12:47,568 --> 00:12:49,634
to have a Friday section to tell you a lot about testing,
我会在星期五的课上讲到

266
00:12:49,703 --> 00:12:53,238
especially the UI testing framework is really awesome,
特别是这个非常好用的 UI 测试框架

267
00:12:53,307 --> 00:12:55,874
okay, so hopefully we'll get a chance to show you that. So
希望我能展示给你们看看

268
00:12:55,943 --> 00:12:58,777
I'm just gonna click next here to create my app.
点击 Next，下一步

269
00:12:58,846 --> 00:13:01,746
It says, where do you wanna put this project? I recommend
Xcode 会问你要把这个项目存在哪里

270
00:13:01,815 --> 00:13:06,952
you put it home directory in a folder called Developer. Okay?
我推荐放在你用户根目录下的 Developer（开发者）文件夹中

271
00:13:07,021 --> 00:13:09,688
Then all your apps will just pile up in here.
所有的项目放在一起方便查找

272
00:13:09,756 --> 00:13:12,324
This is pretty much a canonical place to put it so
大家都约定俗成放在这里

273
00:13:12,393 --> 00:13:13,658
I strongly recommend it. And
我也推荐这样做

274
00:13:13,727 --> 00:13:17,429
then again source control is more for teams working on it.
这里的 Source Control，源码管理主要是针对团队协作

275
00:13:17,497 --> 00:13:18,897
You're gonna be working this by yourself so
你是自己一个人开发

276
00:13:18,966 --> 00:13:20,332
you can leave this switched off.
所以建议不勾选这个

277
00:13:21,569 --> 00:13:24,202
All right, here's our, there's your load.
到此我们就完成了

278
00:13:24,271 --> 00:13:25,670
There's your first iOS app,
创建你的第一个 iOS 程序的步骤

279
00:13:25,739 --> 00:13:29,141
okay? Now let me explain a little bit about Xcode and
我会讲讲 Xcode

280
00:13:29,210 --> 00:13:32,144
how it's laid out here. So if you haven't seen it...
和 Xcode 的界面布局

281
00:13:32,213 --> 00:13:35,546
How many people have worked in Xcode before? See, so
有多少人用过 Xcode 了？

282
00:13:35,615 --> 00:13:38,584
again probably half of you so quite a few. For those of you
有不少呢，差不多有一半的人

283
00:13:38,652 --> 00:13:41,620
who haven't, it's divided into these three main sections
对于那些不了解 Xcode 人，Xcode 界面主要分为三个部分

284
00:13:41,689 --> 00:13:46,525
here. This main section in the middle is the primary place
中间这个主要的部分是工作区

285
00:13:46,594 --> 00:13:48,760
you're going to do all your source code editing and
是用来写代码的

286
00:13:48,828 --> 00:13:52,264
things like that. That's where you do most of your work.
大部分时候你都会使用这个区域

287
00:13:52,332 --> 00:13:55,600
This section over here on the left, this blue section is
左边这个淡蓝色的部分是 Navigator，导航面板

288
00:13:55,669 --> 00:13:59,871
called the navigator. You use it to navigate your project.
用来在工程中导航

289
00:13:59,940 --> 00:14:02,140
And here you're seeing it in a file based view,
默认是显示文件导航

290
00:14:02,209 --> 00:14:04,242
where I'm looking at all my files. And we'll look at
你可以看到工程中所有的文件

291
00:14:04,311 --> 00:14:06,778
those in a second. But you can navigate by searching,
你也可以搜索

292
00:14:06,847 --> 00:14:09,314
okay, there's a search panel. If you, if you're debugging,
这是搜索面板

293
00:14:09,383 --> 00:14:11,183
you can navigate through all the break points that you
在调试过程中你可以浏览所有的断点

294
00:14:11,252 --> 00:14:15,120
have, etc. So, you'll learn all about the different
随着学期进展你们会慢慢学会

295
00:14:15,189 --> 00:14:18,389
ways that you can navigate, as the quarter goes on.
每一个部分的具体用法

296
00:14:18,458 --> 00:14:22,127
On the right hand side here you see this little area,
右边这个是

297
00:14:22,196 --> 00:14:23,729
this is called the utilities window.
Utilities, 工具区

298
00:14:23,797 --> 00:14:26,398
And I'm gonna talk all about this in about five minutes,
我马上就会讲到

299
00:14:26,467 --> 00:14:29,234
okay, we're gonna use this in great detail. I want to
讲到时我们再细看这个部分

300
00:14:29,303 --> 00:14:32,837
show you a little bit how you can manage your space here.
你是可以自定义 Xcode 界面布局的

301
00:14:32,906 --> 00:14:35,407
If you look in the upper right you see these buttons here.
右上角这里有三个按钮

302
00:14:35,475 --> 00:14:38,010
You can click this one over here to hide and
点击它们来显示或隐藏对应的部分

303
00:14:38,078 --> 00:14:41,280
show. That utilities window. And same thing over here for
这个对应的是工具区，这个对应的是导航面板

304
00:14:41,348 --> 00:14:45,650
the navigator. So that can make more space for you.
这样你就能有更多的空间了

305
00:14:45,719 --> 00:14:48,253
All right, and there's another one here, this middle.
中间的这个

306
00:14:48,322 --> 00:14:50,122
That hides something from the bottom.
对应的是窗口底部的这个

307
00:14:51,324 --> 00:14:53,892
This is your debugger window on the left and
左边是 debugger window，调试界面

308
00:14:53,961 --> 00:14:56,595
your console, which is a place where you can log
右边是 console，控制台，在调试时

309
00:14:56,663 --> 00:14:59,631
strings out to while you're debugging, on the right. And
用来展示你程序 log，输出的信息。

310
00:14:59,700 --> 00:15:03,335
we'll see that in a moment as well. All right, so
一会儿我们会用到

311
00:15:03,404 --> 00:15:04,636
let's go look at these files, right?
我们再来看看这些文件吧

312
00:15:04,704 --> 00:15:07,071
We're in the file navigator here on the left. And
在左边的文件导航面板中

313
00:15:07,140 --> 00:15:08,874
there's six files here but
可以看到有 6 个文件

314
00:15:08,942 --> 00:15:11,343
four of them are really just supporting files, and
其中有 4 个都只是辅助的文件

315
00:15:11,411 --> 00:15:13,778
we're not not even gonna look at them in the calculator.
我们编计算器不需要修改这些

316
00:15:13,847 --> 00:15:16,914
We'll look at a couple of them as the quarter goes on but,
虽然我们以后会用到其中一些

317
00:15:16,983 --> 00:15:18,850
they're not primary files.
总之你不需要太在意它们

318
00:15:18,918 --> 00:15:24,088
And for example, this one Assets.xcassets, Xcode assets.
比如这个 Assets.xcassets，Xcode 素材文件夹

319
00:15:24,157 --> 00:15:27,492
This is images and videos that might be embedded in your app.
需要在项目中使用的图片和视频都放在这里

320
00:15:27,561 --> 00:15:29,027
You can see it's the app icon,
比如这个就是应用的图标

321
00:15:29,095 --> 00:15:34,699
I haven't set any of my app icons, you can see there's a lot of different resolutions of them. But
需要这些不同尺寸的，我还没有设置

322
00:15:34,768 --> 00:15:39,570
this xcassets and the Launch Screen and this Info.plist and
选中 xcassets，Launch Screen，Info.plist，AppDelegate

323
00:15:39,639 --> 00:15:43,007
this AppDelegate here. By the way, I'm pulling down command,
在 macOS 中是按住 command 键多选

324
00:15:43,076 --> 00:15:45,644
you see in the lower left you can see any command keys that
在我屏幕左下角有显示

325
00:15:45,713 --> 00:15:48,947
I press right down there cuz I'm gonna use command keys for
我们要同时操作这几个文件

326
00:15:49,016 --> 00:15:51,182
various things that we do. So
要实现多选

327
00:15:51,251 --> 00:15:52,784
I use command to select all these. And
就要按住 command 键

328
00:15:52,853 --> 00:15:54,653
I'm just gonna right click and
点击鼠标右键／触控板辅助点击

329
00:15:54,721 --> 00:15:57,289
go down to here, New Group From Selection. And it's gonna
选 New Group From Selection

330
00:15:57,357 --> 00:16:00,291
put these four files into their own little folder.
用这些文件新建一个组

331
00:16:00,360 --> 00:16:03,796
There, it did it, I'm gonna call it Supporting Files,
重命名为 Supporting Files

332
00:16:03,864 --> 00:16:06,898
okay. And I can move these around in the navigator.
把这个文件夹移到下面

333
00:16:06,967 --> 00:16:09,501
See there they are, hidden in there. We're not gonna look at
可以看到这些文件都还在那里

334
00:16:09,569 --> 00:16:12,471
those. We're gonna focus in these two files right here,
我们目前只关心这两个文件

335
00:16:12,539 --> 00:16:18,209
okay? This file, is your first look at Swift. Here it is.
ViewController.swift 是你们看到的第一个 Swift 文件

336
00:16:18,278 --> 00:16:20,979
It's got some very important methods right here, which I'm
模板里自带了一个很重要的函数

337
00:16:21,047 --> 00:16:24,850
gonna delete. Okay? They are important, but the fact that
虽然很重要，但我还是要把它删掉

338
00:16:24,919 --> 00:16:26,151
I deleted them doesn't make them not important.
这并不是说这是无关紧要的

339
00:16:26,220 --> 00:16:28,220
It's just that I'm not gonna teach you about them for
只不过是我们几周后

340
00:16:28,288 --> 00:16:28,987
another couple weeks.
才会讲到

341
00:16:29,056 --> 00:16:31,824
So we're not gonna use them in the calculator. And in fact,
我们今天的计算器中不会用到

342
00:16:31,892 --> 00:16:35,460
I'm gonna go into detail about this Swift code more
我们先不着急学 Swift

343
00:16:35,528 --> 00:16:37,128
in a moment. But before I do that,
在我们开始写代码之前

344
00:16:37,197 --> 00:16:41,332
I wanna focus on this file right here, Main.storyboard.
我们先看看 Main.storyboard

345
00:16:41,401 --> 00:16:44,703
This is your user interface. This is calculator's user
这是（计算器的）UI，用户界面

346
00:16:44,771 --> 00:16:47,406
interface. And one thing you notice when I click on that,
可以看到，我们点开之后

347
00:16:47,474 --> 00:16:51,710
there's no code here. When you build your user interface
这里是没有代码的。在编写 iOS 程序的时候

348
00:16:51,779 --> 00:16:55,280
in iOS app in Xcode, you do not write code.
你可以选择不通过代码实现

349
00:16:55,348 --> 00:16:57,216
We're just gonna to build it with the mouse. We're gonna
用鼠标把控件

350
00:16:57,284 --> 00:16:59,651
drag some things out. We're gonna use some inspectors to
拖拽到界面中。还能通过检查器

351
00:16:59,719 --> 00:17:03,188
set the objects we want. The way we want them. That's how
自定义对象的属性。

352
00:17:03,256 --> 00:17:06,024
we're gonna build our UI. That code that you saw.
没错，我们就是这样构建 UI 的。我们要写的代码

353
00:17:06,092 --> 00:17:09,094
That is only gonna control the behavior of the UI.
只是用来实现 UI 背后的逻辑

354
00:17:09,163 --> 00:17:11,864
What happens when you touch on a button? Things like that.
比如我们按下一个按钮后会发生什么一类的

355
00:17:11,932 --> 00:17:13,699
That's what's gonna be controlled by that code. But
那就是我们代码所要实现的

356
00:17:13,767 --> 00:17:16,468
the actual layout of all the buttons and all that stuff.
至于按钮和其它元素的布局

357
00:17:16,537 --> 00:17:19,671
Is gonna be done here in this graphical view.
我们都是通过这个图形界面完成的

358
00:17:19,739 --> 00:17:22,841
Now you can see there's this area here on the left, okay?
左边这个，叫做

359
00:17:22,910 --> 00:17:25,277
This is like, this is called document outline.
Document Outline，文档大纲

360
00:17:25,346 --> 00:17:27,546
If you don't, here you'll see a little button there.
如果你看不见，按下面这里有个小按钮

361
00:17:27,615 --> 00:17:29,514
The document outline. The document outline has
文档大纲就出来了

362
00:17:29,582 --> 00:17:32,918
all the things in the user interface in an outline form.
这个大纲会展示所有用户界面里的内容

363
00:17:32,986 --> 00:17:34,486
And that's gonna be very useful for
之后对我们来说是非常有用的

364
00:17:34,554 --> 00:17:37,856
us. Later in the quarter. So, I'm gonna hide that.
现在我先把它隐藏起来

365
00:17:37,925 --> 00:17:39,858
That's this little button down here is. It hides and
下面这个按钮可以显示／隐藏这个大纲。

366
00:17:39,926 --> 00:17:42,026
shows it. We're gonna hide that to make more space.
收起来之后我我们就有更多的空间了

367
00:17:42,095 --> 00:17:45,430
We're not gonna use that in the calculator either. So
编计算器也不会用到

368
00:17:45,499 --> 00:17:47,165
that leaves this space here in,
现在我们看到的这个区域

369
00:17:47,233 --> 00:17:49,101
if I zoom in on a little bit here,
可以放大

370
00:17:49,169 --> 00:17:52,671
or zoom out rather. You can see I start to see something
可以缩小。现在看起来，

371
00:17:52,739 --> 00:17:55,941
that looks like an iPhone. Okay, it's kinda iPhone
是不是像个 iPhone 呢？像是 iPhone 屏幕的比例

372
00:17:56,010 --> 00:18:00,211
shaped, I can also by the way hold down the option key and
如果我按住 option 键

373
00:18:00,280 --> 00:18:04,316
use my mouse wheel to zoom in here. Okay, so this is like
滚动鼠标中键也能缩放

374
00:18:04,384 --> 00:18:06,985
an iPhone, in particular it looks like an iPhone 7.
中间空白的形状很像 iPhone 7

375
00:18:07,054 --> 00:18:09,788
You see down here at the bottom it says view as iPhone
下面这里写着使用 iPhone 7 预览

376
00:18:09,857 --> 00:18:14,493
7, all right? And if I click on view as iPhone 7,
"view as iPhone 7"，我点击这个

377
00:18:14,561 --> 00:18:19,531
you'll see all the other iOS devices appear- iPads,
会展示其它的 iOS 设备，比如各种 iPad

378
00:18:19,600 --> 00:18:24,202
for example. Or old iPhone 4s, they're really kinda little.
或是老旧的 iPhone 4s，相比之下屏幕要小得多

379
00:18:24,271 --> 00:18:26,938
And not only are they there but you can switch their
不仅能选择不同的设备，还能选择

380
00:18:27,007 --> 00:18:31,209
orientation, okay? Now when you build an iOS app,
屏幕的旋转方向。开发 iOS 程序

381
00:18:31,278 --> 00:18:35,414
you want the UI to look good on all these devices. And
你应该让 UI 在所有设备上都很美观

382
00:18:35,482 --> 00:18:37,482
you don't wanna have to write a lot of special if,
你也不应该用 if...then 来特殊情况特殊处理

383
00:18:37,550 --> 00:18:41,720
then code all over the place to make them work. So, this
才能让 UI 适合不同的尺寸

384
00:18:41,788 --> 00:18:45,390
whole system that, of building our UI, which by the way,
我们用来构建 UI 的这个部分

385
00:18:45,459 --> 00:18:48,426
is call Interface Builder. This part of Xcode is called
在 Xcode 中叫做 Interface Builder（IB）

386
00:18:48,495 --> 00:18:52,030
Interface Builder, is oriented with a lot of functionality
界面编辑器继承了很多功能

387
00:18:52,099 --> 00:18:55,567
to make you, make it so you can build your UI once and
让你能够一次编写

388
00:18:55,636 --> 00:18:59,037
it will work on all these devices. Now, I'm not gonna
处处运行

389
00:18:59,106 --> 00:19:01,540
actually start doing that until the end of the lecture
我会把优化 UI 留到最后

390
00:19:01,608 --> 00:19:04,643
on Wednesday. So, for now, we're just gonna build our UI,
星期三的课再来处理。现在 UI 只需要个大概

391
00:19:04,711 --> 00:19:07,279
it's gonna be kinda a mess. We'll throw buttons anywhere
马马虎虎就行

392
00:19:07,347 --> 00:19:11,250
we want. We're not really, really working in
按钮随便放哪里都行

393
00:19:11,318 --> 00:19:14,319
landscape mode like this vs portrait or small
暂时我们也不需要考虑横屏

394
00:19:14,387 --> 00:19:17,289
device or large device, ok? We're not gonna worry about
或是不同的屏幕大小

395
00:19:17,358 --> 00:19:19,925
that right off the bat but you just wanna preview the fact
不过即使我们现在不需要在意

396
00:19:19,994 --> 00:19:22,427
that we are eventually gonna build this universal UI
不过你们要明白

397
00:19:22,495 --> 00:19:26,365
that works on all of them. So here's our iPhone 7.
最后我们会构建一个通用的 UI。这是我们的 iPhone 7

398
00:19:26,433 --> 00:19:30,969
We wanna start building our UI. What do we need? We need
让我们开始吧。我们需要些什么？

399
00:19:31,038 --> 00:19:33,871
buttons and we need a kinda a display across the top.
我们需要一些按钮，和一个放在上面的显示屏

400
00:19:33,940 --> 00:19:36,641
Let's start with the buttons. Where do we get these buttons?
我们从按钮开始。可是按钮在哪里呢？

401
00:19:36,710 --> 00:19:39,711
Well, as promised. I'm gonna talk about this utilities area
乘此机会讲讲这里的工具区吧

402
00:19:39,779 --> 00:19:42,414
right here. Now, this utilities area has a top and
现在看到工具区分为了上下两个部分

403
00:19:42,483 --> 00:19:45,316
a bottom. You see that? And in the bottom,
对吧？下面的这个部分叫做

404
00:19:45,385 --> 00:19:50,121
right here, under this region called the object library, is
Object Library，对象库

405
00:19:50,190 --> 00:19:53,759
a library of iOS objects that you can build your app out of.
集合了 iOS 开发中各种你需要用到的对象

406
00:19:53,827 --> 00:19:57,262
And it has things like buttons, text fields,
比如按钮，文本字段

407
00:19:57,331 --> 00:20:00,298
it has more complicated things like image views and
也有更复杂的图像视图

408
00:20:00,367 --> 00:20:04,102
text views, which are multi line and editable text ,and it
文本视图，支持多行可编辑的文字

409
00:20:04,171 --> 00:20:07,239
even has things like that map thing I was telling you about.
还有之前说的地图视图

410
00:20:07,308 --> 00:20:10,242
Or a web view, which is basically Safari in a little
或是网页视图，封装在一个长方形里的 Safari

411
00:20:10,310 --> 00:20:13,511
rectangle. So it's got a lot of powerful things and
功能强大的控件数不胜数

412
00:20:13,580 --> 00:20:16,481
there's a lot of them in here. And we will try to cover
这里因有尽有。接下来的半学期我们会

413
00:20:16,549 --> 00:20:19,551
the vast majority of these in the course of the quarter.
学到大部分的使用方法

414
00:20:19,619 --> 00:20:22,888
But it's almost really too much to cover. So
但种类实在是太多了

415
00:20:22,956 --> 00:20:25,557
we're gonna start though simple with a button. And
我们先定一个小目标，从按钮开始

416
00:20:25,625 --> 00:20:27,959
if I want a button in my UI, I just pick it up with
如果我想要一个按钮，我用鼠标选中

417
00:20:28,028 --> 00:20:32,630
the mouse, okay, and drag it in. Now when I drag it in, see
然后拖到设计界面里来。拖到某些位置

418
00:20:32,699 --> 00:20:37,536
these blue lines are trying to help me put it in a good spot.
会出现蓝色参考线引导我

419
00:20:37,604 --> 00:20:40,839
You see that? Now, we're not gonna pay attention to that
这不是今天的重点

420
00:20:40,907 --> 00:20:43,007
right now because I told you we're doing this thing where
界面优化

421
00:20:43,076 --> 00:20:45,577
we're building the app that'll work on all devices. But
我们留到最后

422
00:20:45,646 --> 00:20:47,012
when we start thinking about
制作响应式布局的时候

423
00:20:47,080 --> 00:20:49,180
putting it on an app that works on all devices we
使用这些蓝色参考线

424
00:20:49,249 --> 00:20:52,751
really wanna use these dashed blue lines. Okay, because if
有很大的帮助

425
00:20:52,819 --> 00:20:55,320
you say something like I want this to be in the center.
比如说要把这个按钮居中

426
00:20:55,389 --> 00:20:57,389
Well now it'll be on the center on every device,
这个按钮不论在什么设备上

427
00:20:57,457 --> 00:21:00,025
no matter what this size of the screen, you see? So
都会自动居中

428
00:21:00,093 --> 00:21:03,461
these blue lines help you communicate that to interface
你现在看到的这两条辅助线表示

429
00:21:03,530 --> 00:21:07,032
builder, that you wanna it in the exact center. So again,
这个按钮一定要出现在屏幕正中间

430
00:21:07,100 --> 00:21:08,500
we're not gonna worry about that for now, so
我们目前并不担心界面不好看

431
00:21:08,569 --> 00:21:11,303
I'm just gonna drop this in the middle of nowhere. But
所以我会随便放一个地方

432
00:21:11,371 --> 00:21:14,473
again, those blue lines are gonna be very important down
再次强调，这些蓝色参考线以后会用到

433
00:21:14,541 --> 00:21:17,542
the road. All right so we've got this button here.
好，这个按钮在这里

434
00:21:17,611 --> 00:21:20,179
It's not [LAUGH] a very good button,
并不是很美观（笑）

435
00:21:20,247 --> 00:21:24,383
because it's kinda small and it says button on it.
又小，又写着 Button 在上面

436
00:21:24,451 --> 00:21:27,186
And we want it to be let's say one of our number buttons.
我们更希望这是个写着数字的按键

437
00:21:27,254 --> 00:21:28,520
Okay, so how are we gonna do that?
怎么更改显示的标题呢？

438
00:21:28,589 --> 00:21:31,590
Well, we can double click on it. And
在按钮上双击

439
00:21:31,659 --> 00:21:34,860
type one of our numbers, I'll make this be my 7 button, so
然后输入我们的数字，比如说 7

440
00:21:34,928 --> 00:21:38,330
this is gonna be my 7 button on my calculator. And I can
这就是我们计算器上的数字七了

441
00:21:38,398 --> 00:21:40,899
resize it, you see when I select it I get these handles.
我还可以调整按钮的大小。选中之后会出现这些尺寸控点

442
00:21:40,967 --> 00:21:43,168
So I can just pick it up by a corner and resize it.
我可按住任一尺寸控点，拖动来改变大小

443
00:21:43,236 --> 00:21:45,837
And when I do, it even tells me exactly what size.
拖动时会选中控件实际的大小

444
00:21:45,906 --> 00:21:48,840
So let's pick maybe a size like mm, 64 by 64?
就把尺寸设为设置为 64 x 64 吧

445
00:21:48,909 --> 00:21:53,678
That's a pretty good computer science size can be
这挺符合一门计算机课程的风格

446
00:21:53,747 --> 00:21:57,916
a little tricky then. Do it there, there, there we go.
虽然要做到精确，还真有些困难（汗）

447
00:21:57,985 --> 00:21:59,050
Okay, so we get 64 by 64 now.
好了，调整成 64 x 64 了

448
00:21:59,119 --> 00:22:01,586
Actually the size is not even gonna matter in the long term,
长远来看其实大小并不重要

449
00:22:01,655 --> 00:22:04,156
because on a smaller device like an iPhone 4 it's gonna be
比如像 iPhone 4 这种设备上我们要把尺寸

450
00:22:04,224 --> 00:22:05,357
shrunk down and
缩小

451
00:22:05,425 --> 00:22:08,060
on another device it's gonna be shrunk out. But for now,
大一些的设备上需要放大

452
00:22:08,128 --> 00:22:11,196
will pick some that's kinda using a reasonable amount of
但现在我们还是选一个针对 iPhone 7

453
00:22:11,264 --> 00:22:14,366
the screen real state on an iPhone 7. This is still
比较合理的尺寸

454
00:22:14,435 --> 00:22:17,469
kinda a small seven. We want it larger. So when we wanna do
这个 7 看着有点小，我们稍微把字号调大一些

455
00:22:17,538 --> 00:22:20,472
things like that that's when we go to the top half.
像这样的设置我们看到右边上半部分

456
00:22:20,541 --> 00:22:22,874
I'm just gonna get rid of this bottom half by scrolling it
我把这下面半部分拖下来隐藏到这里

457
00:22:22,943 --> 00:22:26,711
down here. We're gonna the top half of this utilities pane.
我们现在右边这个工具区

458
00:22:26,780 --> 00:22:28,647
And this is inspector and there's different kinds of
有不同的检查器

459
00:22:28,715 --> 00:22:31,382
inspectors. We're gonna be using the attribute inspector
我们要用的是属性检查器

460
00:22:31,451 --> 00:22:34,018
here, but there's also, for example, a size inspector.
这里还有尺寸检查器

461
00:22:34,087 --> 00:22:36,688
And when I click on that, you see that there's the 64 by 64,
我点击之后，你可以看到这里写着 64 x 64

462
00:22:36,757 --> 00:22:39,524
I could have just typed it in instead of trying
我其实可以直接在这里输入数字

463
00:22:39,593 --> 00:22:43,528
to get it exactly on there. Okay. The attributes inspector
设置准确的尺寸。回到正题，属性检查器

464
00:22:43,597 --> 00:22:45,330
is kinda an object oriented inspector.
是面向对象的

465
00:22:45,398 --> 00:22:47,732
You can see that it knows a button is selected, so
它知道我选中了一个按钮

466
00:22:47,801 --> 00:22:49,268
it's showing you button things.
所以显示按钮相关的属性

467
00:22:49,336 --> 00:22:51,069
Things that you can set about a button. But
你能设置按钮的这些属性

468
00:22:51,137 --> 00:22:53,872
a button is a class, object ordinate class that inherits
按钮是一个类，继承了控件

469
00:22:53,940 --> 00:22:56,574
from control, so you're seeing control things, and
所以一个控件的基本设置也出现在这里

470
00:22:56,643 --> 00:22:58,910
that inherits from view, so you're seeing view things.
控件继承自视图，所以视图的设置也在这里

471
00:22:58,979 --> 00:23:01,112
So this inspector is object orientated and
所以检查器是面向对象的

472
00:23:01,181 --> 00:23:03,815
shows you all the things that can be inspected about this
不仅能显示控件本身的属性

473
00:23:03,884 --> 00:23:06,919
object even using inheritance. So if I wanna change something
还能显示继承的属性。要更改按钮的字体大小

474
00:23:06,987 --> 00:23:10,355
like the font, I just look down here, title, here it is.
我只需要在这里找到 Title 下面的

475
00:23:10,424 --> 00:23:12,791
Font. Right here. I'm gonna click on this and
Font，就是这个，点击右边这个

476
00:23:12,859 --> 00:23:15,660
I'm gonna change this to 30 point let's say. Okay.
我把字号调成 30 号

477
00:23:15,729 --> 00:23:18,730
That looks pretty good. Now, maybe I wanna have
看起来还不错。我还想要给按钮

478
00:23:18,799 --> 00:23:23,501
a background for this button. So, if I look in here there's
加个背景色。看看属性选择器，里面有

479
00:23:23,570 --> 00:23:25,970
that background image. I don't want a background image.
Background Image，背景图片

480
00:23:26,039 --> 00:23:27,572
I actually want a background color. So
我们要颜色不是图片

481
00:23:27,641 --> 00:23:29,274
there's nothing in button that does that.
按钮类里面没有

482
00:23:29,343 --> 00:23:32,277
But, If I go down to view. I can see background right here
但是我们在下面 View 这里有一个 Background

483
00:23:32,346 --> 00:23:35,447
that's a color. And if I click on this, I can pick a color,
正好是颜色，点击这里，我可以选择一个颜色

484
00:23:35,516 --> 00:23:38,049
one of these pre-defined colors, or other colors, let
可以是默认的颜色，或者点 Ohter

485
00:23:38,118 --> 00:23:41,519
me choose from Color Picker a little crayon box or whatever.
然后从 macOS 的颜色选择器中选一个颜色

486
00:23:41,588 --> 00:23:46,057
So I'm just gonna pick from here the light gray.
我就选择这个 Light Gray Color

487
00:23:46,126 --> 00:23:48,193
That looks like a good background color. So
浅灰色挺适合当背景的

488
00:23:48,261 --> 00:23:50,629
now I've got a button, okay? Here's a nice button.
现在按钮看起来漂亮多了

489
00:23:50,697 --> 00:23:53,798
In fact, we could even run, see what our app looks like.
其实我们已经能运行下程序，看看效果怎么样了

490
00:23:53,867 --> 00:23:56,902
Just with one button. Now when it comes to running,
虽然只有一个按钮。运行之前

491
00:23:56,971 --> 00:23:59,671
the way you decide where you wanna run your program,
你能决定在什么设备上运行

492
00:23:59,740 --> 00:24:02,240
because you can run it on your device or you can actually run
你可以选择真机调试，也能使用

493
00:24:02,309 --> 00:24:04,843
it on a simulator. Okay, and for the first few weeks in
模拟器（Simulator）。前几周

494
00:24:04,912 --> 00:24:06,611
this class you can use the simulator.
我推荐使用模拟器

495
00:24:06,680 --> 00:24:07,812
Towards the end of the class I'm gonna
之后我会让你们

496
00:24:07,881 --> 00:24:09,414
ask you to start running on your device so
使用你们自己的设备

497
00:24:09,483 --> 00:24:12,383
you get used to doing that as well. But the way you do that
让你们也熟练掌握这个过程。选择设备的方法是

498
00:24:12,452 --> 00:24:15,853
is you go up here. You see it says calculator iPhone 7 Plus.
在这左上角，写着 Calculator > iPhone 7 Plus

499
00:24:15,922 --> 00:24:18,523
If you click on that you'll see a whole
点击这里你能看到

500
00:24:18,592 --> 00:24:21,493
bunch of simulators. These are all simulators of all those
所有的模拟器。这些都是不同能

501
00:24:21,562 --> 00:24:25,530
different devices that can run iOS 10. And then right up at
运行 iOS 10 的设备

502
00:24:25,599 --> 00:24:28,333
the top here, you could pick, if you had an actual device
如果你通过数据线连接了一台 iPhone 或是 iPad

503
00:24:28,401 --> 00:24:31,236
connected to your Mac, you could pick a physical device.
就会出现在这里供你选择

504
00:24:31,304 --> 00:24:33,105
And I'll be showing you that in a couple of weeks,
几周后我会做示范

505
00:24:33,173 --> 00:24:36,240
as well. So, let's run it on iPhone 7, okay,
让我们选择使用 iPhone 7 运行

506
00:24:36,309 --> 00:24:39,744
so I just picked iPhone 7, now I'm going to press this little
点击 iPhone 7，然后点击这个

507
00:24:39,813 --> 00:24:43,382
play button right here to run it. Okay, now it's going to
三角形的按钮开始运行。现在 Xcode 会

508
00:24:43,450 --> 00:24:47,753
launch the simulator. Now that simulator is a full iPhone
启动模拟器。模拟器五脏俱全，几乎和 iPhone 一样

509
00:24:47,821 --> 00:24:52,357
simulator, so it's not just running our app in a window.
所以并不只是在一个窗口中预览我们的程序

510
00:24:52,426 --> 00:24:55,327
Let's go find it here. It's over here, and
我们切换到 Simulator

511
00:24:55,396 --> 00:25:00,699
it's kind of big here, we'll make it small in a second. So,
现在显示的界面太大了，等会儿我们把它缩小点

512
00:25:00,768 --> 00:25:03,301
this, and in fact, there it is. You can see it zoomed in,
我们向上看，能找到放大了的按钮

513
00:25:03,370 --> 00:25:05,604
now the iPhone 7 has very high resolution, and
iPhone 7 的分辨率很高

514
00:25:05,672 --> 00:25:07,772
I'm running on a small resolution screen. But
我的电脑分辨率没那么高，可以通过

515
00:25:07,841 --> 00:25:10,542
you can actually go down here to scale, and scale it
菜单栏中的 Window > Scale 调整

516
00:25:10,610 --> 00:25:14,846
down a bit. Maybe that's too much. Let' scale it to here.
缩小。好像又太小了，我稍微放大些

517
00:25:14,915 --> 00:25:19,150
Yeah. So we're seeing 50% size here of an iPhone 7.
我们现在看到的是 50% 大小的 iPhone 7

518
00:25:19,219 --> 00:25:21,520
And there's our 7 button right there. Okay,
能很容易找到按钮数字 7

519
00:25:21,588 --> 00:25:24,056
now, you can press the Home button
要按下这个 iPhone 的 Home 键

520
00:25:24,124 --> 00:25:28,026
on this iPhone 7 by going to Hardware > Home. And
可以用菜单栏中的 Hardware > Home

521
00:25:28,095 --> 00:25:30,796
when you do that, look. This looks just like an iPhone.
看到了吧，按下去之后和 iPhone 一模一样

522
00:25:30,864 --> 00:25:33,332
You've got settings. You can go in and set some settings.
比如这是系统设置，你可以打开来修改一些设置

523
00:25:33,401 --> 00:25:36,968
Okay? Do home again. Cmd+Shift+H is home.
按下 Command+Shift+H 也是按下 Home 键

524
00:25:37,037 --> 00:25:38,269
And then you can go back to your app,
再回到我们的程序里

525
00:25:38,338 --> 00:25:41,373
which is the calculator right here. So
就是这里的之个 Calculaor

526
00:25:41,441 --> 00:25:45,543
if you're writing an app, for example, that uses GPS and
比方说你写的程序需要使用 GPS 定位

527
00:25:45,612 --> 00:25:49,414
you need to go to the settings to enable GPS location.
你就需要到设置中启用这个功能

528
00:25:49,483 --> 00:25:52,951
You can do that here on your simulator, okay?
模拟器是可以模拟地理位置的

529
00:25:53,019 --> 00:25:56,855
All right, so we got the 7 button, let's click it. Okay,
我们试试点击这个按钮

530
00:25:56,924 --> 00:26:01,326
well, It's flashing, so it looks like it's working, but
点一下会闪一下，好像在工作

531
00:26:01,394 --> 00:26:04,196
of course, it's not doing anything. We haven't told our
当然并不会有其它的什么效果

532
00:26:04,264 --> 00:26:07,599
7 button what to do, so it's doing nothing, all right? So
我们还没告诉按钮 7 应该做什么，所以什么都不会发生

533
00:26:07,668 --> 00:26:10,301
let's go make it do something. Now I told
那我们就来让它干点什么吧

534
00:26:10,370 --> 00:26:15,139
you that the behavior of the UI is written in code. So
我们需要写代码来响应界面的操作

535
00:26:15,208 --> 00:26:20,278
that's what this guy over here is, this ViewController.swift.
这就是 ViewController.swift 的作用

536
00:26:20,347 --> 00:26:23,615
That's the code where we're gonna do the behavior. And so,
里面包含了实现逻辑的代码

537
00:26:23,683 --> 00:26:29,988
how do we hook up this UI to this code? Well to do that,
如何把代码和界面连接起来呢？

538
00:26:30,057 --> 00:26:31,990
we need to get them both on screen at the same time,
我们需要让代码和界面同时显示在屏幕上

539
00:26:32,059 --> 00:26:35,193
all right? And the way we do that is with this button,
我们需要点击这里画着两个圈圈的按钮

540
00:26:35,262 --> 00:26:37,362
right here, assistant editor button.
显示 Assistant Editor

541
00:26:37,431 --> 00:26:41,599
So I'm gonna click it, and we get both. And I can click for
我再点 Storyboard，代码和 UI 就同时出现了

542
00:26:41,668 --> 00:26:44,969
example, on one side to show my UI. And
现在左边显示的是 UI

543
00:26:45,038 --> 00:26:47,539
it's automatically going to show the code on the other
右边会自动显示代码

544
00:26:47,608 --> 00:26:49,341
side. Okay, cuz it already,
因为大多数时候

545
00:26:49,410 --> 00:26:51,910
it knows that I probably wanted to do that. And
我们一般都是要连接两者

546
00:26:51,979 --> 00:26:54,212
it does that because, up here at the top you see it says,
当然右边需要上面这里选中了

547
00:26:54,281 --> 00:26:57,749
automatic. It's automatically picking it. Now you can go to
Automatic，自动选择。或者你也可以调成

548
00:26:57,818 --> 00:27:00,752
manual and manually pick the file you want to appear here,
Manual，手动选择你想要打开的文件

549
00:27:00,820 --> 00:27:03,721
but most of the times you're leave this on automatic. And
通常情况选 Automatic 

550
00:27:03,790 --> 00:27:06,525
it's gonna pick automatically the thing that makes the most
Xcode 都能自动选中

551
00:27:06,594 --> 00:27:08,960
sense to be on the right hand side. Okay,
当前最有用的文件

552
00:27:09,029 --> 00:27:12,231
we'll make some more space there. All right? So
我们把工作区调大一点

553
00:27:12,299 --> 00:27:14,866
let's zoom this in a little bit so
同时把 UI 界面也缩小点

554
00:27:14,935 --> 00:27:17,536
we can see the whole iPhone 7,
显示出整个 iPhone 7

555
00:27:17,604 --> 00:27:20,372
all right, so let's look at this code first because this
我们来仔细研究下这个文件

556
00:27:20,441 --> 00:27:22,007
is the first time you've seen Swift.
因为你们都是第一次看到 Swift 代码

557
00:27:22,075 --> 00:27:24,910
Swift is really nice, because it's kind of succinct and
Swift 的优点之一就是简洁

558
00:27:24,979 --> 00:27:28,914
kind of very obvious in the keywords it's chosen, etc. So
使用的关键字也大多都通俗易懂

559
00:27:28,982 --> 00:27:31,717
import is like include in a lot of languages, it's
import 就像是其它语言中的 include

560
00:27:31,785 --> 00:27:34,920
just basically saying I want to use this framework UIKit.
意思就是我想要使用 UIKit 框架

561
00:27:34,989 --> 00:27:39,124
Now, this is our UI behavior controlling code.
因为这是我们控制 UI 界面的代码

562
00:27:39,193 --> 00:27:41,793
So of course, it needs to use UIKit,
UIKit 自然必不可少

563
00:27:41,861 --> 00:27:44,896
okay? If we were to write an object that's more of like
如果我们写的是

564
00:27:44,965 --> 00:27:46,899
the internals of the calculator that's
计算器的逻辑部分

565
00:27:46,967 --> 00:27:47,966
UI independent,
和 UI 毫不相关

566
00:27:48,035 --> 00:27:50,401
then we would probably import foundation here.
那我们更可能是 import Foundation

567
00:27:50,470 --> 00:27:52,804
Foundation to kind of get to that Core Services layer,
Foundation 框架是 Core Services 层的

568
00:27:52,873 --> 00:27:55,840
not UI. You would never want to import UIKit in one of
和 UI 无关。在和 UI 无关的文件中

569
00:27:55,909 --> 00:27:59,978
those non-UI kind of classes. And you'll see that when we do
不要 import UIKit。星期三讲到

570
00:28:00,047 --> 00:28:04,082
the MVC on Wednesday. There's of course other things we can
MVC 的时候你就明白了。盎然我们也能

571
00:28:04,151 --> 00:28:07,753
import too, like map kit, things like that. All right,
import 其它的库，比如 MapKit。

572
00:28:07,821 --> 00:28:11,190
so here you're seeing your first declaration
接下来是你看到第一个类的声明

573
00:28:11,258 --> 00:28:15,393
of a Swift class. Okay? Keyword class, of course.
Swift 里的类理所应当地使用 class 作为关键字

574
00:28:15,462 --> 00:28:19,364
Name, this is the name of the class. ViewController is
这个是类的名字，ViewController

575
00:28:19,433 --> 00:28:21,966
name of class, it's kind of a generic name.
这是一个很笼统的名字

576
00:28:22,035 --> 00:28:24,302
Probably would have given it a better name if I had had
我们最好给它取个更好的名字

577
00:28:24,371 --> 00:28:27,205
a chance, but this is what the template gave me.
但这就是模板中默认的

578
00:28:27,274 --> 00:28:29,541
You can't unfortunately just rename this by typing,
然而改名并不只是在这里改就完事了

579
00:28:29,609 --> 00:28:33,044
because it's linked up to your UI. I will show you how to
因为它已经和 UI 是互相关联的。我之后会教你们

580
00:28:33,113 --> 00:28:37,115
rename this class later. But for now, we're going to stick
怎么正确地改名。现在我们就先凑合用

581
00:28:37,183 --> 00:28:42,120
with this generic name. This colon UI view controller is
这个普通的名字吧。这个 : UIViewController

582
00:28:42,189 --> 00:28:45,623
the class that view controller inherits from, okay? This is
是 ViewController 继承的父类

583
00:28:45,692 --> 00:28:47,960
object oriented programming, this is inheritance.
面向对象不可或缺的继承

584
00:28:48,028 --> 00:28:49,895
Again, you have to know object oriented programming to be
再次强调，理解面向对象

585
00:28:49,963 --> 00:28:52,931
sitting in this room. So you know what that means?
是上本课的前提。所以你应该知道

586
00:28:52,999 --> 00:28:56,201
Swift is single inheritance. So you can only inherit from
Swift 也是单一继承，也就是只继承一个类

587
00:28:56,269 --> 00:28:59,070
one class. And view controller inherits from this class.
ViewController 就只继承自 UIViewController

588
00:28:59,139 --> 00:29:03,608
This class' capabilities are, it knows how to control a UI.
这个类的功能就是控制 UI

589
00:29:03,677 --> 00:29:06,811
That's why it's called a view controller. We call this our
所以叫视图控制器

590
00:29:06,880 --> 00:29:09,114
view over here, and it knows how to control it.
这个类知道如何控制这边的视图

591
00:29:09,182 --> 00:29:12,017
So this view controller is inheriting all the capability
正是继承了父类的所有功能

592
00:29:12,086 --> 00:29:13,351
of how to control this. Which is great,
才让它知道如何控制。那真是挺不错的

593
00:29:13,420 --> 00:29:16,120
because that's exactly what we want it to do. And
因为这正是我们想让它做的

594
00:29:16,189 --> 00:29:18,790
then inside the curly braces, here we're going to put all of
大括号里面是类的主体

595
00:29:18,859 --> 00:29:23,161
our instance variables and methods. Okay?
包括了实例属性和方法

596
00:29:23,230 --> 00:29:25,430
Hopefully everyone knows what an instance variable
希望大家都还记得什么是实例变量

597
00:29:25,499 --> 00:29:27,199
and a method is, right? 
什么是实例方法，对吧？

598
00:29:27,200 --> 00:29:28,900
An instance variable is like storage of variables inside of
实例变量就是由实例分配内存的变量

599
00:29:28,969 --> 00:29:32,270
our class, and a method is just a function in there.
方法就是类里的函数

600
00:29:32,339 --> 00:29:35,640
By the way, we call instance variables in Swift properties.
还有，在 Swift 中实例变量叫做属性

601
00:29:35,709 --> 00:29:37,108
So if you hear me saying properties,
如果你听到我说属性

602
00:29:37,177 --> 00:29:39,411
I mean like instance variables. Okay,
我指的就是实例变量

603
00:29:39,480 --> 00:29:44,049
we call methods, methods. So what I really want now
方法还是叫方法。我现在想要的是

604
00:29:44,117 --> 00:29:47,853
is that when this button is touched, I want it to invoke
每当按下这个按钮，我想让它调用

605
00:29:47,921 --> 00:29:52,424
a method in my class, right? I want it to call a method.
这个类里的一个方法

606
00:29:52,493 --> 00:29:54,625
That would be perfect cuz then I could put whatever
这样我就能够把其它我想要执行的代码

607
00:29:54,694 --> 00:29:55,794
code I want in there. And
都放在那个方法里

608
00:29:55,863 --> 00:29:56,928
that's exactly what we're gonna do.
这就是我们要做到

609
00:29:56,997 --> 00:30:01,266
Now the way we link that up is kinda kooky. Here we go, I'm
你绝对猜不到这新奇的连接方法

610
00:30:01,335 --> 00:30:03,935
gonna hold down Ctrl. You see I'm holding Ctrl down there.
按住 Control 键

611
00:30:04,004 --> 00:30:09,808
I'm going to drag from this button into my code,
再点击按钮，然后拖动鼠标到代码这边

612
00:30:09,877 --> 00:30:13,611
okay? This is how I'm gonna connect it. And when I let go,
就是这样连接的。我放开鼠标

613
00:30:13,680 --> 00:30:17,349
it says you wanna make a connection between your UI and
就弹出窗口说，你想要连接 UI 和代码

614
00:30:17,418 --> 00:30:19,284
this code, what kinda connection do you want?
但它们之间具体是什么关系？

615
00:30:19,353 --> 00:30:20,952
And there's really two choices.
这里有两种选项

616
00:30:21,021 --> 00:30:23,722
There's Outlet, that means make a property or
一种是 Outlet，连接为属性

617
00:30:23,790 --> 00:30:25,857
an instance variable that points to this thing, so
也就是作为类的实例变量

618
00:30:25,926 --> 00:30:28,793
I can talk to it. And then there's action,
能进行操作。另一种是 Action

619
00:30:28,862 --> 00:30:31,896
which means make a method, and when the buttons touch,
作为一个方法，当按钮被点击

620
00:30:31,965 --> 00:30:35,066
call this method. Everybody got that?
就调用这个方法。明白了吗？

621
00:30:35,135 --> 00:30:37,169
All right, so here it's asking for the name of this method.
好，这里填方法的名称

622
00:30:37,238 --> 00:30:40,105
I'm going to call this method touchDigit.
我把它叫做 touchDigit

623
00:30:40,173 --> 00:30:44,909
Okay, touchDigit. And this method, it can have arguments,
touchDigit 可以带有多个参数

624
00:30:44,978 --> 00:30:47,612
it could have no arguments, or one argument which is,
也可以不带参数，也可以一个参数

625
00:30:47,681 --> 00:30:50,582
the button sending me this message. Now I need
告诉我按下的是哪个按钮

626
00:30:50,651 --> 00:30:53,151
that argument because I want to have one touch
我需要保留这个参数，因为我要用

627
00:30:53,220 --> 00:30:56,088
digit method that all my buttons set. So I'm going to
一个方法来处理所有的按钮

628
00:30:56,156 --> 00:30:59,157
ask the button who's sending it to me, who are you?
所以我需要知道到底是哪个按钮调用的这个方法

629
00:30:59,225 --> 00:31:00,759
What title, are you the 7 button?
你的标题是什么，是 7

630
00:31:00,828 --> 00:31:02,427
Are you the five button, what are you? So
还是 5？究竟是哪个按钮？

631
00:31:02,496 --> 00:31:05,430
I want that sender. This type right here,
所以我要保留 Sender 这个参数。这里的 Type

632
00:31:05,498 --> 00:31:09,101
it says Any, that's the type of the argument. Very, okay,
说参数的类型是 Any

633
00:31:09,169 --> 00:31:12,237
wake-up if you're taking a nap right now, and when you're
注意了，睡觉的同学们，勾重点了

634
00:31:12,306 --> 00:31:14,706
doing your homework, you cannot leave this to any.
做作业的时候，不能把这个留成 Any

635
00:31:14,775 --> 00:31:17,342
Because we know what kind of thing is sending you this
我们知道只有谁会调用这个方法

636
00:31:17,411 --> 00:31:20,312
message, it's a UIButton, so you're gonna wanna change this
只有 UIButton，所以大家一定要改

637
00:31:20,381 --> 00:31:23,448
Any to UIButton. If you miss that step and
把 Any 改成 UIButton。如果你漏了这一步

638
00:31:23,516 --> 00:31:26,018
when you go in there, your code's all gonna be messed up,
你就彻底搞砸了

639
00:31:26,086 --> 00:31:29,121
because the argument type of the sender is gonna be any,
参数的类型变成了 Any

640
00:31:29,189 --> 00:31:32,223
which it just basically means untyped, almost. So
基本上就是没有指定类型

641
00:31:32,292 --> 00:31:34,426
that's no good. So make sure you change this to UIButton.
为了避免悲剧，一定要改成 UIButton

642
00:31:35,695 --> 00:31:37,695
Now, when we connect this, it creates a method. So
点击 Connect 连接，它会自动添加一个方法

643
00:31:37,764 --> 00:31:41,133
you're getting your first look right here at a Swift method.
我们来看看你定义的第一个 Swift 方法

644
00:31:41,202 --> 00:31:44,202
Now, this is actually not part of Swift, okay.
@IBAction 并不是 Swift 的一部分

645
00:31:44,271 --> 00:31:47,372
This is something Xcode drops in there. And it does it so
这是 Xcode 的标记，为了

646
00:31:47,440 --> 00:31:49,641
that it can put this little circle in the gutter.
在左边显示个小圆点

647
00:31:49,710 --> 00:31:51,410
You see that circle right there?
看到这个圆圈了嘛？

648
00:31:51,479 --> 00:31:54,546
If I mouse over that circle, look what happens.
你把鼠标悬停在上面，看看会发生什么

649
00:31:54,615 --> 00:31:57,449
I didn't click on it, I just put my mouse over it. You see,
不需要点击，移过去就可以了

650
00:31:57,518 --> 00:32:00,118
it tells me what this method is hooked up to.
它会显示这个方法和谁建立了连接

651
00:32:00,187 --> 00:32:03,956
In other words, what user interface element sends me
也就是哪些 UI 控件会调用这个方法

652
00:32:04,024 --> 00:32:08,961
this message, okay? So this is purely not a Swift thing,
所以这并不是 Swift 语言的一部分

653
00:32:09,029 --> 00:32:15,334
this is purely an Xcode thing. So this is a Swift method,
这只是 Xcode 的标记。剩下的部分就是方法了

654
00:32:15,402 --> 00:32:18,737
okay? So let's look at the parts of a Swift method,
我分析下 Swift 方法不同的部分

655
00:32:18,806 --> 00:32:20,571
the syntax of it, so you understand a little better.
你们好理解 Swift 函数的语法

656
00:32:20,640 --> 00:32:23,775
And I'm gonna use a different method that I'm just going to
为此我另外写一个方法

657
00:32:23,844 --> 00:32:26,778
make up for this. Let's say I had some
选一个更好的例子，比方说

658
00:32:26,847 --> 00:32:31,983
function called a drawHorizontalLine and
drawHorizontalLine，画一条横线

659
00:32:32,052 --> 00:32:36,054
it draws from some starting position,
从某个起点

660
00:32:36,123 --> 00:32:39,691
which would be a Double to some ending position,
一个 Double 类型的小数，到某个终点

661
00:32:39,759 --> 00:32:42,627
which also be a Double. And maybe it does it using
又一个 Double。也许还使用

662
00:32:42,696 --> 00:32:46,865
some color, which would be a UIColor. Okay? So
某种颜色，类型是 UIColor

663
00:32:46,934 --> 00:32:50,468
there's an example of a Swift method. Notice that it,
这是另一个 Swift 方法的例子

664
00:32:50,537 --> 00:32:54,006
this has three parameters. You see? This one, this one and
它有三个形参，startX，endX，color

665
00:32:54,074 --> 00:32:59,645
this one. This ": Double" is the type of this parameter.
: Double 是这个参数的类型

666
00:32:59,713 --> 00:33:02,147
So it's a double-precision floating-point number. That's
双精度浮点型小数

667
00:33:02,216 --> 00:33:05,083
the type of that parameter. This one's also Double.
这就是这个参数的类型。这也是 Double

668
00:33:05,152 --> 00:33:09,854
This one is a UIColor. Okay, which is a different type.
这个是另一种类型，UIColor

669
00:33:09,923 --> 00:33:12,891
Now what's really interesting about parameters is that you
有趣的是每个参数

670
00:33:12,960 --> 00:33:17,930
have two names for each one. See, from startX,
都有两个名字。from startX

671
00:33:17,998 --> 00:33:21,233
to endX, using a color, each one has two, so what
to endX，using color。什么鬼？

672
00:33:21,301 --> 00:33:25,937
the heck is going on there with those two? Well this one,
怎么会有两个名字呢？前面的这个

673
00:33:26,006 --> 00:33:29,741
the first one, is the external name of this parameter. And
第一个是函数外部的实参标签（argument label）

674
00:33:29,809 --> 00:33:33,912
this is the internal name. So these internal names,
第二个是函数内部的形参名称（parameter name）

675
00:33:33,980 --> 00:33:35,546
like startX, endX, and
就是 startX，endX 和 color

676
00:33:35,615 --> 00:33:38,884
color. You would use those in your code inside this method.
这些名称是在函数里使用的名称

677
00:33:38,953 --> 00:33:42,721
Like, I might say, distance = endX - startX, or
比如 distance = endX - startX

678
00:33:42,789 --> 00:33:46,057
something like that. See I'm using endX and startX
或是其它的。可以看出我在实现函数时

679
00:33:46,126 --> 00:33:50,095
inside this method, right? Part of it's implementation.
用的是 endX 和 startX，对吧？

680
00:33:50,163 --> 00:33:52,764
These external names are used by the callers,
调用函数时则使用这些外部的名称

681
00:33:52,833 --> 00:33:55,500
the people who call this method. So I'm gonna call this
那些调用的人用的实参标签

682
00:33:55,569 --> 00:33:58,537
method from touchDigit here, drawHorizontalLine.
比如我在 touchDigit 中使用  drawHorizontalLine

683
00:33:58,605 --> 00:34:01,006
Now, by the way, Xcode loves to type for you.
Xcode 没崩溃时会帮你自动补全

684
00:34:01,075 --> 00:34:04,776
So I just type drawH and now I'm hitting tab. And tab, and
我只打了 drawH，再按 tab 键，再按一下

685
00:34:04,845 --> 00:34:07,345
it's not only filling out drawHorizontalLine,
Xcode 帮我输入了整个 drawHorizontalLine

686
00:34:07,414 --> 00:34:09,481
but it's showing me all the arguments and
并显示所有要填的参数

687
00:34:09,550 --> 00:34:13,385
tabbing to the first one so I can type it. So notice that
而且已经帮我定为到第一个参数这里了

688
00:34:13,453 --> 00:34:16,054
when it said that, the from, the to, and the using
就像我刚才说的，from，to 和 using

689
00:34:16,123 --> 00:34:20,758
were put in there for me. So if I say from 5.0 to 8.5 using
出现在了这里。如果我说从 5.0 画横线到 8.5

690
00:34:20,827 --> 00:34:25,930
the color UIColor.blue let's say, okay?
使用的是 UIColor 的蓝色

691
00:34:25,999 --> 00:34:30,335
These from and to and using are what the caller uses.
from，to 和 using 是调用这个方法时用的

692
00:34:30,404 --> 00:34:34,706
Notice also, that these things are mandatory. They have to go
而且是必须要用

693
00:34:34,774 --> 00:34:38,043
in here. You can not call drawHorizontalLine like this,
你不能像这样调用 drawHorizontalLine

694
00:34:38,112 --> 00:34:42,714
drawHorizontalLine 5.0, this would be, look like most other
drawHorizontalLine(5.0, 8.5, .blue)

695
00:34:42,783 --> 00:34:46,685
languages, you know, blue. You can't call it like that.
这是行不通的

696
00:34:46,754 --> 00:34:48,987
You have to put these external names in there.
这些标签是必不可少的

697
00:34:50,290 --> 00:34:52,357
Also notice that the external names are picked so
选择标签的时候要尽量保证行文通畅

698
00:34:52,425 --> 00:34:57,329
this reads like English. Draw a horizontal line from 5.0
读起来像英文 —— 画一横条线自 5.0 到 8.5，要使用蓝色

699
00:34:57,398 --> 00:35:01,700
to 8.5 using blue, okay? Swift endeavors
在 API Design Guidelines 中

700
00:35:01,769 --> 00:35:05,604
to be as kind of conversational in the language
Swift 强烈建议让代码

701
00:35:05,673 --> 00:35:09,141
of English as it can be. So
接近自然语言

702
00:35:09,209 --> 00:35:13,445
that's kinda crash course. You're gonna be reading, your
这只是简单的介绍。我给你们的

703
00:35:13,513 --> 00:35:15,747
reading assignment's gonna tell you more about that, but
阅读作业里有更详细的解释

704
00:35:15,816 --> 00:35:18,750
that's the crash course. But now let's take a look at thi-,
但最基础的就这些。好，我们看看

705
00:35:18,819 --> 00:35:21,553
by the way, if your function returns something,
等等，忘了讲了，如果函数或方法有返回值

706
00:35:21,622 --> 00:35:26,191
you just go like this, okay? -> String. It's kind of like,
你就像这样写，-> String

707
00:35:26,260 --> 00:35:29,861
the arrow is saying, out of this comes a String, okay?
这箭头就像是在说，这东西会生成一个字符串

708
00:35:29,930 --> 00:35:34,132
So this would be the return value, okay?
所以也就被作为了表示返回值类型的语法

709
00:35:34,201 --> 00:35:36,501
All right, now, let's look at touchDigit though,
回到正题，touchDigit 

710
00:35:36,570 --> 00:35:40,205
touchDigit is weird. Look at its two things here, okay?
touchDigit 有些与众不同，它也有两个参数

711
00:35:40,274 --> 00:35:43,408
The external one is _, okay?
不过第一个是 _，下划线

712
00:35:43,477 --> 00:35:47,212
So does that mean I call it by saying, touchDigit_:
难道我要这样写么？touchDigit(_: 

713
00:35:47,281 --> 00:35:51,783
whatever? No, underbar means there is no external. So
并不是。下划线表示不需要标签

714
00:35:51,852 --> 00:35:53,952
you would call touchDigit by just saying,
也就是你只需要写

715
00:35:54,021 --> 00:35:56,821
touchDigit(someButton) cuz that's the argument,
touchDigit(某个按钮) 就行了

716
00:35:56,890 --> 00:35:59,558
it's a button or whatever. Okay, there's no, you won't,
只需要写某个按钮，你并不需要写个

717
00:35:59,627 --> 00:36:01,693
you don't put anything in here, it's not like a foo.
你并不需要写任何的东西。如果这里是 foo

718
00:36:01,762 --> 00:36:03,628
If we had this it would be foo, okay?
那我们这里也要写 foo

719
00:36:03,697 --> 00:36:06,831
That's not in there. Instead, it's this underbar, so
既然不是 foo 而是下划线

720
00:36:06,900 --> 00:36:11,703
you have nothing. Okay? Now, why do we sometimes have
就什么都不写。为什么会有这种情况呢？

721
00:36:11,772 --> 00:36:15,173
nothing? Because sometimes, it's implicit in either
这种情况标签多半存在于

722
00:36:15,242 --> 00:36:18,242
the name of the function or the type of the argument,
函数名或是参数类型里面了

723
00:36:18,311 --> 00:36:20,879
what you're supposed to pass, so you don't need that little
你传入的参数多半包含了，所以不需要

724
00:36:20,947 --> 00:36:24,916
thing. By the way underbar, we almost never use that for
补充说明。下划线一般最多只用在第一个参数的标签

725
00:36:24,985 --> 00:36:27,018
the second, third, or fourth argument.
不会用在第二个，第三个，第四个等等

726
00:36:27,087 --> 00:36:29,588
It's occasionally used for the first argument, not always,
第一个会用，但也不是都会用

727
00:36:29,657 --> 00:36:32,190
occasionally. But never for second, third, fourth, fifth,
第一个偶尔会，但绝对不会用为之后参数的标签

728
00:36:32,258 --> 00:36:36,194
okay? Or next to never. Now in your reading assignment,
出现的概率很小很小。你们的阅读作业是

729
00:36:36,262 --> 00:36:39,631
I'm also going to have you read a document that explains
阅读 Swift API Design Guidelines

730
00:36:39,700 --> 00:36:42,334
how to do this naming. What the rules are,
如何命名，有哪些规则

731
00:36:42,403 --> 00:36:43,535
when do you use an underbar,
什么时候用下划线


732
00:36:43,604 --> 00:36:46,605
when don't you. You're gonna wanna master that document by
什么时候不用。如果你想成为专业的 iOS 开发者

733
00:36:46,673 --> 00:36:48,273
the end of the quarter if you wanna call yourself
你最好在这学期结束前

734
00:36:48,342 --> 00:36:51,276
a professional iOS developer, okay?
掌握并熟练运用这个文档中的规则

735
00:36:51,345 --> 00:36:55,780
It's key to understand that. But this touchDigit, okay, so
非常重要。针对 touchDigit

736
00:36:55,849 --> 00:36:59,617
this function, okay methods, I, just to be clear, methods,
这个函数，好吧，这个方法，准确的说叫方法

737
00:36:59,686 --> 00:37:02,220
we use the keyword func. Okay, cuz it's
虽然我们用的关键字是 func[tion]，函数

738
00:37:02,289 --> 00:37:05,123
a function on a class. This is the name. Parameters go
方法是在类里的函数。这是方法的名字

739
00:37:05,192 --> 00:37:07,692
in parentheses like this, they can be separated by commas if
参数像这样放到小括号里，如果有多个

740
00:37:07,761 --> 00:37:11,663
we have multiple of them. This is the first parameter here,
就用英文逗号隔开。这是第一个参数

741
00:37:11,732 --> 00:37:15,100
first and only. It's type is a UIButton because of course,
有且仅有的一个。参数类型为 UIButton 显而易见的，

742
00:37:15,169 --> 00:37:18,470
a UIButton is sending this messa-, method. Right,
是 UIButton 发起的事件

743
00:37:18,539 --> 00:37:21,940
it's invoking this method. So the sender is this UIButton.
在调用这个方法，所以是 UIButton 类型

744
00:37:22,009 --> 00:37:23,942
And sender is the internal name.
sender 是参数名称

745
00:37:24,011 --> 00:37:27,179
So that's the name we'll use inside here to access it.
方法内部称呼调用的按钮的名称

746
00:37:28,549 --> 00:37:31,215
All right? But before we start doing that, let's just
好，我们正式开始前

747
00:37:31,284 --> 00:37:33,918
have this do something simple like print out to the console.
先做点简单的，比如输出到控制台

748
00:37:33,987 --> 00:37:38,824
So I'm gonna say, print("touchDigit was called"),
print("touchDigit was called")

749
00:37:38,893 --> 00:37:41,093
okay? We're just gonna print that out on the console.
就把这个字符串打印到控制台

750
00:37:41,161 --> 00:37:42,293
Whenever someone touches a button,
当按下按钮

751
00:37:42,362 --> 00:37:43,495
it's gonna evoke this method.
就调用这个方法

752
00:37:43,564 --> 00:37:44,663
It's gonna print that on the console.
然后把这条信息打印到控制台

753
00:37:44,731 --> 00:37:45,564
So let's just do that.
就这样按 Command+R 运行看看

754
00:37:54,007 --> 00:37:58,743
All right? So there's our UI, iPhone 7. Click and touchDigit
iPhone 7 模拟器出来了，按下按钮

755
00:37:58,812 --> 00:38:01,680
appears in the console down here at the bottom, okay?
touchDigit 里这个字符串就出现在下面控制台这里了

756
00:38:01,749 --> 00:38:04,383
Now the console shares space with the debugger,
现在控制台和调试器共享空间

757
00:38:04,451 --> 00:38:07,352
this area on the left is the debugger. So you can kind of
没错，左边是调试器

758
00:38:07,421 --> 00:38:10,122
separate this space back and forth, you can also completely
你可以左右拖动这条分割线

759
00:38:10,190 --> 00:38:14,693
hide this space by using these buttons right here, okay?
或者是用右边这个按钮把它隐藏起来

760
00:38:14,762 --> 00:38:18,062
So we'll just do console only right here. Let's go back to
只显示控制台

761
00:38:18,131 --> 00:38:20,832
our simulator. And so every time we press this,
回到模拟器中，每次我按这个按钮

762
00:38:20,901 --> 00:38:22,701
we get touchDigit was called printed out again.
touchDigit 就会再被调用，然后再打印一次

763
00:38:22,770 --> 00:38:24,702
Does everyone understand what's happening here,
大家都还跟的上吧？刚刚我讲了什么

764
00:38:24,771 --> 00:38:26,538
how we've hooked up this method to the button? Really,
怎么关连 UI 和代码的，

765
00:38:26,606 --> 00:38:30,042
really straightforward. All right, now that we have that
应该都挺好理解的。

766
00:38:30,110 --> 00:38:33,612
working, we know we need more than just this one button,
证明 touchDigit 有用了，还有很多按钮需要加

767
00:38:33,680 --> 00:38:36,281
we need a whole keypad's worth of buttons. So I'm gonna,
我们需要整个数字键盘的按钮

768
00:38:36,350 --> 00:38:38,717
I want these other buttons to look exactly the same, so
我想这些按钮的形状一模一样

769
00:38:38,786 --> 00:38:42,020
I'm gonna copy and paste. So I just copied and pasted that,
所以我们复制粘贴。我复制这个，粘贴

770
00:38:42,089 --> 00:38:45,858
paste another one here. I can even select three at a time,
再来一个。选中这三个按钮

771
00:38:45,926 --> 00:38:48,594
and copy and paste, okay? Paste another one.
再复制粘贴，再粘贴

772
00:38:48,662 --> 00:38:51,730
Now notice here I'm using the blue lines to line them up
稍微注意下，我在用蓝色参考线辅助我

773
00:38:51,798 --> 00:38:55,400
okay, really nicely. Blue lines are great for
对的很整齐。这就是蓝色参考线的用法

774
00:38:55,469 --> 00:38:59,537
doing that. Okay, and now I can just rename these buttons
现在我们只需要给这些按钮改下标题

775
00:38:59,606 --> 00:39:01,974
by just double-clicking on them.
在上面双击，然后修改

776
00:39:09,983 --> 00:39:12,651
All right, so I've got an, a beautiful keypad right here.
这样整洁的数字键盘就做好了

777
00:39:12,719 --> 00:39:16,688
And what's really great is that this method is hooked up
更好的是这个方法和所有的按钮都有连接

778
00:39:16,757 --> 00:39:19,992
to all of them. Okay, that's because when you copy and
因为我们复制粘贴的时候

779
00:39:20,060 --> 00:39:23,228
paste a button, it keeps it's connections to any methods
也会保留按钮的各种连接

780
00:39:23,297 --> 00:39:26,565
that it has, okay? So that's cool. So
这挺不错的

781
00:39:26,633 --> 00:39:28,901
now all these buttons are going to send this touchDigit.
所有的这些按钮都会调用 touchDigit

782
00:39:28,969 --> 00:39:33,438
So now if I run, you'll see that if I press any of
我们现在运行，按哪一个按钮都行

783
00:39:33,507 --> 00:39:38,476
these buttons, not just our 7 button. Right, here's 7,
不仅是数字 7。我们先确认 7 还能用

784
00:39:38,545 --> 00:39:41,780
that worked, but also 5, 0, they're all calling,
很好；我再试试 5，0，也都会

785
00:39:41,849 --> 00:39:46,285
this touchDigit was called. Okay, so that's awesome.
调用 touchDigit。真不错

786
00:39:46,353 --> 00:39:49,855
But of course, we want to know which button was called,
下一步，是找出究竟是

787
00:39:49,923 --> 00:39:51,757
was sending us this message, right?
哪个按钮 send，发送了消息呢？

788
00:39:51,825 --> 00:39:54,059
And we know that because that's the argument,
我们这个参数不正好是 sender 吗？

789
00:39:54,127 --> 00:39:57,996
is the sender, okay? So let's add a local variable here.
所以我们创建一个局部变量

790
00:39:58,065 --> 00:40:00,065
So now you're seeing your local variables in Swift for
啊哈，你们又能学到用 Swift 定义变量了

791
00:40:00,134 --> 00:40:03,902
the first time. It looks like this, var digit, okay?
就像这样，var digit

792
00:40:03,971 --> 00:40:07,105
Var means this is a local variable. Digit is the name.
var 是声明变量的关键字，digit 是变量的名字

793
00:40:07,174 --> 00:40:09,741
Now if we wanted to type it, we could put a type here like
如果我们想的话，可以在这里声明变量的类型

794
00:40:09,810 --> 00:40:14,379
maybe type string. Just like we put a type of our parameter
比如字符串类型，就像声明参数类型差不多

795
00:40:14,448 --> 00:40:18,583
here, we can put a type right here of our local variable.
在变量名字后加 : String

796
00:40:18,652 --> 00:40:22,821
But, we don't usually do that in Swift because while Swift
然而我们一般不需要这样做

797
00:40:22,890 --> 00:40:26,258
is very strongly typed language, in other words,
虽然 Swift 是强类型的语言

798
00:40:26,326 --> 00:40:28,060
you have to specify the types of everything.
也就是每个变量的类型都是确定的

799
00:40:28,129 --> 00:40:29,862
It wants to know the types of everything.
Swift 想知道所有东西的类型

800
00:40:29,930 --> 00:40:34,366
it will infer what type you want from the context.
但大多数时候它都能根据上下文

801
00:40:34,435 --> 00:40:36,668
Very often. Ok? So that's the trade off,
进行类型推导。 这就是 Swift 的权衡

802
00:40:36,737 --> 00:40:39,938
if you have a really strongly typed language, you have
强类型语言，要求所有的都明确类型

803
00:40:40,007 --> 00:40:43,575
to type everything. It's really nice if the compiler
同时提供一个强大的编译器

804
00:40:43,644 --> 00:40:46,077
will just figure out for you what the types of things are.
能通过类型推导来自动判断类型

805
00:40:46,146 --> 00:40:48,847
So, normally, we will leave the types off wherever we can.
所以我们一般能省略就不写

806
00:40:48,916 --> 00:40:50,315
Now, we can't do that in
函数的参数又不同了

807
00:40:50,384 --> 00:40:54,286
a method parameter because we got to know what That method
函数和方法的参数是我们自己决定的

808
00:40:54,354 --> 00:40:57,088
is expecting. But for local variables, we definitely can
但对于局部变量

809
00:40:57,157 --> 00:41:00,993
leave it off almost all the time, okay? So we got this
大部分时候都是可以省略声明类型的

810
00:41:01,061 --> 00:41:02,828
digit, and I just wanna set it equal to something.
有了这个 digit，我想给它赋值

811
00:41:02,897 --> 00:41:03,962
What does it wanna be equal to?
但是如何获得这个 digit 呢？

812
00:41:04,031 --> 00:41:06,865
It wants to be equal to the title of the button
digit 等于引发事件

813
00:41:06,934 --> 00:41:09,301
that's sending me the message. So this guy,
按钮的标题。而 sender

814
00:41:09,369 --> 00:41:12,037
which is a button I want to ask what its title is.
正是这个按钮

815
00:41:12,106 --> 00:41:15,473
Now, how do you send a message to another object in Swift?
Swift 中如何发送消息给对象呢？

816
00:41:15,542 --> 00:41:17,776
Well, you just type the object you want to
你输入那个对象的名称

817
00:41:17,844 --> 00:41:20,545
send the message to and you press dot. Okay, so this is
然后使用点语法，按下英文句号 .

818
00:41:20,614 --> 00:41:23,949
like Java and a lot of other languages, just the object and
这和 Java 以及其它许多编程语言类似

819
00:41:24,017 --> 00:41:27,218
dot, that's how you send the message. Now, unfortunately,
对象.，就是这样发送消息。虽然 Xcode 有自动补全

820
00:41:27,287 --> 00:41:31,156
Xcode is helping me here by showing me all the methods And
然而不幸的是，它把所有按钮的

821
00:41:31,225 --> 00:41:35,660
properties that button can do. Look at this list,
属性和方法都列举了出来。看看这一长串

822
00:41:35,729 --> 00:41:37,795
I'm only in the Fs, okay, I'm still scrolling,
我才滑倒 F 开头的，下面还有

823
00:41:37,864 --> 00:41:42,333
still scrolling. There's a lot of methods. It's like how am I
这么多函数和属性

824
00:41:42,402 --> 00:41:45,103
ever gonna figure out. I just want the title of the button,
我能怎么办？我明明只是想要按钮的标题啊

825
00:41:45,172 --> 00:41:47,705
please. Okay, well, of course I could get the documentation,
当然，我也许可以找到文档

826
00:41:47,774 --> 00:41:48,573
start reading through it,
开始挨个看

827
00:41:48,642 --> 00:41:49,340
trying to figure out, and
看是哪个函数还是属性

828
00:41:49,409 --> 00:41:51,476
in fact I want to do that eventually.
我确实会这么做

829
00:41:51,545 --> 00:41:53,445
there's kind of trick here in Xcode.
不过是靠一个使用 Xcode 的技巧

830
00:41:53,514 --> 00:41:55,881
Which is, just type the name of thing you want,
那就是输入你想要的东西的名称

831
00:41:55,950 --> 00:41:57,816
Type what you think it might be and see what happens.
输入你觉得最可能的名称看看

832
00:41:57,885 --> 00:42:00,618
So, I'm going to type Title. Now there's no method or
我会输入 title，虽然我知道按钮这个类

833
00:42:00,687 --> 00:42:02,787
property in button called title.
并没有叫做 title 的方法或属性

834
00:42:02,856 --> 00:42:05,891
But you can see that Xcode has showed me all the methods and
但是 Xcode 会筛选出一些方法和属性

835
00:42:05,959 --> 00:42:08,326
properties that start with the word title Or
要么是由 title 开头的

836
00:42:08,395 --> 00:42:13,398
that have the word title in it. Or even that have "t",
要么是名称中包含 title 的

837
00:42:13,467 --> 00:42:16,902
"it", "le" in it, okay? So it's doing everything it
甚至还有包含 t，it 和 le 的

838
00:42:16,971 --> 00:42:19,637
can to show you every possible thing that might match what
展示出所有可能搭配上你输入内容的来

839
00:42:19,706 --> 00:42:22,340
you typed. Now, let's look through these and see if we
现在我们再来选择

840
00:42:22,409 --> 00:42:24,575
can find one that will give us the title of the button, okay?
看看有没有能给我们标题的

841
00:42:24,644 --> 00:42:29,448
Title label That doesn't look very good. How about title for
titleLabel，展示标题的标签，好像并不是我们想要的

842
00:42:29,517 --> 00:42:30,715
control state, that looks good,
那 title(for: UIControlState) 呢？

843
00:42:30,784 --> 00:42:33,685
returns the title associated with the specified state.
好像不错，返回和按钮在给出状态下的标题

844
00:42:33,754 --> 00:42:36,255
Mm, that looks pretty good but let's keep looking because I
虽然看起来不错

845
00:42:36,323 --> 00:42:37,589
don't really know anything about the state,
但我对这个状态一无所知

846
00:42:37,658 --> 00:42:39,991
that looks pretty good, but let's keep going.
我们再看看有没有更好的

847
00:42:40,060 --> 00:42:44,696
No edge insets, no, add color, no, shadow, no. Current title,
不是留边，不是颜色，不是阴影。currentTitle

848
00:42:44,764 --> 00:42:45,664
the current title that
当前按钮

849
00:42:45,733 --> 00:42:47,433
is displayed on the button,
显示的标题

850
00:42:47,501 --> 00:42:50,202
victory that sounded exactly what I want. So
就决定是你了

851
00:42:50,270 --> 00:42:52,171
I'm just gonna pick that by double-clicking on it.
我决定就选这个，在上面双击

852
00:42:52,239 --> 00:42:54,172
So I'm just gonna double-click on it. There it is,
双击之后就出现了

853
00:42:54,241 --> 00:42:58,476
it filled it out. And so now we're sending currentTitle
Xcode 帮我输入了。这样我们就得到了 sender

854
00:42:58,545 --> 00:43:01,813
to sender. Now let's find out more about currentTitle, okay?
的 currentTitle。我们再仔细了解下 currentTitle

855
00:43:01,882 --> 00:43:04,649
We know that one-liner that is the current title displayed.
我们知道简介说的是现在显示的标题

856
00:43:04,718 --> 00:43:06,150
I'm gonna hold down Option.
按下 Option 键

857
00:43:06,219 --> 00:43:07,619
See Option down here on the left, okay?
我屏幕左下角显示我按下了 Option 键

858
00:43:07,688 --> 00:43:09,788
I'm gonna hold down Option, and look.
按住 Option 键的同时

859
00:43:09,857 --> 00:43:13,858
When I do Option things that I mouse over turn blue
把鼠标悬浮在这些名称上时

860
00:43:13,927 --> 00:43:15,293
with a little dashed underline.
会变蓝，还有下划线

861
00:43:15,362 --> 00:43:19,831
And if I click, I get a little help, okay? So
我点下去，就会弹出快速帮助

862
00:43:19,900 --> 00:43:21,967
I'm getting that current title display from the button,
除了说这是当前按钮展示的标题

863
00:43:22,035 --> 00:43:25,137
but I'm also getting more detailed description and
还有更详细的解释

864
00:43:25,206 --> 00:43:28,172
I'm getting the declaration of this thing. And
以及它的定义

865
00:43:28,241 --> 00:43:30,508
you could see that this is not a func.
你会发现这不是一个 func，方法

866
00:43:30,577 --> 00:43:33,912
This is a var. So now you're seeing for the first time,
这是一个 var，属性。你们第一次看到

867
00:43:33,980 --> 00:43:36,981
the declaration of a property in Swift, okay?
Swift 中属性的定义吧？

868
00:43:37,050 --> 00:43:39,952
An instance variable. So this is an instance variable,
这就是个实例变量

869
00:43:40,020 --> 00:43:42,620
in UIButton, okay? Called var, makes sense, right?
UIButton 类的一个实例变量

870
00:43:42,689 --> 00:43:45,123
It's a variable, var. It's called currentTitle,
用 var 关键字声明，叫做 currentTitle 的变量

871
00:43:45,192 --> 00:43:49,194
of course. It's type is, string?
类型是 String? 

872
00:43:51,565 --> 00:43:54,032
Not sure, maybe button's not sure what the type is.
难道按钮不确定类型是不是字符串？

873
00:43:54,101 --> 00:43:55,267
No, I think button knows but,
我认为按钮是知道的

874
00:43:55,336 --> 00:43:57,870
we're just gonna assume this is string, for now. And
我们暂时当是字符串好了

875
00:43:57,938 --> 00:44:00,772
we'll see, where that takes us. Also notice this little
看看会给我们带来什么麻烦。注意这里的

876
00:44:00,841 --> 00:44:03,842
syntax means that, you can only get the current title,
不起眼的语法，告诉你 currentTitle 是只读的

877
00:44:03,911 --> 00:44:07,613
with this property. You can't set the current title. Now,
你并不能通过这个来更改 currentTitle

878
00:44:07,681 --> 00:44:11,016
what if I was like, well I'm interested. How would I set
如果我就想要更改按钮的标题呢？

879
00:44:11,085 --> 00:44:13,618
the current title? So you would want to, let's say,
如何设置当前的标题？

880
00:44:13,687 --> 00:44:16,521
go look in the documentation. How would you get there?
你会想要查文档。文档在哪里？

881
00:44:16,590 --> 00:44:18,556
Well, if you look down at the bottom, it says more.
这下面有个 More

882
00:44:18,625 --> 00:44:21,159
This property reference right here. If you click on that,
点这个 Property Reference

883
00:44:21,228 --> 00:44:23,929
it brings up the documentation. Okay?
文档就出现了

884
00:44:23,997 --> 00:44:26,765
And here's the documentation for currentTitle. Now what's
currentTitle 的文档

885
00:44:26,834 --> 00:44:30,034
cool about this, is from here, I can click on things.
有趣的是，我可以点击许多的东西

886
00:44:30,103 --> 00:44:32,971
Like String, I could find out about String. Or, look,
比如 String，了解字符串类

887
00:44:33,040 --> 00:44:36,608
I can click on the class that this is defined in, UIButton.
我可以点击定义这个属性的类，UIButton

888
00:44:36,677 --> 00:44:39,411
And here's the UIButton, and look at this section at
这就是 UIButton 的文档

889
00:44:39,479 --> 00:44:43,182
the start of UIButton called Overview. These are awesome,
文档开始这个部分，Overview，概览很有用

890
00:44:43,250 --> 00:44:46,851
and I strongly recommend every class you go to use
我建议每个用到的类

891
00:44:46,920 --> 00:44:48,453
take the five minutes or
都花个五分钟，最多是十分钟

892
00:44:48,521 --> 00:44:51,022
ten minutes at the most to read through these overviews.
认真阅读它的概览

893
00:44:51,091 --> 00:44:53,458
Then you'll really understand how these classes work.
然后你就能理解怎么使用这些类了

894
00:44:53,527 --> 00:44:55,860
Look at this thing. It tells us for
比如这个，给我举例说明

895
00:44:55,929 --> 00:44:58,530
example how to configure the button's appearance.
如何设置按钮的外观

896
00:44:58,599 --> 00:45:00,131
It tells us all about this button's stage.
这个告诉我们按钮的状态

897
00:45:00,200 --> 00:45:01,733
Remember, we had that title for state.
之前看到的 button(for: UIControlState)

898
00:45:01,802 --> 00:45:03,302
And we didn't really know what the state was. Well,
我们不清楚按钮的状态是什么

899
00:45:03,370 --> 00:45:05,904
this tells us about that. Tells you about the content of
这里就给出了解释。这个讲按钮的内容

900
00:45:05,973 --> 00:45:08,640
a button. And you can put an image on there, evidently, and
看来你可以放图片和文字

901
00:45:08,709 --> 00:45:12,543
text. Those edge insets, whatever those are, explained.
留边的解释

902
00:45:12,612 --> 00:45:15,180
Even an interface builder, all those things in the inspector.
甚至还包括界面编辑器，在检查器中出现的

903
00:45:15,249 --> 00:45:17,249
Look, those are all explained, in detail.
这些都详细地解释了

904
00:45:17,317 --> 00:45:19,651
So this is a great thing to just read through this,
阅读这个受益匪浅

905
00:45:19,720 --> 00:45:22,787
understand this for all the common classes. And
最好把常用类的概览都理解了

906
00:45:22,856 --> 00:45:26,090
of course, all of the methods are listed here as well. For
当然，所有能用的方法也列出来了

907
00:45:26,159 --> 00:45:26,925
example, look at this one,
比如看看这个

908
00:45:26,993 --> 00:45:29,995
setTitle. Hm, that might be a way to set the title. And
setTitle，也许可以用来设置标题

909
00:45:30,064 --> 00:45:33,532
if I click on that, I get a full description of this. And
如果我点击这个，就会转到更详细的解释

910
00:45:33,600 --> 00:45:36,668
I even see that the state thing is here, so I can click
这里还有那个 UIControlState

911
00:45:36,736 --> 00:45:39,771
on that. And now I can see the control state, of course,
我点击之后就到了 UIControlState 的文档

912
00:45:39,840 --> 00:45:41,973
there's normal, highlighted button, disabled button,
这里有 正常，高亮，禁用和选中

913
00:45:42,042 --> 00:45:44,275
a selected button. They can each have their own title,
不同的状态可以有不同的标题

914
00:45:44,344 --> 00:45:47,779
cool. But you see how I'm navigating by just clicking
学会我是怎么通过点击来浏览

915
00:45:47,848 --> 00:45:49,614
through the various types and
这些不同的类型的了？

916
00:45:49,683 --> 00:45:53,017
all that you really want to get faster with doing that
你最好尽快掌握

917
00:45:53,086 --> 00:45:55,954
okay it's really important to be a good iOS developer to be
成为好的 iOS 开发者

918
00:45:56,022 --> 00:46:00,325
able to use the documentation effectively. All right, so
高效地使用文档是不可获取的技能

919
00:46:00,394 --> 00:46:04,262
we're back here, we got this thing currentTitle. It's this
好，回到 currentTitle

920
00:46:04,331 --> 00:46:07,265
type string question mark. And I told you that swift would
它的类型是 String?。我说过 Swift

921
00:46:07,334 --> 00:46:10,101
infer the type. And sure enough, look, a digit. It's
能推测类型。那好吧，这是个数字

922
00:46:10,170 --> 00:46:12,770
type is string question mark. Of course, because I just set
类型也是 String?，因为我把一个

923
00:46:12,839 --> 00:46:14,606
it equal to something that was string question mark, so
String? 类型的值符给了它

924
00:46:14,675 --> 00:46:17,476
it knows it's string question mark. So, let's go ahead and
所以 digit 也是 String? 类型的

925
00:46:17,545 --> 00:46:18,944
print this digit out. Okay,
我把这个 digit 打印出来

926
00:46:19,013 --> 00:46:21,513
it's saying touch digit was called. Let's try and print it
把这个 touch digit was called 改成 digit

927
00:46:21,582 --> 00:46:24,883
out. Now in another language, you might use printf.
在其它语言中你可能用 printf

928
00:46:24,952 --> 00:46:30,022
And you might say something like %s was touched.
然后写 "%s was touched"

929
00:46:30,091 --> 00:46:31,856
And then you would put digit right here,
最后把 digit 写着这里

930
00:46:31,925 --> 00:46:36,160
okay? Now unfortunately, you can't do this in Swift, okay?
然而，Swift 里并不是这样操作的

931
00:46:36,229 --> 00:46:39,931
There's no percent s business, okay? And no printf. Instead,
不需要使用 %s 那些，当然也没有 printf

932
00:46:40,000 --> 00:46:43,701
we still say print, okay? But, instead of doing percent s.
我们用 print 就够了。取代 %s 的是

933
00:46:43,770 --> 00:46:48,840
We can actually use the very magical \() parentheses.
神奇的 \()

934
00:46:48,909 --> 00:46:50,842
If you put that inside a string,
如果放在在字符串中

935
00:46:50,910 --> 00:46:53,778
then you can put anything you want inside there that can
括号之间可以放任何

936
00:46:53,847 --> 00:46:55,947
be converted to a string. And
能用字符串表示的内容

937
00:46:56,016 --> 00:46:57,682
it will include it there. Including,
并且插入到字符串中间

938
00:46:57,751 --> 00:47:00,886
a string itself. Can obviously be converted to a string. So
字符串本身当然能用字符串表示

939
00:47:00,954 --> 00:47:03,521
this way, you can embed strings in other strings.
这就是在字符串中插入字符串的方法

940
00:47:03,590 --> 00:47:06,190
Or even embed more complicated objects that know how to turn
我们也能在字符串中插入更复杂的对象

941
00:47:06,259 --> 00:47:09,194
themselves into a string, into strings. Okay, so this is how
只要它们知道怎么用字符串表示它们本身

942
00:47:09,263 --> 00:47:13,331
you do the printf business of printing things out. Okay,
这就是取代 printf 的方法

943
00:47:13,400 --> 00:47:17,702
now also I notice, we have a warning. This yellow thing is
但注意到这里有个警告，这个黄色的

944
00:47:17,771 --> 00:47:20,438
a warning, okay? And they can be yellow which are warnings
可以黄色的，只是警告

945
00:47:20,507 --> 00:47:23,041
in which case it'll compile and run. But, you still got to
可以编译，可以运行。但你不能不改

946
00:47:23,110 --> 00:47:25,310
fix it cuz you cannot submit any homework in this class
这节课交的作业不能有警告

947
00:47:25,379 --> 00:47:28,647
with warnings. You hear me? Or they can be red.
清楚了吗？更不能有红色的

948
00:47:28,715 --> 00:47:31,917
In red's case, it won't even build. So this one's yellow.
那就是有错误，连编译都不行。这里还只是警告

949
00:47:31,985 --> 00:47:35,320
How do we find out what it is? Well, we just click on it.
怎么才知道是什么原因呢？点击一下

950
00:47:35,389 --> 00:47:38,390
When we click on it, it says here the variable digit
点了之后说 Variable 'digit' was never mutated

951
00:47:38,459 --> 00:47:41,359
was never mutated. Means it was never changed.
意思是变量 digit 没有被更改过

952
00:47:41,428 --> 00:47:45,597
Consider changing to let constant, it says. Okay? And
consider changing to 'let' constant，建议改用常量

953
00:47:45,666 --> 00:47:48,166
you can see it even saying do you want me to fix it? I can
它甚至还问是否想要解决这个问题？

954
00:47:48,235 --> 00:47:50,736
replace var with let and it's even showing what that would
说我能帮你把 var 改成 let，还给出了预览

955
00:47:50,804 --> 00:47:53,905
look like to replace var with let. How helpful of it. So
把 var 替换成 let。多省心！

956
00:47:53,974 --> 00:47:55,874
actually, I'm gonna have to do that. I'm gonna click,
那就让它改吧。点击确认

957
00:47:55,943 --> 00:47:59,143
change it to let, warning gone. Now what is all that
改成了 let，警告也没了。不过为啥要这样做？

958
00:47:59,212 --> 00:48:04,215
about? It said digit was never mutated, it was never changed,
既然 digit 没有被修改过

959
00:48:04,284 --> 00:48:08,353
okay? So digit essentially was a constant.
那它就是个常量

960
00:48:08,421 --> 00:48:11,089
We gave it an initial value. It never got changed.
除了我们给它的初始值以外就没变过

961
00:48:11,157 --> 00:48:14,359
When you declare a constant you always want to use let.
定义常量使用 let 关键字

962
00:48:14,428 --> 00:48:17,462
Now why do we have a different word for a constant than for
为什么常量和变量的名称不同呢？

963
00:48:17,531 --> 00:48:21,133
a var? Well, because a constant isn't var.
因为常量不仅是变量

964
00:48:21,202 --> 00:48:24,603
It doesn't vary, a constant is constant.
它不会改变，常量就是常量

965
00:48:24,672 --> 00:48:28,273
And let is a great word because read this. Let digit
let 这个关键字选的很好。连起来读很通顺

966
00:48:28,342 --> 00:48:32,277
equal sender's current title. Okay, reads really nice.
让 digit 等于调用函数的按钮现在的标题

967
00:48:32,345 --> 00:48:35,914
Now why do we care about distinguishing these two?
区分常量和变量的原因归根到底是为什么？

968
00:48:35,982 --> 00:48:39,450
Two reasons. One if you're a reader of someone's code and
两个原因。如果你读其它人的代码

969
00:48:39,519 --> 00:48:42,554
you see let you know that this is not going to change, okay.
看到 let 就知道这是个常量

970
00:48:42,623 --> 00:48:44,822
You know the digit is going to be, never going to change.
知道这个 digit 一定不会变

971
00:48:44,891 --> 00:48:46,525
And in fact if someone did change it or
即使有人修改了

972
00:48:46,593 --> 00:48:49,527
if you tried to change someone else's code and change it,
或者你尝试修改别人代码里的常量

973
00:48:49,596 --> 00:48:52,330
compiler's gonna generate an error, okay. You can't change
编译器就会报错，说你不能修改

974
00:48:52,399 --> 00:48:55,534
something that's constant. But even more importantly,
那是个常量。第二个更重要的原因是

975
00:48:55,603 --> 00:48:58,203
it tells Swift that it's a constant and
它告诉 Swift 这是个常量

976
00:48:58,271 --> 00:49:01,272
that you intend it to be a constant. And so later,
你希望这是个常量。之后

977
00:49:01,341 --> 00:49:05,209
if you try to modify it, even if it's an array or
如果你尝试修改它，对于数组和字典也是

978
00:49:05,278 --> 00:49:08,213
a dictionary and you're trying to put something in the array
如果你尝试向数组添加一个项

979
00:49:08,282 --> 00:49:10,715
Okay? Or add something to the dictionary.
或是给字典添加一对键值

980
00:49:10,784 --> 00:49:13,251
It knows, you intended that to be a constant. So,
Swift 知道你希望那是个常量

981
00:49:13,320 --> 00:49:17,656
you know, error. So it's a way to tell Swift what you intend.
于是会告诉你出错了。所以 let 是为了告诉 Swift 你的意图。

982
00:49:17,724 --> 00:49:21,093
Now, the difference between a mutable array,
数组分两种，可变和不可变

983
00:49:21,162 --> 00:49:22,961
an array that you can add stuff to, and
你可以向可变的数组添加项

984
00:49:23,029 --> 00:49:26,464
an immutable one, is huge. Because if you pa, arrays and
数组占的空间很大。Swift 中

985
00:49:26,533 --> 00:49:30,869
Swift are passed around by copy. Arrays are passed by
数组是通过拷贝来实现值传递，

986
00:49:30,938 --> 00:49:33,438
copy. It's very unusual compared to other languages
传递数组就是复制数组的过程

987
00:49:33,507 --> 00:49:35,306
where an array would just be an object in the heap and
而不是像其它的语言那样

988
00:49:35,375 --> 00:49:37,676
you just pass a pointer to it. You were passing them it
只是传递一个指向数组的指针

989
00:49:37,744 --> 00:49:40,244
copies them every time you pass them to a function.
Swift 中每次把数组传递到函数都会要求复制

990
00:49:40,313 --> 00:49:44,583
Now that'd be very inefficient if they were all mutable. Cuz
如果这些数组都是可变的，那会非常低效

991
00:49:44,652 --> 00:49:46,718
you have to actually copy them in case someone changed it.
因为一旦发生更改，就必须要实际拷贝

992
00:49:46,786 --> 00:49:48,853
But Swift knows which ones are mutable and which aren't.
Swift 知道数组是否可变

993
00:49:48,922 --> 00:49:51,623
And when you pass an immutable one it only- But
如果你传入的是一个只读数组

994
00:49:51,692 --> 00:49:53,225
doesn't really efficient copy, okay,
Swift 会采取更高效的方法

995
00:49:53,293 --> 00:49:55,794
it doesn't actually copy the element. And in fact, until
并不会真的拷贝数组里的项

996
00:49:55,863 --> 00:49:59,163
you assigned it to a mutable variable by saying var equals
直到你把这个数组赋值给一个变量之前

997
00:49:59,232 --> 00:50:01,766
that, it doesn't even have to worry about that. And then it
Swift 都不需要考虑拷贝的问题

998
00:50:01,835 --> 00:50:04,703
can just do copy on write when you actually change it. Okay,
而且就算拷贝也会采取写时拷贝（copy on write）的机制

999
00:50:04,771 --> 00:50:07,639
so that's the var/let thing, get used to it,
你们要习惯区别使用 var 和 let

1000
00:50:07,708 --> 00:50:10,441
always do let for constants. All right, so let's run
常量一定要用 let。好，我们现在运行

1001
00:50:10,510 --> 00:50:14,012
this now. See what's going on here. This should work, right?
看看什么情况，希望能够运行

1002
00:50:14,080 --> 00:50:16,648
We're getting the current title. We're saying, it,
我们获得了按钮当前的标题，然后打印

1003
00:50:16,717 --> 00:50:19,084
well, whatever that title was was touched.
某某按钮被按下了

1004
00:50:19,152 --> 00:50:23,454
This should be good to go. Here we go. Seven. What?
应该没问题。我试试，按下 7。怎么回事？

1005
00:50:23,523 --> 00:50:27,692
Okay, well, it's kinda working.
好吧，算是能用

1006
00:50:27,761 --> 00:50:29,695
I mean it's definitely doing something different And
每个按钮按下去打印的内容都不一样

1007
00:50:29,764 --> 00:50:30,763
it kinda knows which button.
而且我们也算是出现了相应的标题

1008
00:50:30,831 --> 00:50:33,732
But what's all this optional quote business?
但是为什么会有 Optional("") 呢？

1009
00:50:33,801 --> 00:50:38,504
What's that about? >> Well, that's because
这是什么造成的？

1010
00:50:38,572 --> 00:50:43,675
digit is not a string, it's a string?, okay.
这是因为 digit 不是字符串，是 String?

1011
00:50:43,744 --> 00:50:47,946
So what is String? String? is a totally different type
那什么是 String? 呢？String? 和普通字符串

1012
00:50:48,014 --> 00:50:52,951
from String. It's called an optional. Alright? This
根本不一样。它的类型叫做可选（Optional）

1013
00:50:53,019 --> 00:50:55,987
is super important. So again, wake up if you're napping.
这是重点，睡觉的同学可以起来看看了

1014
00:50:56,056 --> 00:50:59,958
Okay? This is super important. Very few languages have this
很重要很重要很重要。很少有编程语言

1015
00:51:00,027 --> 00:51:04,195
concept. It's a great concept. It really makes the API really
有这个概念。这是个很不错的概念。这让整个

1016
00:51:04,264 --> 00:51:06,931
understandable throughout all of iOS. But it takes a little
iOS API 通俗易懂，但是要求

1017
00:51:07,000 --> 00:51:10,869
bit of getting used to, okay? So what is this type optional?
你要适应它。那可选类型是什么？

1018
00:51:10,937 --> 00:51:15,340
A type optional has only two values, set and
可选类型的值只有两种情况 —— 有值，或缺省值

1019
00:51:15,408 --> 00:51:18,810
not set, okay? That's the only two values it has.
只会有这两种情况

1020
00:51:18,879 --> 00:51:22,681
There's no other values. However, when it's in the set
不可能是其它的值。当可选类型的为有值的时候

1021
00:51:22,749 --> 00:51:26,518
case, it can have an associated value. Okay?
它会有一个关联值

1022
00:51:26,586 --> 00:51:29,521
A value that it kinda keeps on the side and
另一个和这个可选一起存储的值

1023
00:51:29,590 --> 00:51:31,857
you specify when you create the optional or
你需要在定义可选类型的时候

1024
00:51:31,925 --> 00:51:34,826
you declare it what type that associated value is.
声明关联值的类型

1025
00:51:34,895 --> 00:51:37,896
So this, the associated value is a string.
我们这里，关联值的类型就是字符串

1026
00:51:37,964 --> 00:51:40,832
We're talking about the title of a button, of course. So
当然了，我说的是按钮的标题

1027
00:51:40,900 --> 00:51:42,167
we would say the type
我们把这个 digit 的类型

1028
00:51:42,236 --> 00:51:45,771
of this digit is optional String. Which means
叫做 Optional String，可选字符串

1029
00:51:45,839 --> 00:51:48,773
an optional who's associative value in the set state is
一个在有值状态下关联值为字符串的可选类型

1030
00:51:48,842 --> 00:51:54,312
a string. Okay? Now, in this case that's all fine and
我们现在的情况是一定会有值

1031
00:51:54,381 --> 00:51:56,648
good but we want the associated value here.
但我只想要这个关联值

1032
00:51:56,717 --> 00:51:59,551
Give me that associated value, that title, okay?
我只要那个标题就可以了

1033
00:51:59,620 --> 00:52:01,619
How do I get it out of here? And the answer for
怎么才能解析出这个值呢？最简单的方法

1034
00:52:01,688 --> 00:52:06,191
that is exclamation point. Okay, if you put
后面加一个英文叹号 !

1035
00:52:06,260 --> 00:52:09,327
the explanation point at the end of an optional then it
如果你在可选类型的后面加上叹号

1036
00:52:09,396 --> 00:52:12,730
will, if it's in the set state, grab the associated value and
在可选类型有值的情况下，隐式解析出关联值

1037
00:52:12,799 --> 00:52:16,301
give it to you. So now look at the type of digit.
然后返还给你。我们再看看 digit 的类型

1038
00:52:16,370 --> 00:52:20,104
It's a string. Okay, Swift is able to infer that since you
太好了，只是普通的字符串了。Swift 如此推测的原因是

1039
00:52:20,173 --> 00:52:25,944
unwrapped this optional right here. You've got a string over
你已经把可选类型强制解包了，所以你会得到一个字符串

1040
00:52:26,013 --> 00:52:31,850
here. Now what if you do exclamation point and
但是如果你在可选类型的后面加了一个叹号

1041
00:52:31,919 --> 00:52:35,320
that optional is in the not set state? Because
但是这个可选类型却缺省值呢？

1042
00:52:35,389 --> 00:52:37,856
there's no associated value when it's in not state, that's
因为在缺省值的时候是没有关连值的

1043
00:52:37,924 --> 00:52:39,958
only when it's in associated. What happens to your app?
只有在有值的时候才存在关联值。强制解包会发生什么呢？

1044
00:52:40,026 --> 00:52:45,797
Anyone want to guess what happens? Crashes. Okay?
猜猜会发生什么？你的程序会崩溃

1045
00:52:45,866 --> 00:52:50,702
Kaboom. Now, I'm sure some of you conservative
你的程序就炸了。我知道你们之中肯定有些保守派的

1046
00:52:50,771 --> 00:52:52,470
folk out there are like, okay well that's it for
现在在想，好吧我受够了

1047
00:52:52,539 --> 00:52:54,806
me, an exclamation point! I'm never using that.
我绝对不会用感叹号的

1048
00:52:54,875 --> 00:52:57,042
I don't want my app to crash, that's horrible.
人家才不想让程序崩溃呢，吓死宝宝了

1049
00:52:57,111 --> 00:53:00,312
But actually having your app crash during development
但其实在开发过程的时候程序就崩溃了是好事

1050
00:53:00,381 --> 00:53:03,081
can be great, because you'll find bugs really
因为你能够尽早发现 bug

1051
00:53:03,149 --> 00:53:05,784
fast and you'll be dropped right into the debugger
然后你会被马上带到调试界面

1052
00:53:05,853 --> 00:53:07,652
where the crash happened so you can figure whats going on.
告诉你哪里导致了崩溃，让你能理清楚

1053
00:53:07,721 --> 00:53:09,454
How could this have happened?
到底是怎么崩溃的

1054
00:53:09,522 --> 00:53:12,224
So in this case were talking about the title of a button,
如果我们这个情况下会缺省值

1055
00:53:12,293 --> 00:53:14,393
that means the title of the button was never set and
那就是这个按钮并没有标题

1056
00:53:14,461 --> 00:53:17,462
this is touch digit. That should never have happen. Okay
这个函数是我们按了数字，按钮没有标题不应该发生

1057
00:53:17,530 --> 00:53:20,098
if that happened in something I shipped to my customer,
如果按钮没有标题软件就卖给了客户

1058
00:53:20,167 --> 00:53:22,033
customers would be complaining left, right and center.
客户一定会彻头彻尾地批评这个软件

1059
00:53:22,102 --> 00:53:24,302
There's a button that has no title on it,
这里有个按钮，标题上什么也没写

1060
00:53:24,371 --> 00:53:25,737
nothing on it and I click what,
点下去之后就崩溃

1061
00:53:25,806 --> 00:53:27,072
you know what I'm saying?
懂我是什么意思了吗？

1062
00:53:27,141 --> 00:53:28,574
So, you want to find those in development.
所以你希望在开发阶段就能发现这些问题

1063
00:53:28,642 --> 00:53:30,642
So crashing can be good sometimes.
所以崩溃有的时候是好事情

1064
00:53:30,711 --> 00:53:33,444
Now of course you don't always want to crash when you unwrap
当然你并应该每次解包可选类型的时候都导致崩溃

1065
00:53:33,513 --> 00:53:36,215
an optional and I'll show you in a little bit how to unwrap
我还会再讲讲如何解包

1066
00:53:36,283 --> 00:53:39,084
an optional and get it to associated value. But test it
获取可选类型的关联值

1067
00:53:39,152 --> 00:53:42,654
first to make sure that it's in the set state. Okay, but
正常情况下都应该确认可选类型是否有值

1068
00:53:42,723 --> 00:53:44,789
for now we do this. Let's run and see what this looks like.
暂时我们先这样吧，先运行代码看看现在是什么情况

1069
00:53:44,858 --> 00:53:47,793
It should work. Now we've unwrapped this thing,
应该没有问题了，我们已经解包了这个可选变量

1070
00:53:47,862 --> 00:53:48,893
grabbed its associate value.
得到了关联值

1071
00:53:48,962 --> 00:53:51,663
And we know the current title should always be set so
而且我们知道按钮的标题是一定存在的

1072
00:53:51,732 --> 00:53:53,798
we'll not have to worry about crashing here. And
应该不用担心会崩溃

1073
00:53:53,867 --> 00:53:56,868
sure enough seven was touched, nine, whatever, three,
好，7 was touched，9，6，3

1074
00:53:56,937 --> 00:54:00,705
five, six, okay? All right, so we're rocking and
5，6 被按下了。那我们很了不起哦

1075
00:54:00,774 --> 00:54:04,710
rolling here. We're able to collect the digits from user.
我们能够成功地接收用户按下按钮上的数字

1076
00:54:04,779 --> 00:54:07,546
Now let's put them in the calculator display.
现在我们把这些数字展示出来

1077
00:54:07,615 --> 00:54:09,581
So we need to add a display to our calculator.
所以我们要给我们的计算器加一个显示屏

1078
00:54:09,650 --> 00:54:12,083
So we're gonna go back to our area here.
先调出工具区

1079
00:54:12,152 --> 00:54:15,186
Go down to the bottom half. Now be careful not to grab
把下半部分的对象库拽出来。注意我们要使用的

1080
00:54:15,255 --> 00:54:17,856
text field here because that's editable text and
不是这里的这个 Text Field。那是用来输入文字的

1081
00:54:17,924 --> 00:54:20,025
in a calculator you can't click on the display and
正常的计算器是不应该

1082
00:54:20,093 --> 00:54:22,728
edit it. You type the numbers to put your numbers in. So
让你点击显示屏修改结果的。你应该按数字按钮

1083
00:54:22,796 --> 00:54:25,164
we're gonna use this one up here, which is label.
正确的选择是使用上面这个，Label

1084
00:54:25,232 --> 00:54:27,065
By the way, if you click on one of these and
顺便提一句，如果你点击这些对象中的其中一个

1085
00:54:27,134 --> 00:54:28,199
leave your mouse there for a second,
然后把鼠标就停留在那里

1086
00:54:28,268 --> 00:54:30,903
it'll give you a detailed explanation of each of these
Xcode 会详细地解释

1087
00:54:30,971 --> 00:54:34,473
objects in the list. So I'm just gonna pick out a label
任何一个在列表中的对象。我按住这个 Label

1088
00:54:34,542 --> 00:54:35,740
and drag it up here to top,
然后拖过来放在最上面

1089
00:54:35,809 --> 00:54:39,844
maybe make a little more space for it. Move out a little bit.
稍微多给它留点空间，把这些挪下来些

1090
00:54:39,913 --> 00:54:42,714
So we've got this label. Once again just like I did for
我们已经添加了这个标签，还是像之前一样

1091
00:54:42,783 --> 00:54:45,049
the buttons I'm going to change the size.
像更改按钮一样更改标签的大小

1092
00:54:45,118 --> 00:54:48,086
Maybe I want to start with zero in there. Bigger font.
把标签显示的文字改成 0，调大字号

1093
00:54:48,155 --> 00:54:51,689
Let's go over here maybe even really big font, like 40 or
还是点这个按钮，设置一个很大的字号，比如 40

1094
00:54:51,758 --> 00:54:55,927
something like that. In a calculator the text is right
在计算器中，显示器中的文字是右对齐的对吧

1095
00:54:55,996 --> 00:54:58,797
aligned. Right? Text comes out from the right, so
数字是从右边开始增加的

1096
00:54:58,866 --> 00:55:01,266
we want to use this alignment right here.
所以还应该调整这个对齐方式

1097
00:55:01,334 --> 00:55:05,470
Right aligned. Okay? Maybe with some colors.
改为右对齐。还可以改下颜色

1098
00:55:05,539 --> 00:55:07,773
Let's put, let's make the background be blue.
把背景色改成蓝色

1099
00:55:07,842 --> 00:55:10,576
But I don't really like black on blue, so
但是黑色的字就不够显眼了

1100
00:55:10,644 --> 00:55:14,179
we'll go up here and change the color to be white. Okay?
到上面来把字的颜色改成白色

1101
00:55:14,248 --> 00:55:17,583
So that's a pretty decent looking display
现在看起来就像样多了

1102
00:55:17,651 --> 00:55:21,419
right there, for now anyway. Now, if we have these
再挪上去点，先这样吧。如果我们

1103
00:55:21,488 --> 00:55:24,322
buttons being pressed, we need to talk to this display, and
按下按钮，就应该告诉这个显示屏

1104
00:55:24,391 --> 00:55:25,390
tell it what the digits are.
按下了哪个按钮

1105
00:55:25,459 --> 00:55:27,292
So how are we gonna do that? Well again,
怎么做呢？

1106
00:55:27,361 --> 00:55:30,161
we need to make a connection between that display and
我们需要把显示屏连接到代码里

1107
00:55:30,230 --> 00:55:32,564
our code. But this is not the same kind of connection.
但用的和之前是不同的一种连接

1108
00:55:32,633 --> 00:55:34,966
Because we don't touch on that label, and
因为我们不会按下显示屏

1109
00:55:35,035 --> 00:55:38,970
it calls a method, We need to have an instance variable, or
然后让它调用一个方法。我们需要一个实例变量

1110
00:55:39,039 --> 00:55:41,806
property, that points to that thing, so we can talk to it
也就是指向这个显示屏的属性，然后我们就能

1111
00:55:41,875 --> 00:55:44,609
whenever we want, cuz we gotta put these digits on it.
随时在代码中向这个显示屏添加数字了

1112
00:55:44,678 --> 00:55:48,180
Okay? So we're still going to use the same mechanism to
连接的方法还是和之前一样

1113
00:55:48,248 --> 00:55:50,782
make a connection, which is control. And we're going to
按下 Control 键

1114
00:55:50,851 --> 00:55:54,519
drag in here. Okay? And this time we're going to use
然后拖到代码这边来，不过 Connection 选择

1115
00:55:54,588 --> 00:55:58,223
outlet. Outlet means a property that points to this.
Outlet，创建一个指向它的属性

1116
00:55:58,292 --> 00:56:01,526
And I'm going to call this display. It's our display.
名字就叫做 display，这是我们的显示屏

1117
00:56:01,594 --> 00:56:05,030
It got the type right here. This weak and strong, don't
这里的类型已经自动选好了，下面的 Weak 和 Strong

1118
00:56:05,099 --> 00:56:07,065
worry about that. I'm going to talk about that next week.
暂时不需要管，下周才会讲到

1119
00:56:07,133 --> 00:56:11,436
Okay. So don't worry. So, here is
所以不用担心

1120
00:56:11,504 --> 00:56:15,841
our first instance variable in our class. Woo hoo! Okay?
哇哦！第一个类的实例变量

1121
00:56:15,910 --> 00:56:19,678
This right here, is again just some stuff that Xcode
当然，@IBOutlet 是 Xcode 的标记

1122
00:56:19,747 --> 00:56:25,150
throws in there, so you get this, right? This,
让它显示这个小圆点

1123
00:56:25,219 --> 00:56:28,320
I told you ignore, okay? So
你们不需要在意这个

1124
00:56:28,388 --> 00:56:31,222
this is the declaration of our property and
这部分是属性的定义

1125
00:56:31,291 --> 00:56:36,194
of course it's a var and that could be let. If you want
当然，是个变量，其实用 let 也行

1126
00:56:36,263 --> 00:56:38,330
an instance variable that is set at the beginning and
如果你的实例变量始终是初始值

1127
00:56:38,399 --> 00:56:40,833
never changes, you can use let. It's pretty rare, but
一直没变过就可以用 let，不过很少见

1128
00:56:40,901 --> 00:56:45,070
you can do it, okay usually they're var. Display,
你可以这么做，不过一般都是 var

1129
00:56:45,139 --> 00:56:49,841
that's the name. ": UILabel!" is the type,
变量叫 display，: UILabel! 说的是它的类型

1130
00:56:49,910 --> 00:56:53,144
okay? So as you might guess, this has something to do with
好吧？你应该会想到可选类型

1131
00:56:53,213 --> 00:56:57,749
optionals, okay? This is kinda confusing to
一开始就要马上理解是不可能的

1132
00:56:57,818 --> 00:57:00,585
start off the bat, but that exclamation point,
虽然这个感叹号

1133
00:57:00,654 --> 00:57:04,623
which normally means unwrap an optional. Obviously we can't
一般是用来强制解包的，但显然这里

1134
00:57:04,691 --> 00:57:07,459
unwrap here, we're declaring this thing here.
我们不是在解包，我们是在定义变量

1135
00:57:07,527 --> 00:57:10,262
This is pretty much exactly the same as a question mark.
这个的意思和问号是差不多的

1136
00:57:10,331 --> 00:57:12,063
In fact, I'm gonna change it to a question mark for
实际上，现在我要把它改成问号

1137
00:57:12,132 --> 00:57:14,565
now, and later I'll change it back to an exclamation point,
之后再改回来

1138
00:57:14,634 --> 00:57:17,869
and you'll see the difference. But, the type of this display
然后你就能看出区别了。但无论如何

1139
00:57:17,938 --> 00:57:21,873
is optional UI label. Now, why is this an optional UI label?
display 都是可选的 UILabel。为什么呢？

1140
00:57:21,942 --> 00:57:24,342
Why isn't this just a UILabel?
为什么就不能只是 UILabel 呢？

1141
00:57:24,411 --> 00:57:27,913
Why does it have to be optional? Because when this UI
为什么要是可选呢？因为当用户界面

1142
00:57:27,982 --> 00:57:31,883
first comes up, iOS needs a few nanoseconds to hook
刚显示的时候，系统需要一点时间

1143
00:57:31,952 --> 00:57:35,387
that up for you. So when this UI first comes up,
关连控件和代码。所以刚加载的时候

1144
00:57:35,456 --> 00:57:39,191
it's not set to an optional not set case and then UI hooks
它是缺省值的。关连完之后

1145
00:57:39,259 --> 00:57:42,093
it up for you, and now it's set forever after that. And
之后就是有值的了

1146
00:57:42,162 --> 00:57:45,397
that's important that it's set forever, and we'll see it has
之后一直都是有值的。

1147
00:57:45,465 --> 00:57:47,966
to do with that exclamation point I just got rid of. But
这就是我刚才去掉的那个感叹号的作用

1148
00:57:48,035 --> 00:57:50,768
for now understand that display is just an optional
现在只要理解这是可选类型就行了

1149
00:57:50,837 --> 00:57:53,405
we'll have to unwrap it every time we use it, okay so
每次使用的时候都要解包

1150
00:57:53,473 --> 00:57:57,342
as simple as that. All right, so now instead of printing
仅此而已。现在我们

1151
00:57:57,411 --> 00:57:59,545
the digits on the screen let's go ahead and
不打印数字到控制台了

1152
00:57:59,613 --> 00:58:01,846
put these digits into the display,
我们把数字加到显示屏上

1153
00:58:01,915 --> 00:58:04,416
and really every time a digit is pressed we wanna append it
每次按下某个数字

1154
00:58:04,485 --> 00:58:07,352
onto the end of the display like if there's 56 in there we
就把它加到显示屏最后。比如现在是 56

1155
00:58:07,420 --> 00:58:12,758
wanna append 2- it's 562 and 8 it's 5268, right? So we're
我们要加个 2，就是 562；再加个 8，就是 5268

1156
00:58:12,826 --> 00:58:16,127
just gonna keep appending. So we need to get the text so
我们就一直往后面加。所以我们就要获取当前

1157
00:58:16,196 --> 00:58:18,663
it's currently in the display and add the digit to it.
display 显示的文字，然后把数字加到后面

1158
00:58:18,732 --> 00:58:20,899
So I'm gonna add another little local variable.
所以我们还需要一个局部变量

1159
00:58:20,968 --> 00:58:26,205
It's a constant also called textCurrentlyInDisplay and
一个叫做 textCurrentlyInDisplay 的常量

1160
00:58:26,273 --> 00:58:29,541
I'm gonna get that by sending a message to the display,
得到它的值，是通过发送消息到 display

1161
00:58:29,610 --> 00:58:31,143
which I have to unwrap,
当然要先解包

1162
00:58:32,646 --> 00:58:34,612
and now I can send your message. And
然后再发送消息

1163
00:58:34,681 --> 00:58:38,183
here's all the messages that label responds too,
然后这些就是标签所有会响应的消息了

1164
00:58:38,252 --> 00:58:41,452
again, hundreds, okay? So I'm gonna do the same trick, I'm
也是有一大堆，好吧。还是用老方法

1165
00:58:41,521 --> 00:58:45,457
gonna type text because I want the text out of there Look at
我输入 text，文字就是我想要的

1166
00:58:45,526 --> 00:58:48,459
the very first one, the text displayed by the label.
看看这第一个，标签显示的文字

1167
00:58:48,528 --> 00:58:52,197
It's an optional string. Excellent, I'll take it, okay.
可选类型的字符串。很好，就决定是你了

1168
00:58:52,266 --> 00:58:54,399
So, now I've got the text but it's optional. So,
我得到了显示的文字，但是是可选的

1169
00:58:54,467 --> 00:58:59,470
I need to unwrap it, okay? So now textCurrentlyInDisplay.
我需要解包 textCurrentlyInDisplay

1170
00:58:59,539 --> 00:59:02,541
If I option click on it you'll see it's a string. So,
如果我按 Option 键再点击它，类型就只是字符串了

1171
00:59:02,609 --> 00:59:05,610
now I can just say, set the display, unwrap,
我现在就只需要把 display 解包

1172
00:59:05,679 --> 00:59:08,814
text equal to the text that's currently in the display
赋值 text 为 display 现在的文字

1173
00:59:08,882 --> 00:59:12,684
plus the digit. Now, notice when I set an optional, text
加上数字。注意当我赋值给一个可选类型时

1174
00:59:12,753 --> 00:59:16,421
is an optional, right? When I set it equal to something- by
text 是可选的，是吧？我赋值给它的时候

1175
00:59:16,489 --> 00:59:20,558
the way this optional is get and set unlike currentTitle,
顺便说一句，text 是可读写的

1176
00:59:20,627 --> 00:59:24,929
which was get only- so I can set the your label's text here
不像只读的 currentTitle。所以我们能够更改标签的文字

1177
00:59:24,998 --> 00:59:27,999
and get it. When I set this optional right here,
也能得到它。当我赋值给可选类型的时候

1178
00:59:28,068 --> 00:59:31,403
I don't have to unwrap it first, okay?
我并不需要先解包

1179
00:59:31,471 --> 00:59:32,904
So you don't have to unwrap an optional to set it,
所以赋值给可选类型的时候不需要解包

1180
00:59:32,973 --> 00:59:35,807
you just set it. And optionals know okay,
你直接赋值就可以了。因为可选类型已经知道了

1181
00:59:35,875 --> 00:59:39,043
this must be the associated value of an optional string,
这个值也一定是可选字符串类型的

1182
00:59:39,112 --> 00:59:42,047
so I will set it, okay? So that's it,
所以我可以直接赋值给它，这样就可以了

1183
00:59:42,116 --> 00:59:51,489
let's see if that works. Okay,
让我们看看有没有用

1184
00:59:51,558 --> 00:59:55,560
so we got our UI, looks good, got a display in there, mm-hm.
我们的界面显示出来了，显示屏也在上面

1185
00:59:55,629 --> 01:00:01,132
Let's try 8, well 6, well, it's kinda working.
让我们按 8，6。好吧，虽然没什么大问题

1186
01:00:01,201 --> 01:00:02,601
It's definitely doing the appending thing,
因为我们按的数字确实添加在了后面

1187
01:00:02,670 --> 01:00:04,303
but that 0 at the beginning,
不过一开始的那个 0

1188
01:00:04,371 --> 01:00:08,406
that's wrong. That zero is not part of what I was typing.
那是不对的，那并不是我输入的一部分

1189
01:00:08,475 --> 01:00:10,175
That zero just happened to be there at startup.
那个 0 是我一开始默认显示的

1190
01:00:10,243 --> 01:00:13,078
So, it shouldn't be put in in the front there and
所以它并不应该一直显示在前面

1191
01:00:13,146 --> 01:00:14,413
the problem here is really simple.
这个问题很容易解决

1192
01:00:14,481 --> 01:00:17,548
It's just that we haven't taught our calculator to know
只不过是我们还没有教会计算器

1193
01:00:17,617 --> 01:00:19,117
when the user is entering,
哪个部分才是用户输入的

1194
01:00:19,185 --> 01:00:20,652
in the middle of entering a number,
什么时候用户正在输入

1195
01:00:20,721 --> 01:00:22,488
versus when it just started up.
什么时候它刚开始运行

1196
01:00:22,556 --> 01:00:25,123
Or maybe, the result of an operation just appeared
或者显示屏刚显示运算的结果

1197
01:00:25,192 --> 01:00:27,625
there. Obviously when we type we wouldn't want that to
当然我们输入的时候

1198
01:00:27,694 --> 01:00:30,361
happen, thanks to it. So, we need to teach our
并不希望 0 出现在前面。所以我们

1199
01:00:30,430 --> 01:00:32,931
calculator brain here to know the difference between whether
要让计算器有不同的状态

1200
01:00:32,999 --> 01:00:34,466
the user is in the middle of typing or not.
知道用户是否在输入的过程中

1201
01:00:34,535 --> 01:00:37,302
And we're gonna do that, by creating another property
实现的方法是定于另一个属性

1202
01:00:37,371 --> 01:00:43,141
called userIsInTheMiddleOfTyping.
叫做 userIsInTheMiddleOfTyping

1203
01:00:43,210 --> 01:00:47,546
Which is gonna be a Bool. Now, I typed a long name here. Kind
一个 Bool 类型的属性。这名字挺长的

1204
01:00:47,614 --> 01:00:51,183
of for effect. We probably could have called this typing.
我这是为了舞台效果。多半我们可以就叫它 typing 就行了

1205
01:00:53,119 --> 01:00:57,288
You know, there's trade off between clarity and brevity.
清晰和简洁不可兼得

1206
01:00:57,357 --> 01:01:00,458
Okay, brevity is valued, but clarity is even more
当然简洁很重要，不过表达明确更重要

1207
01:01:00,527 --> 01:01:05,597
important. So, maybe isTyping would have been enough.
也许 isTyping 就够了的

1208
01:01:05,665 --> 01:01:08,967
But I would err slightly on the side of clarity. So I'm
但我还是更偏向于表达清晰

1209
01:01:09,036 --> 01:01:10,936
using this long one. The other thing, the reason I typed this
所以我会用这个很长的名字。另一个原因是

1210
01:01:11,005 --> 01:01:13,304
long is to show you that I'm never gonna have to type this
告诉你我从来不需要再完整地敲这么长的名字

1211
01:01:13,373 --> 01:01:16,375
again, because Xcode is always gonna escape complete this for
因为 Xcode 会帮我自动补全

1212
01:01:16,443 --> 01:01:19,711
me, as you'll see when I start using it. Now when I added
当我用到的时候就你们就知道了

1213
01:01:19,779 --> 01:01:22,915
this beautiful var, this Bool. Okay, a Bool, by the way,
当我添加这个美丽的布尔型变量之后

1214
01:01:22,983 --> 01:01:24,315
is just something that can be true or false,
也就是只能为 true 和 false 的变量之后

1215
01:01:24,384 --> 01:01:28,353
of course. I got an error. Look at that error up there.
出现了错误。看看这里的这个错误

1216
01:01:28,422 --> 01:01:31,857
This little thing here- it's on a line that had nothing to
这里的这个小标记，出现在了这一行

1217
01:01:31,926 --> 01:01:34,760
do with what I just did. What? That's not fair.
和我刚才干的那行毫无关系的地方。这就奇怪了

1218
01:01:34,829 --> 01:01:37,562
What is this? It says Class 'View Controller'
它说什么？它说 Class 'ViewController' has no initializers

1219
01:01:37,631 --> 01:01:40,999
has no initializers. Okay well, what the heck is that?
ViewController 类没有构造器。这是什么意思？

1220
01:01:41,068 --> 01:01:42,634
That has nothing to do with the var either?
这和我们刚定义的变量也没关系啊

1221
01:01:42,703 --> 01:01:45,637
Well, here's the deal here. In Swift,
好吧，事情是这样的

1222
01:01:45,705 --> 01:01:50,475
all properties have to be initialized. Every single one.
Swift 要求所有的属性都要初始化。每个都要

1223
01:01:50,543 --> 01:01:54,246
No exceptions. Now there's two ways
一个都不能少。可以使用两种方法

1224
01:01:54,315 --> 01:01:57,516
to initialize your properties in a class or struct.
来初始化类和结构体里的属性

1225
01:01:57,585 --> 01:01:59,717
One is with an initializer.
一是使用构造器

1226
01:01:59,786 --> 01:02:03,055
An initializer is a special method, it's called init,
构造器是一个特殊的方法，叫做 init

1227
01:02:03,123 --> 01:02:06,525
I-N-I-T. You can have any number of arguments that your
I-N-I-T。可以接受任意数量的参数

1228
01:02:06,593 --> 01:02:09,895
class requires but, in its implementation it has to
只要是这个类需要的；但一定要保证

1229
01:02:09,963 --> 01:02:14,599
initialize all uninitialized properties. Okay? Now,
初始化所有没有初始化的属性

1230
01:02:14,668 --> 01:02:16,234
we're not gonna talk about initializers today.
我们今天不会讲构造器

1231
01:02:16,303 --> 01:02:18,270
I'll talk about it a little bit next Wednesday,
我们下周三会讲一点

1232
01:02:18,339 --> 01:02:21,373
actually. So, we're not gonna use an initializer. Because
所以我们今天不会用构造器

1233
01:02:21,442 --> 01:02:23,976
there's a second way to initialize, which is to just
因为我们还有第二种方法来初始化

1234
01:02:24,044 --> 01:02:27,445
give it a value. Okay, is false, right? The user's
直接赋值就可以了。我们这里设置为 false

1235
01:02:27,514 --> 01:02:30,449
obviously not in the middle of typing at the beginning, so
因为一开始的时候用户肯定没有在输入

1236
01:02:30,518 --> 01:02:34,052
is false. And that got rid of the error.
所以是 false。错误就解决了

1237
01:02:34,120 --> 01:02:39,324
Okay? In fact, we don't need this either. Do you see why?
其实，我们也不需要声名类型，知道为什么吗？

1238
01:02:39,393 --> 01:02:43,094
Because false, can only be a Bool, So
因为 false 是 Bool 类型的

1239
01:02:43,163 --> 01:02:48,566
Swift can infer that this must be a Bool. And again,
Swift 能够自动推导类型，知道这个一定是布尔型的

1240
01:02:48,635 --> 01:02:51,836
we do not want these things in here, if we can help it. Now,
所以如果可能的话，我们习惯不声明类型

1241
01:02:51,905 --> 01:02:55,473
what about this guy? That's not initialized. How come he's
那这个 display 呢？它也没有初始化啊

1242
01:02:55,542 --> 01:02:58,076
not complaining, okay? How come he's not getting that?
为什么没有报错呢？这不公平

1243
01:02:58,145 --> 01:03:01,880
Must be initializers business going on. Well, because he's
使用了构造器么？其实原因是因为它是

1244
01:03:01,949 --> 01:03:05,283
an optional. And optionals are special when it comes
可选类型的。可选类型很特别

1245
01:03:05,352 --> 01:03:08,820
to initialization. They all get this automatic treatment.
初始化的时候会被自动

1246
01:03:08,889 --> 01:03:13,659
Equals nil. nil means not set optional. Okay.
初始化为 nil。nil 表示缺省值

1247
01:03:13,727 --> 01:03:16,027
That's the only thing nil means in Swift. It means
nil 在 Swift 里的意思就是缺省值

1248
01:03:16,096 --> 01:03:20,031
an optional that's not set. So optional will automatically
表示可选类型没有被赋值。所以在定义

1249
01:03:20,100 --> 01:03:23,001
get this treatment at all times when you declare them.
可选类型时都会自动被初始化为 nil

1250
01:03:23,069 --> 01:03:24,836
And it makes sense right, if you have an optional
这是很有道理的。你有一个可选类型

1251
01:03:24,905 --> 01:03:27,138
it's gonna start out not set until you set it.
一开始是没有值的，直到你赋值给它

1252
01:03:27,207 --> 01:03:30,943
Now you could set this equal to some UILabel of some sort,
当然你也可以初始化为某个 UILabel 实例

1253
01:03:31,011 --> 01:03:33,812
and have it be set from the start, that's possible too.
一开始就有值是可能的

1254
01:03:33,881 --> 01:03:40,351
But if you don't say anything it gets not set. Alright, so
但如果没有的话，那就是缺省值

1255
01:03:40,420 --> 01:03:43,588
we've got that. Now we can use this userIsInTheMiddleOfTyping
好，大家都明白了。我们现在就可以用 userIsInTheMiddleOfTyping 了

1256
01:03:43,657 --> 01:03:45,023
thing. We'll say if the user is
如果用户正在输入的中途

1257
01:03:45,092 --> 01:03:46,992
in the middle of typing then we can do,
if userIsInTheMiddleOfTyping

1258
01:03:47,061 --> 01:03:51,863
this business that we just did here, okay?
然后我们再进行下面的这些操作

1259
01:03:51,931 --> 01:03:54,733
What if it's not in the middle of typing? Then we're just
那如果并没有开始输入呢？那我们

1260
01:03:54,802 --> 01:03:58,236
gonna set the display's text equal to the digit, cuz we're
赋值显示屏的文字为当前按下的数字

1261
01:03:58,305 --> 01:04:03,275
starting a new number then. In this case of course,
我们从头开始输入一个数字。这种情况下

1262
01:04:03,343 --> 01:04:08,580
the user is now in the middle of typing Okay,
用户就在输入的过程中了，为 true

1263
01:04:08,649 --> 01:04:11,783
everybody got that? So that's just how we're going to make
大家都还跟的上吧？这就是我们确保

1264
01:04:11,852 --> 01:04:13,651
sure we do the right thing. So let's go ahead and run,
计算器正常显示的方法。让我们运行

1265
01:04:13,720 --> 01:04:16,555
see if that whole 0, leading 0 problem is fixed.
看看开头显示 0 的问题是否解决了

1266
01:04:16,624 --> 01:04:18,423
Should be, because when we start off,
应该是的，因为一开始的时候

1267
01:04:18,492 --> 01:04:20,192
we're not in the middle of typing. So
用户并不是在输入的过程中

1268
01:04:20,261 --> 01:04:22,460
when we start typing a new number, boom,
当我们输入第一个数字

1269
01:04:22,529 --> 01:04:25,497
we get a new number. But if we're in the middle of typing,
就替换为了我们这个数字。但如果我们在输入的过程中

1270
01:04:25,566 --> 01:04:31,135
we keep getting the appending deal. All right,
我们会向后面添加数字

1271
01:04:31,204 --> 01:04:32,671
we are just rocking and rolling here.
我们这一步算是完成了

1272
01:04:32,740 --> 01:04:36,442
Next, let's put some operation buttons in this baby.
下一步，我要放一些运算符在这里

1273
01:04:36,510 --> 01:04:39,411
We can type in numbers, now let's start operating.
我们已经能输入数字了，下一步就是运算

1274
01:04:39,479 --> 01:04:42,147
I'm gonna do that by doing a very bad thing,
接下来我要干一件非常不好的事

1275
01:04:42,215 --> 01:04:46,317
which is I'm going to copy and paste the 7 button.
那就是复制粘贴这个数字 7 按钮

1276
01:04:46,386 --> 01:04:48,687
You're gonna see why that's bad in a moment. And
马上你们马上就知道这为什么是不好的做法

1277
01:04:48,756 --> 01:04:52,824
I'm gonna do a very simple operation, pi, okay?
我就加一个非常简单的运算符派吧，π，Option+P

1278
01:04:52,893 --> 01:04:55,293
So pi is just an operation that's gonna put pi in my
派就是在显示屏中显示派的数值

1279
01:04:55,362 --> 01:04:59,598
display, that's all it's gonna do. So I'm gonna control drag
这就是它的功能。我还是按住 Control 然后拖到代码里

1280
01:04:59,666 --> 01:05:03,368
to wire it up to a method. It's an action, not an outlet.
让它关连一个方法。选的是 Action，不是 Outlet

1281
01:05:03,437 --> 01:05:05,871
It's an action, just like touchDigit was.
就像是 touchDigit 一样的方法

1282
01:05:05,940 --> 01:05:07,372
I'm gonna call it performOperation,
方法叫做 perfomOperation

1283
01:05:07,440 --> 01:05:09,474
cuz that's what it does, it performs an operation.
这就是它的功能，进行某个运算

1284
01:05:09,543 --> 01:05:12,177
I'm gonna make sure I switch this to button like you
我会像作业里要求你们的那样

1285
01:05:12,246 --> 01:05:14,947
guys all are in your homework assignments. And
把这个改成 UIButton

1286
01:05:15,015 --> 01:05:17,615
then I'm going to connect. So now I have this new method
然后点 Connect。新的函数就定义好了

1287
01:05:17,684 --> 01:05:21,820
right here, and it is hooked up to pi, so that's good.
和这个派按钮连起来的

1288
01:05:21,889 --> 01:05:22,821
And what do I want to do in here?
要实现什么功能呢？

1289
01:05:22,890 --> 01:05:25,791
Well, I could do the same thing of asking the button
我可以像之前一样

1290
01:05:25,859 --> 01:05:30,329
which operation it is. How about let mathematicalSymbol,
问这个按钮你是什么运算。要不然用 let mathematicalSymbol

1291
01:05:30,397 --> 01:05:34,199
because that's what these things are in these operation
因为这些按钮的标题就是数学运算符

1292
01:05:34,268 --> 01:05:38,036
buttons, equal the sender.currentTitle!, okay?
把 sender.currentTitle! 赋值给这个常量

1293
01:05:38,105 --> 01:05:40,572
Great, now I've got the pi, but I wanted to show you,
好，我现在得到派了，不过我像给你们看看

1294
01:05:40,641 --> 01:05:43,242
I promised I'd show you how to do this unwrapping without
就像我之前说的那样，教你们如何解包

1295
01:05:43,310 --> 01:05:46,344
crashing, so let's do it here. Let's decide that if we do
又不用导致崩溃。我就用这个来演示。让我们来判断

1296
01:05:46,413 --> 01:05:49,915
have a blank button, a button whose title is not set, let's
这是否是个空白的按钮，这个按钮是否有标题

1297
01:05:49,983 --> 01:05:53,085
say we won't crash. Instead, we'll just do nothing.
如果是的话我们什么都不做就行了，不崩溃

1298
01:05:53,154 --> 01:05:54,319
We won't do any operations.
我们什么运算都不进行

1299
01:05:54,388 --> 01:05:55,921
Like you didn't even click a button, okay?
就像用户就没按这个按钮一样

1300
01:05:55,990 --> 01:05:59,190
So, again, optionals are so important. You can see,
再次强调，可选类型是很重要的

1301
01:05:59,259 --> 01:06:03,629
look how minuscule the syntax is for these things, right?
看看这些不起眼的语法

1302
01:06:03,697 --> 01:06:06,197
Question mark. Exclamation point. You barely have to type
问号，感叹号。使用可选类型并不需要

1303
01:06:06,266 --> 01:06:08,867
to use an optional. Well, it's the same thing if you want to
额外太多的代码。我们想要在解包

1304
01:06:08,936 --> 01:06:10,969
test the optional before unwrapping.
可选类型前，判断其是否为空

1305
01:06:11,038 --> 01:06:13,004
Instead of putting the exclamation point at the end,
我们不用感叹号

1306
01:06:13,073 --> 01:06:18,510
you put two characters at the beginning. if. So
我们只要在前面加两个字母，if

1307
01:06:18,578 --> 01:06:22,881
read this. If I can let mathematical symbol equal
连起来读，如果我能让数学运算符等于

1308
01:06:22,950 --> 01:06:26,385
the sender's currentTitle, then. So,
调用函数按钮当前的标题，那么怎样

1309
01:06:26,453 --> 01:06:29,054
if I can unwrap this optional, get its associated value,
也就是如果我能够解包这个可选类型，获得它的关联值

1310
01:06:29,123 --> 01:06:30,255
then I'll do something, and
那么我就干这些

1311
01:06:30,324 --> 01:06:32,291
then you can just put whatever code you want in here,
然后你就可以在这里面

1312
01:06:32,359 --> 01:06:33,558
and inside here,
使用这个解包的可选类型了

1313
01:06:33,627 --> 01:06:37,161
mathematicalSymbol will be a string, the associated value.
mathematicalSymbol 就是关联值，那个普通的字符串

1314
01:06:37,230 --> 01:06:40,598
The unwrapped optional, right? Outside of these curly braces,
已经解包的可选类型。大括号以外

1315
01:06:40,667 --> 01:06:43,067
mathematicalSymbol is not even defined, so it doesn't matter.
mathematicalSymbol 是未定义的，所以不用担心

1316
01:06:43,136 --> 01:06:45,437
It's not even defined. So
它是未定义的

1317
01:06:45,506 --> 01:06:48,740
inside this mathematicalSymbol, I could
在这个大括号里面

1318
01:06:48,808 --> 01:06:53,878
say if mathematicalSymbol equals, pi, then do something.
我可以判断，如果数学符号是派，我就这样

1319
01:06:53,947 --> 01:06:57,215
Else if the mathematical symbol equals something else,
否则如果是这个，否则如果是这样一直判断下去

1320
01:06:57,284 --> 01:06:59,952
okay? But, if then else, if then else, if then else, that
if...else if...else if...

1321
01:07:00,020 --> 01:07:02,621
would be really bad code. So I'm going to use a different
这样的代码看起来糟糕极了。所以我要换一种

1322
01:07:02,690 --> 01:07:05,156
one here. A different little expression.
另外一种表达式

1323
01:07:05,225 --> 01:07:08,160
I'm going to use switch. So a lot of languages have switch.
我要使用的是 switch 语句，许多语言都有 switch

1324
01:07:08,228 --> 01:07:10,562
So I'm going to switch on the mathematical symbol.
我会尝试匹配这个数学符号

1325
01:07:10,631 --> 01:07:14,532
Not all languages can switch on a string. Some can, but
并不是所有的语言都能匹配字符串的，有些能

1326
01:07:14,601 --> 01:07:17,936
you can in Swift. And I can just say, in the case that
比如 Swift 语言就可以。我能直接用 case "π"

1327
01:07:18,005 --> 01:07:21,573
it is pi, then I'm going to do something. Now,
如果是派的话，我就这样做

1328
01:07:21,642 --> 01:07:23,274
unfortunately I'm getting an error here.
然而 Xcode 报错了

1329
01:07:23,343 --> 01:07:25,143
So, what am I gonna do? Let's just put in what I'm gonna do.
那我想干什么？我们还是先把这部分加进去吧

1330
01:07:25,212 --> 01:07:29,948
I just want the display. Woops, the displays, text to
我们就让显示屏的文字

1331
01:07:30,017 --> 01:07:34,152
equal pi. Okay. This is pretty bad to type it in as a string,
赋值为派，3.1415926。这样直接输入挺不规范的

1332
01:07:34,221 --> 01:07:35,520
we'll get back to that in a second.
我们等会儿来解决这个问题

1333
01:07:35,589 --> 01:07:37,856
But that's basically what I wanted to do, right?
但这就是我要做的

1334
01:07:37,925 --> 01:07:40,925
Is set the display to be pi. Now I'm getting an error.
让显示屏显示派。但还是报错

1335
01:07:40,994 --> 01:07:43,629
What is the error? It says switch has to be exhaustive.
什么原因？它说 Switch must be exhaustive

1336
01:07:43,697 --> 01:07:46,631
And that's true. When you have a switch, you have to have
是这样的，用 switch 语句的时候，一定要

1337
01:07:46,700 --> 01:07:50,402
every possible case. So unless we want to spend the next few
能包含所有的情况。我们也许可以花上

1338
01:07:50,471 --> 01:07:54,172
lectures I guess going like this, case a-a-a, and
接着的几节课的时间，输入比如 case "aaa"

1339
01:07:54,241 --> 01:07:58,510
typing any possible string, okay, this is no good. So
输入所有可能出现的字符串。这当然是不可能的

1340
01:07:58,578 --> 01:08:03,015
luckily though, there is a default case. So
幸运的是，我们可以用 default

1341
01:08:03,083 --> 01:08:05,417
default just means all other cases.
也就是其它的所有情况

1342
01:08:05,486 --> 01:08:06,651
And here I'm just gonna break out of the switch.
我就 break，跳出这个 switch 语句

1343
01:08:06,720 --> 01:08:10,755
I'm gonna use this command break. Now notice that my
就用 break 关键字。注意到我这里

1344
01:08:10,824 --> 01:08:13,257
indentation's gotten a little messed up here. This should
代码的对齐有点乱了，这里

1345
01:08:13,326 --> 01:08:16,661
really be the same indentation as this. A really cool feature
和这里应该是对齐的。Xcode 有个很棒的功能

1346
01:08:16,730 --> 01:08:20,298
is select any text you want, even the whole file, and
那就是你能选中任意的代码，甚至整个文件

1347
01:08:20,367 --> 01:08:24,402
do Ctrl I for indent, and it will re-indent everything for
然后按 Control+I 自动对齐。Xcode 就会帮你对齐

1348
01:08:24,471 --> 01:08:27,072
you. And I recommend you do that on all your source files
我建议你们对你所有作业里的每个代码文件

1349
01:08:27,141 --> 01:08:29,274
when you turn in your homework. Just select all,
都 Command+A 全选，然后自动对齐

1350
01:08:29,342 --> 01:08:34,079
indent. So we got this pi here. Let's see if this works.
我们已经添加了派的相关逻辑，来看看能不能用

1351
01:08:43,857 --> 01:08:45,424
Got the numbers are still working.
按钮还是没问题

1352
01:08:45,493 --> 01:08:49,995
And pi. Okay. That's weird.
再试试派。这就怪了

1353
01:08:50,063 --> 01:08:53,899
I got that pi that I typed in right here. Okay, but
显示了我这里输入的派的值

1354
01:08:53,968 --> 01:08:57,069
what, how come I got this pi symbol added on there?
但为什么后面还有一个派的符号呢

1355
01:08:57,137 --> 01:09:02,140
That seems weird. Let's try a new number. So, no, okay.
这真奇怪。我们再试个数字。这下糟了

1356
01:09:02,209 --> 01:09:05,376
When I type more numbers, it adds it on to the end. So
我按了数字之后，还是加在显示屏的后面

1357
01:09:05,445 --> 01:09:06,945
even if that pi symbol wasn't in there,
即使那个派的符号不在那里

1358
01:09:07,014 --> 01:09:08,847
I'd be able to change the value of pi,
我也能更改派的值

1359
01:09:08,916 --> 01:09:12,885
evidently by adding more digits to it. That's no good.
随便给它加个几位数，这可不行

1360
01:09:12,953 --> 01:09:15,954
And look at this. When I type more it puts an ellipsis,
再看看这个，我再多加几位小数

1361
01:09:16,022 --> 01:09:19,024
and it stops taking numbers. Okay, this is a mess.
它就不显示了，这可真是一团糟

1362
01:09:19,093 --> 01:09:21,226
We got three big problems here. That pi.
我们有三个大问题。一，那个派

1363
01:09:21,294 --> 01:09:23,095
The fact that I can add on things to the end of it,
二，能向派后面加小数位

1364
01:09:23,164 --> 01:09:24,730
and the fact that I get these ellipses.
三，会出现省略号

1365
01:09:24,798 --> 01:09:25,730
So how are we going to fix those?
怎么解决呢？

1366
01:09:25,799 --> 01:09:28,967
Let's go fix all three of those real quick. Okay. So,
我们抓紧时间一起解决吧

1367
01:09:29,036 --> 01:09:31,670
first the pi coming on the end. Well look,
先是这个结尾出现派的问题

1368
01:09:31,739 --> 01:09:34,239
where do I ever set the display sets? I set it here.
我在哪里更改过显示屏的内容？这里

1369
01:09:34,308 --> 01:09:36,708
Well, so clearly the pi's not coming from this.
但派的符号肯定不是从这里来的

1370
01:09:36,777 --> 01:09:40,712
I set it here. This only sets it to one digit so
这里也改过，但是这里只会是显示一个数字

1371
01:09:40,781 --> 01:09:43,015
that can't be it, cuz I've got multiple.
肯定不是这里，因为我这里不只是一位数

1372
01:09:43,083 --> 01:09:49,087
This is the only other place I set it. Maybe
那只剩下这里了

1373
01:09:49,156 --> 01:09:54,392
this is the problem. Do you see the pi button right there?
也许就是它了。看到派按钮了吗？

1374
01:09:54,461 --> 01:09:58,964
It's hooked up to this method. And to this method. So
它也和这个函数关连上了，也关连了这个函数

1375
01:09:59,033 --> 01:10:03,201
it's doing both. It's doing this and putting this on here,
所以两个函数的内容都在执行。先是执行这个部分，显示了派的数值

1376
01:10:03,270 --> 01:10:05,971
and then it's calling this, and doing this. And
然后又调用了这个方法，把派加到了后面

1377
01:10:06,040 --> 01:10:10,575
the digit is the pi, okay? So, that's bad. Now, how are we
这里的数字，其实是派符号。这就是问题

1378
01:10:10,644 --> 01:10:15,080
going to fix that? Question? >> How did you set
怎么解决？同学，什么问题？>> 你是怎么设置

1379
01:10:15,149 --> 01:10:15,681
the order range? >> Yeah,
顺序的？

1380
01:10:15,749 --> 01:10:16,915
the question is how did it decide the order?
>> 我重复下，问题是调用方法的顺序是怎么决定的

1381
01:10:16,984 --> 01:10:18,983
And the answer is the order is undefined.
答案是不确定的

1382
01:10:19,052 --> 01:10:21,019
In my experience, it's usually alphabetical, but
据我的经验，通常是按字母顺序

1383
01:10:21,087 --> 01:10:23,989
it's undefined. So you would never wanna depend on that.
但并没有一个统一的标准。所以你最好不要依靠调用的顺序

1384
01:10:24,058 --> 01:10:26,191
But yeah, perform comes before touchDigit.
这里 performOperation 是在 touchDigit 之前

1385
01:10:26,260 --> 01:10:29,461
I don't know. But you're almost never gonna have two
我也不知道。一般来说不会像这样

1386
01:10:29,529 --> 01:10:31,563
things hooked up like this. This is obviously an error.
和两个方法都关连起来。我们这里肯定是有问题的

1387
01:10:31,631 --> 01:10:35,000
This is causing a problem. So let's fix it. How do we do
导致程序出了问题，所以我们需要解决这个问题。

1388
01:10:35,068 --> 01:10:37,502
that? There's another way to know what's connected other
怎么办？其实还有另一种查看关连的方法

1389
01:10:37,571 --> 01:10:40,772
than using the little circles, which is just to right click
除了用这个小圆点之外，还能直接右键点击

1390
01:10:40,841 --> 01:10:43,976
on something in the UI. So I right clicked on pi, and I got
界面里的控件。比如我右键点击派

1391
01:10:44,044 --> 01:10:47,345
this big window that shows me all the connections to pi.
就出现这个很大的窗口，列出了所有和它的关连

1392
01:10:47,414 --> 01:10:49,614
This would be all the instance variables, all the methods,
也就是关连着的实例变量和方法

1393
01:10:49,683 --> 01:10:52,817
etc. And we can see that for the event Touch Up Inside,
这里也列出了所有 Touch Up Inside

1394
01:10:52,886 --> 01:10:56,521
which means a touch of the finger went up inside
也就是手指抬起的时候

1395
01:10:56,590 --> 01:11:00,692
the bounds of the button. It's sending both these messages,
如果在按钮内部，就发出消息

1396
01:11:00,760 --> 01:11:02,727
touchDigit and perfomOperation, and
给 touchDigit 和 performOperation

1397
01:11:02,796 --> 01:11:05,763
we clearly did not want touchDigit for pi.
我们显然不希望派按钮调用 touchDigit

1398
01:11:05,832 --> 01:11:09,635
Why did I get it? Because I copied and pasted that 7.
但我为什么会有这个关连呢？是因为我是复制粘贴的数字 7

1399
01:11:09,703 --> 01:11:12,404
Remember I said that was a bad idea? Yeah, that's why. So
还记得我说那是个坏主意吗？这就是原因

1400
01:11:12,473 --> 01:11:16,508
let's disconnect it by just clicking this little x, okay,
我们点这个小叉，取消关连

1401
01:11:16,577 --> 01:11:22,181
boom. Now this only is sent by this, and not by this.
现在就只会发消息给 performOperation，不会给 touchDigit 了

1402
01:11:22,249 --> 01:11:24,649
So that fixed that. What about the fact that
第一个问题就解决了。那我能够

1403
01:11:24,718 --> 01:11:28,387
I could type extra numbers on the end of pie? Well, that's
给派再加个几位的问题呢？

1404
01:11:28,455 --> 01:11:31,089
a pretty simple neither. When am I allowed to type other
这也很容易解决。我什么时候可以向显示屏

1405
01:11:31,158 --> 01:11:34,258
numbers in? When the user's in the middle of typing a number.
加数字？当用户正在输入的时候

1406
01:11:34,327 --> 01:11:35,960
Well as soon as I hit pi,
用户按下派之后

1407
01:11:36,029 --> 01:11:39,364
is the user in the middle of typing a number? No, they
还在输入的过程中吗？没有

1408
01:11:39,433 --> 01:11:41,933
just typed pi. So they're not in the middle of typing pi.
他们已经输入完派了，他们并不是在输入派的过程中

1409
01:11:42,002 --> 01:11:43,402
And in fact, they're typing a number.
他们没有还在输入一个数字

1410
01:11:43,471 --> 01:11:45,904
And in fact any time we perform any operation,
其实我们在进行任何运算的时候

1411
01:11:45,973 --> 01:11:49,007
the user is in the middle of typing a number is false.
就可以让 userIsInTheMiddleOfTyping = false

1412
01:11:49,076 --> 01:11:51,476
They are clearly not in the middle of typing anymore.
因为用户显然已经还在输入的过程中了

1413
01:11:51,545 --> 01:11:53,745
Whatever's gonna be display is gonna be the result of that
显示的内容只会是运算的结果

1414
01:11:53,813 --> 01:11:57,849
operation. Okay, so that fixes that. How bout the little
好，解决了第二个问题。那省略号呢

1415
01:11:57,918 --> 01:12:00,385
ellipses, and the numbers getting cut off. Well here's
那些被截断的数字呢

1416
01:12:00,453 --> 01:12:03,956
a kind of a cute fix to that. In label, there is a cool
我们解决的方法挺机智的。标签里有个很酷的功能

1417
01:12:04,024 --> 01:12:06,024
feature called autoshrink, you see it right there?
叫做 Autoshrink，自动缩小，看到了吗

1418
01:12:06,093 --> 01:12:08,460
So I just selected label, brought up this inspector.
选中一个标签，调出检查器

1419
01:12:08,528 --> 01:12:11,730
There's autoshrink, and you can have it shrink down, for
找到这里的 Autoshrink。你可以选择缩小到

1420
01:12:11,798 --> 01:12:14,632
example to a minimum font size, let's say 9 font.
比如说某个字号，像是 9 号

1421
01:12:14,701 --> 01:12:16,468
And now, when we get too many numbers,
我们现在数字多起来之后

1422
01:12:16,536 --> 01:12:19,571
it'll shrink down instead of doing ellipses, right there.
它就会自动缩小，而不是显示省略号了

1423
01:12:19,639 --> 01:12:21,940
Now, this probably isn't the best solution to this.
但这并不一定是最好的解决方案

1424
01:12:22,009 --> 01:12:24,576
A better solution would be, have our calculator only show
更好的方法是，让计算器只显示

1425
01:12:24,644 --> 01:12:27,112
a certain number of digits after the decimal point.
一定长度的数字，或是只到小数点后几位

1426
01:12:27,181 --> 01:12:28,780
Probably would be really better. And
这样也许会更好

1427
01:12:28,849 --> 01:12:30,782
that's extra credit for you in your homework, okay?
这会作为你们作业里的加分项

1428
01:12:30,851 --> 01:12:33,685
So good luck with that. Right, so we got this.
祝你们好运吧。我们稍作修改

1429
01:12:33,754 --> 01:12:35,454
We fixed all these problems, let's take a look.
解决了所有的问题，来实际看看吧

1430
01:12:43,964 --> 01:12:48,533
All right, so got our numbers here. Pi, alright no pi and
数字键还是正常的。派，太好了，没有结尾的符号了

1431
01:12:48,602 --> 01:12:52,537
it didn't add them on to the end and
再按数字键也不是加在派后面了

1432
01:12:52,606 --> 01:12:54,673
what if we had a lot of numbers in here.
再看看如果有很多数字呢

1433
01:12:55,810 --> 01:12:57,642
Yeah, look at that, it's autoshrinking.
很好，看看啊，字号在自动缩小

1434
01:12:57,711 --> 01:12:59,144
Okay, we're not losing any numbers.
没有出现数字消失的情况

1435
01:12:59,213 --> 01:13:00,812
Yeah, probably not the best solution but
虽然这不是最好的解决方案

1436
01:13:00,881 --> 01:13:05,083
I get to show you autoshrink. Okay, what's next?
我就是想展示一下自动缩小。下一步

1437
01:13:05,151 --> 01:13:09,254
We're gonna attack this little problem right here. Okay?
解决这个问题

1438
01:13:09,323 --> 01:13:12,757
This is really ugly, really what I want this to be is this
这实在是太丑陋了，我想让它改成这样

1439
01:13:12,826 --> 01:13:17,061
really cool feature in Swift, Double.pi, which is the double
Swift 里很优秀的特性，Double.pi

1440
01:13:17,130 --> 01:13:20,798
precision floating point value of pi. Of course, I can't say
派在双精度下的浮点值。当然我不能直接就这样写

1441
01:13:20,867 --> 01:13:23,735
this because- Cannot assign value of type 'Double' to
Cannot assign value of type 'Double' to type 'String?'

1442
01:13:23,804 --> 01:13:26,638
an optional string because the only way you can assign
不能把双精度类型的值赋给可选字符串

1443
01:13:26,707 --> 01:13:30,008
anything to an optional string besides nil would be something
因为可选字符串的值不是 nil 的话

1444
01:13:30,077 --> 01:13:33,278
that's a string. So we can set that associated value. Now,
就只能是字符串。所以我们要设置的就是那个关联值

1445
01:13:33,347 --> 01:13:36,047
does anyone know, from what I've shown you today,
有谁知道，我今天讲过的哪个内容

1446
01:13:36,116 --> 01:13:42,821
how we could convert this to a string? No brave soul?
能够把这个转换成字符串？没有人自告奋勇？

1447
01:13:42,890 --> 01:13:46,258
Back, exactly. Backslash, open parentheses,
没错，就是反斜线，左括号

1448
01:13:46,326 --> 01:13:48,861
close parenthesis, that little trick, right?
右括号，就是这个窍门

1449
01:13:48,929 --> 01:13:52,230
You can just put Double.pi in here.
然后把 Double.pi 放进来

1450
01:13:52,299 --> 01:13:55,033
Doubles can be converted to strings, bingo.
双精度小数可以转换成一个字符串

1451
01:13:55,102 --> 01:13:59,737
Now, this is kinda ugly, okay? This really doesn't look good
但这看起来也不是很好

1452
01:13:59,806 --> 01:14:03,609
because this is more meant to embed things in other strings.
因为这个适用于把其它东西插入到字符串里

1453
01:14:03,677 --> 01:14:06,644
It's not really the way to make something a string.
而不是把它转换成字符串的方法

1454
01:14:06,713 --> 01:14:08,814
The way to really make a new string is to create
新建一个字符串的方法

1455
01:14:08,882 --> 01:14:11,816
a new string. And so, here you're seeing what the syntax
是构造一个字符串。你这里看到的

1456
01:14:11,885 --> 01:14:16,288
is to create a new object, a new struct or a new class,
就是构造一个新对象的方法，一个新的结构体或类的方法

1457
01:14:16,356 --> 01:14:19,625
okay? The name of the class, and then parentheses.
类的名字，然后是一对括号

1458
01:14:19,693 --> 01:14:23,494
Now, inside these parentheses, can be anything the class
在括号里面是任何

1459
01:14:23,563 --> 01:14:27,565
can take to create one of itself, right? Anything that
可以用来构造对象的参数

1460
01:14:27,634 --> 01:14:30,401
class can take. And remember I mentioned those initializers?
任何支持的参数。还记得我提到的构造器吗

1461
01:14:30,470 --> 01:14:33,138
These are the arguments to the initializer. And initializers,
这些就是构造器的参数

1462
01:14:33,206 --> 01:14:34,706
you've got multiple initializers.
你可以有许多不同的构造器

1463
01:14:34,775 --> 01:14:36,875
String has a whole bunch of initializers.
字符串类有不少的构造器

1464
01:14:36,944 --> 01:14:39,444
One of the initializers that a string has,
其中一个

1465
01:14:39,513 --> 01:14:44,749
takes a double. So this would be the right way to
能接受一个双精度小数。所以这才是

1466
01:14:44,818 --> 01:14:46,484
convert from a double to a string and
把双精度小数转换为字符串的方法

1467
01:14:46,553 --> 01:14:48,820
it looks a lot better in the code as well, right.
代码也看起来好多了

1468
01:14:48,889 --> 01:14:52,524
It's more obvious what we're doing, okay?
我们的意图也更明显了

1469
01:14:52,592 --> 01:14:55,527
All right let's add another operation here,
我们再来添加另一个运算

1470
01:14:55,596 --> 01:14:59,030
I'm gonna make this one be square root. So I'm gonna need
平方根。我需要这个符号

1471
01:14:59,099 --> 01:15:01,967
the square root symbol, from the edit menu, emoji and
从菜单里的 Edit > Emoji & Symbols

1472
01:15:02,035 --> 01:15:06,338
symbols, you can actually search. We could pick a smiley
然后搜索。虽然我们可以就用这个笑脸符号

1473
01:15:06,407 --> 01:15:10,275
face but let's go square root. Square root, here it is, so
但我们还是把平方根找出来。square root，出来了

1474
01:15:10,344 --> 01:15:14,846
we're gonna use this square root symbol in code there. And
我们就使用这个平方根符号

1475
01:15:14,914 --> 01:15:16,748
let's go ahead and copy it so we can use it in the code.
然后 Command+C 复制到剪贴板，等会在代码里用

1476
01:15:16,817 --> 01:15:18,050
All right, so we have this,
这就是我们的平方根按钮

1477
01:15:18,118 --> 01:15:21,753
it's nicely hooked up just to this and not to this.
与且仅与 performOperation 关连

1478
01:15:21,821 --> 01:15:25,724
So that's good. We just need to say case of square root.
我们 switch 再加一个情况，如果是平方根，case "√"

1479
01:15:25,793 --> 01:15:29,160
What do we wanna do? We wanna set the display's text
我们就把显示的文字

1480
01:15:29,229 --> 01:15:32,964
equal to the square root of something. Okay, well what do
赋值为某个数的平方根

1481
01:15:33,033 --> 01:15:35,600
we want this to be the square root of? Well we want it to be
我们希望这是什么的平方根？

1482
01:15:35,669 --> 01:15:39,370
the square root of whatever's in this display already. So,
应该是目前显示屏内容的平方根

1483
01:15:39,439 --> 01:15:45,710
display!.text, okay, will that work? No, because this
能直接把 display!.text 作为参数吗

1484
01:15:45,779 --> 01:15:49,047
is a string and we can't take the square root of a string.
不行，因为那是个字符串，怎么计算一个字符串的平方根啊

1485
01:15:49,116 --> 01:15:53,818
And not only that, the square root returns a double, okay?
还有一个问题，sqrt 的返回值是双精度型的

1486
01:15:53,887 --> 01:15:56,855
And we can't put a double into a string, so we at least have
我们不能把它赋值给一个字符串

1487
01:15:56,924 --> 01:16:00,892
to do this again, put a string around it. Okay? But
所以我们至少需要用 String 的构造器

1488
01:16:00,961 --> 01:16:04,662
this is still a string. So I'm gonna get this out of here and
但这个部分还是字符串。先把这个部分单独出来

1489
01:16:04,731 --> 01:16:06,131
make a little local variable so
存到一个局部变量 operand

1490
01:16:06,200 --> 01:16:10,569
we can work on this, okay? So, we need this operand,
只关注这个部分。我们需要这个运算数

1491
01:16:10,638 --> 01:16:15,574
which is currently a string, to be a double. So
operand 由现在的字符串变为小数

1492
01:16:15,642 --> 01:16:21,079
can we do this, double? You think we can do that?
我们能把它转换为双精度小数吗？

1493
01:16:21,148 --> 01:16:24,083
In the same way that we went this way? Can we go this way?
能像我们转字符串那样吗？能反过来吗？

1494
01:16:25,219 --> 01:16:29,922
The answer is yes. Or yes? One of those.
答案是可以，更准确地说，大部分时候可以

1495
01:16:29,990 --> 01:16:34,326
The answer is yes because, what if that string is hello?
因为，如果那个字符串是 hello

1496
01:16:34,395 --> 01:16:39,164
What do you convert hello to? It can't be converted.
你要怎么把 hello 转成小数？这是做不到的

1497
01:16:39,233 --> 01:16:43,936
So this initializer for double that takes a string,
所以这个双精度的构造器，参数是字符串

1498
01:16:44,004 --> 01:16:48,340
it returns an optional double. Do you see why? Cuz if you
返回值是一个可选的双精度。可以理解吧

1499
01:16:48,408 --> 01:16:50,709
give it a string that it can't convert to a double,
给它个字符串，如果没法转换

1500
01:16:50,778 --> 01:16:53,511
it returns not set. Couldn't do it, basically.
返回就会缺省值。也就是表示无法转换

1501
01:16:53,580 --> 01:16:57,516
So if we look at operand right here, it's an optional double,
所以我们可以看到这个 operand，是 Double? 类型的

1502
01:16:57,585 --> 01:16:59,618
okay? Whereas when we did this string up here,
和上面字符串的构造器是不一样的

1503
01:16:59,687 --> 01:17:01,619
string didn't need to return optional string,
构造的并不会是可选字符串

1504
01:17:01,688 --> 01:17:04,323
because it can always convert a double to a string, always.
因为一定能用字符串表示小数

1505
01:17:04,391 --> 01:17:06,224
But you can't always convert a string to a double,
但不总是能把字符串转换成小数的

1506
01:17:06,293 --> 01:17:08,427
it has to look like a double. Okay?
至少要长得像才行

1507
01:17:08,495 --> 01:17:10,395
So, we're gonna do that and I'm gonna go ahead and
我们就用这个构造器

1508
01:17:10,464 --> 01:17:13,231
force unwrap it here with the exclamation point, assuming
直接用感叹号强制解包

1509
01:17:13,300 --> 01:17:16,068
that I never have anything in my display that can't be
假设显示的内容

1510
01:17:16,136 --> 01:17:19,804
converted to a double. Maybe that's a bad assumption but
总是能转换的。虽然这个假设很大胆

1511
01:17:19,873 --> 01:17:23,007
I'm gonna assume that for now. I'm also gonna Ctrl+I again,
但现在先这样吧。还是顺便用 Control+I

1512
01:17:23,076 --> 01:17:26,511
to get my indenting right. Okay, does this make sense?
把代码对齐。都还能理解吧？

1513
01:17:26,580 --> 01:17:29,280
So now all is well. Operand is a double.
这样就完成了，operand 是 Double 型的

1514
01:17:29,349 --> 01:17:31,015
So I can take the square root of a double.
我就能直接求它的平方根了

1515
01:17:31,084 --> 01:17:33,285
I'm gonna convert it to a string and go to here.
再转成字符串显示出来

1516
01:17:33,353 --> 01:17:36,121
All right, wow, that's a lot of mess. Okay,
有够混乱的

1517
01:17:36,190 --> 01:17:39,123
that's really messy code, I'm gonna have to fix that, but
我有必要整理一下这堆混乱的代码

1518
01:17:39,192 --> 01:17:41,960
conceptually you understand hopefully what's going on
但希望你们能理解这里发生了什么

1519
01:17:42,028 --> 01:17:47,833
there. So let's do this, let's try 81 square root. Square
让我们来试试，81，平方根

1520
01:17:47,901 --> 01:17:51,069
root again. Square root again. How about pi square root?
再平方根，再平方根。派的平方根

1521
01:17:51,138 --> 01:17:55,106
78 square root? All right, this is working perfectly.
78 的平方根。一切正常

1522
01:17:55,175 --> 01:17:59,511
But, our code is really a mess here. Can you imagine,
只不过代码有些乱。你想象一下

1523
01:17:59,580 --> 01:18:02,113
if we have to do another case and another case.
如果我们还有另外好几种情况

1524
01:18:02,182 --> 01:18:04,416
And we're always doing this double this, string that,
我们就需要不断地转换成 Double 再转回 String

1525
01:18:04,485 --> 01:18:07,285
back and forth, exclamation points everywhere. Okay,
每个地方都强制解包

1526
01:18:07,354 --> 01:18:09,254
there's too many dang exclamation points in here for
有太多不安全的感叹号

1527
01:18:09,323 --> 01:18:11,123
the first thing. And the second of all,
这是第一个问题。第二个问题是

1528
01:18:11,191 --> 01:18:12,524
I'm tired of all the strings and doubles. So
转换过来转换过去太麻烦了

1529
01:18:12,592 --> 01:18:15,227
I'm gonna fix all that. Let's start with the exclamation
两个问题都要解决。从感叹号开始

1530
01:18:15,295 --> 01:18:19,230
point thing. Look at every time I use the display.
仔细观察，我每次用 display 的时候

1531
01:18:19,299 --> 01:18:20,732
I use it all over my code.
可以看出我到处都在用

1532
01:18:20,800 --> 01:18:23,268
And every time I have to put an exclamation point,
每次用都有感叹号

1533
01:18:23,337 --> 01:18:27,372
every single time. Even though I know that display,
每次都强制解包，即使我知道

1534
01:18:27,441 --> 01:18:32,243
once it's set up by iOS in the beginning, it never is not in
只要 iOS 系统完成初始化之后

1535
01:18:32,312 --> 01:18:34,780
the not set state, it's always set. So
display 总是存在的，不会出现缺省值的情况

1536
01:18:34,848 --> 01:18:38,850
let's go back up here to this question mark.
我们回到这个问号

1537
01:18:38,919 --> 01:18:42,821
This is what exclamation point in a declaration
这就是在定义的时候使用感叹号的原因

1538
01:18:42,889 --> 01:18:46,258
of an optional means. It means yes, this is an optional,
对于定义可选类型而言，这个感叹号

1539
01:18:46,326 --> 01:18:50,795
just like a question mark. But, everywhere you use this,
和问号是差不多的。只不过每次使用的时候

1540
01:18:50,864 --> 01:18:53,831
I'm going to automatically unwrap it. Now,
会自动强制解包

1541
01:18:53,900 --> 01:18:56,969
it's still unwrapping it, so even if I go down here and
因为会自动解包，所以我们把下面代码里

1542
01:18:57,037 --> 01:18:58,570
I take away this exclamation point,
所有 display 后面的感叹号都去掉

1543
01:18:58,639 --> 01:19:01,539
it works because of this automatic unwrapping.
还是能够正常运行的，因为都自动解包了

1544
01:19:01,608 --> 01:19:05,810
But if this were not set, it would still crash. Okay?
但即使如此，如果 display 缺省值的话，还是会崩溃的

1545
01:19:05,879 --> 01:19:09,481
Because essentially, implicitly unwrapping.
因为这实际上会隐式解包这个 display

1546
01:19:09,550 --> 01:19:14,119
That's why this is called an implicitly unwrapped optional.
这就是所谓的 implicitly unwrapped optional

1547
01:19:14,188 --> 01:19:17,856
Got that phrase? Implicitly unwrapped optional. But
隐式解析可选类型

1548
01:19:17,924 --> 01:19:20,792
it does mean, that we can go around to all of our
这意味着我们可以把所有的

1549
01:19:20,861 --> 01:19:23,795
display question marks, and change them to display.
display! 替换成 display

1550
01:19:23,864 --> 01:19:27,132
And that makes our code look quite a bit nicer. Okay?
这样代码看起来就好些了

1551
01:19:27,200 --> 01:19:31,170
Now we're still having to unwrap text. Sorry about that.
但我们还是要强制解包 text 的，没有办法

1552
01:19:31,238 --> 01:19:33,404
Bottom line is we have to do that.
下面的这行需要保留感叹号

1553
01:19:33,473 --> 01:19:36,909
That's not an implicitly unwrapped optional, that text.
text 并不是一个隐式解包的可选类型

1554
01:19:36,977 --> 01:19:39,678
Okay, what about all this double and string thing?
那这些来回转换的呢？

1555
01:19:39,746 --> 01:19:41,913
The way I'm gonna fix that is imagine I had a var.
解决方法是如果我能有个变量

1556
01:19:41,982 --> 01:19:44,216
We'll call it displayValue.
叫 displayValue，显示的数值

1557
01:19:44,284 --> 01:19:49,454
And it was a double. Okay, show me this var.
是 Double 类型的变量

1558
01:19:49,522 --> 01:19:54,425
Imagine if this var, always tracked, what's in here, but
如果它能够和显示屏的数值保持同步

1559
01:19:54,494 --> 01:19:57,462
as a double? Cuz what's in there, we can only get it as
并以小数存储该多好。现在我们获取显示的值只能是字符串

1560
01:19:57,531 --> 01:19:59,764
a string, we can only set it as a string. But
也只能设置为一个字符串

1561
01:19:59,833 --> 01:20:02,634
wouldn't it be cool if I had a var that just was always what
我能不能有这样一个神奇的变量

1562
01:20:02,703 --> 01:20:05,404
was in there but as a double? Because I need it as a double
值总是显示屏里的小数？因为我每次使用的时候

1563
01:20:05,472 --> 01:20:08,440
all the dang time, and I need to set it as a double too,
我总是需要小数，每次设置的时候也是小数

1564
01:20:08,508 --> 01:20:11,509
okay? So how can I do that? Well, turns out Swift
那要怎么做呢？Swift 里

1565
01:20:11,578 --> 01:20:16,582
has a really cool feature called computed properties.
有个很厉害的特性叫做，computed property，计算型属性

1566
01:20:16,650 --> 01:20:19,752
And all I need to do is put code after the property, and
只需要把代码放到变量后面的那对大括号里

1567
01:20:19,820 --> 01:20:22,587
you can compute the value. Instead of storing
就能实时计算变量的值了，而不是依靠存储的值

1568
01:20:22,656 --> 01:20:25,290
it, right. The user is in the middle of typing a value that
userIsInTheMiddleOfTyping 这个变量的值

1569
01:20:25,359 --> 01:20:27,826
storage somewhere. This one we're gonna compute. And
是存储在某个地方的，displayValue 则是我们计算的

1570
01:20:27,894 --> 01:20:33,098
you can compute both a get case, right? And,
我们既能计算，get，获取的值

1571
01:20:33,167 --> 01:20:39,838
oops, sorry. And a set case. So you can have some code that
也能计算，set，赋于的值。所以你可以有代码

1572
01:20:39,906 --> 01:20:42,841
deals with getting the value and with setting the value.
负责计算获取的值，也可以有代码处理赋值的情况

1573
01:20:42,910 --> 01:20:44,843
So we're not gonna ever store displayValue anywhere.
我们的 displayValue 并不会被存储起来

1574
01:20:44,912 --> 01:20:45,777
We're gonna get it and set it.
我们会处理访问和赋值的计算

1575
01:20:45,846 --> 01:20:48,046
And where are we gonna get it and set it from?
计算的数据源又是哪里呢？

1576
01:20:48,114 --> 01:20:51,983
From the text on the label. Right? So what does the get
是标签显示的文字。那该怎么写 getter？

1577
01:20:52,052 --> 01:20:55,020
look like? Well, we're just gonna return a double of
我们就 return，返回用小数表示的

1578
01:20:55,089 --> 01:20:59,024
the display's text, you don't have to unwrap display, but
显示屏的文字。不用解包 display

1579
01:20:59,093 --> 01:21:02,127
I do have to unwrap text. And I'm gonna force unwrap that.
但是要解包 text。然后强制解包这个整体

1580
01:21:02,196 --> 01:21:06,331
Again, I'm assuming there's always a string that
我还是假设显示的内容

1581
01:21:06,400 --> 01:21:07,799
can be interpreted as a double in there.
一定能被解析为一个双精度小数

1582
01:21:07,867 --> 01:21:09,935
Maybe I wanna change that assumption down the road, but
也许之后我会改主意

1583
01:21:10,004 --> 01:21:12,070
for now I'll do that. How about the set case?
但现在我还是这么做假设。那被赋值的时候怎么办呢？

1584
01:21:12,139 --> 01:21:16,075
In this set case, I'm gonna display, set the display's
在被赋值的时候，我让 display 的 text

1585
01:21:16,143 --> 01:21:19,010
text equal to a string that is the value that
赋值为一个字符串

1586
01:21:19,079 --> 01:21:22,213
people are trying to set the display value to.
字符串是我们想要显示屏接下来显示的值

1587
01:21:22,282 --> 01:21:25,917
So somewhere in the code, we write displayValue equals
也就是比如写 displayValue = 5

1588
01:21:25,986 --> 01:21:29,988
five. And here we have to put a five,
我们就把 5

1589
01:21:30,057 --> 01:21:34,659
a string five into the text of the display up here.
转换成字符串显示到显示屏

1590
01:21:34,728 --> 01:21:38,364
So what do we put inside this little string here. Well, for
那这个字符串构造器的参数写什么？

1591
01:21:38,432 --> 01:21:42,401
this set case, okay, of a computed property,
计算属性的 set 里

1592
01:21:42,469 --> 01:21:46,638
there's a special variable called newValue, and newValue
有个特殊的变量叫做 newValue

1593
01:21:46,707 --> 01:21:50,175
is always of the same type as what you're setting, and it is
newValue 和这个变量是同一个类型的

1594
01:21:50,243 --> 01:21:53,145
the value on the right hand side of an equals if someone
它就是那个在赋值语句右边的

1595
01:21:53,214 --> 01:21:58,683
says that this var equals something, okay? Awesome.
你让变量等于的那个值

1596
01:21:58,752 --> 01:22:00,319
Now that we have this displayValue and
现在这个 displayValue

1597
01:22:00,387 --> 01:22:02,954
it's always tracking that, we can use it down here.
会和显示屏保持同步，也能够在下面使用了

1598
01:22:03,023 --> 01:22:08,026
Look at this code, displayValue equals pi.
改成这样，displayValue = Double.pi，显示的值为派

1599
01:22:08,095 --> 01:22:12,964
Done, get rid of all this mess. displayValue equals
看看啊，这些就都不用了。显示的值等于它自己的平方根

1600
01:22:13,033 --> 01:22:17,669
the square root of the displayValue. All of a sudden,
displayValue = sqrt(displayValue)。一瞬间

1601
01:22:17,738 --> 01:22:21,540
the code down here has become essential, right?
就能抓住重点了

1602
01:22:21,608 --> 01:22:25,410
This is about the minimum you could possibly type to say
这几乎是你能用的最短的代码

1603
01:22:25,479 --> 01:22:30,782
that you wanted pi into the display. Right? And so, when I
来让显示屏显示派

1604
01:22:30,851 --> 01:22:34,419
do this display value equals, this code gets executed.
当我用 displayValue = 的时候，运行的是 set 里这段代码

1605
01:22:34,488 --> 01:22:38,891
When I get the display value here, this code gets executed.
我在这里访问 displayValue 的时候，运行的是 get 里这段代码

1606
01:22:38,959 --> 01:22:40,525
These are called computed properties. You're
这就是计算型变量

1607
01:22:40,594 --> 01:22:41,926
going to see them all over the place.
它们无处不在

1608
01:22:41,995 --> 01:22:46,231
You've already seen one. It's right here, currentTitle
你已经在这里看到过一个了，就是这个 currentTitle

1609
01:22:46,300 --> 01:22:49,434
is a computed property. It's computed by the button class.
它就是个由按钮类计算的计算属性

1610
01:22:49,503 --> 01:22:52,003
It figures out what the current title is on there and
它计算出现在按钮上的标题

1611
01:22:52,072 --> 01:22:55,273
returns it. So there's this is implemented with some
然后返回给你。具体的实现

1612
01:22:55,342 --> 01:22:56,675
code that says return whatever.
就会是 return 什么什么一类的

1613
01:22:56,743 --> 01:22:59,444
How do I know that? Because it's read-only. The only way
我怎么知道的？因为这是只读的，而只有计算属性能实现

1614
01:22:59,513 --> 01:23:03,448
to make a read-only var is using a computed property.
完全只读的。（可以更改 setter 的访问级别来实现伪只读）

1615
01:23:03,517 --> 01:23:06,251
All right, let's make sure we didn't break anything with our
让我们来确认一下有没有导致新 bug

1616
01:23:06,320 --> 01:23:14,393
code clean up there. All right, 89 looking good,
毕竟整理了代码。试试 89

1617
01:23:14,461 --> 01:23:18,463
square root, 81, square root, square root, square root.
平方根。81 的平方根，的平方根，的平方根

1618
01:23:18,532 --> 01:23:21,366
Pi 78 square root. Okay,
派，78，平方根。好

1619
01:23:21,434 --> 01:23:25,537
it's working. Okay, so that's a lot of stuff to digest,
没问题。我知道要消化的内容很多

1620
01:23:25,606 --> 01:23:29,107
I know. Let it all sink in. On Wednesday at the start,
你们花时间理解记忆。星期三一开始

1621
01:23:29,176 --> 01:23:31,610
I'm gonna talk to you about MVC, this design paradigm, and
要讲 MVC，那个设计模式

1622
01:23:31,679 --> 01:23:35,380
then we're gonna add MVC to this and
再运用 MVC

1623
01:23:35,448 --> 01:23:37,983
we're also gonna make sure that UI works on all devices.
最后确保 UI 适用于各种设备

1624
01:23:39,119 --> 01:23:40,752
Okay, see you then. >> For
好，下课

1625
01:23:40,821 --> 01:23:50,228
more, please visit us at stanford.edu.
>> 更多课程详见 stanford.edu
