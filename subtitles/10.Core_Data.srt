1
00:00:00,401 --> 00:00:04,535
本字幕由志愿者义务贡献，采用许可协议
知识共享 署名-非商业性使用-相同方式共享 3.0 美国

2
00:00:04,604 --> 00:00:07,838
Stanford University.
斯坦福大学

3
00:00:07,907 --> 00:00:11,109
>> All right, well, welcome to Stanford CS193P.
欢迎参加 2017 年冬季学期斯坦福

4
00:00:11,177 --> 00:00:16,980
This is Developing iOS Application, Winter of 2017.
CS193P 课程，iOS 应用程序开发

5
00:00:17,049 --> 00:00:19,983
And the only topic for today is a big one, Core Data,

6
00:00:20,052 --> 00:00:23,019
which is an object oriented database.

7
00:00:23,088 --> 00:00:24,821
But before I dive into this,

8
00:00:24,889 --> 00:00:28,324
I'm actually going to revisit that demo we did last time

9
00:00:28,393 --> 00:00:31,260
just briefly, because we ran out of time and so

10
00:00:31,329 --> 00:00:34,262
I wasn't able to show you the refresh control.

11
00:00:34,331 --> 00:00:35,797
Now I posted the code for it, so

12
00:00:35,866 --> 00:00:38,066
I'm not gonna type all the code in here.

13
00:00:38,134 --> 00:00:40,701
But I'm just gonna briefly show you

14
00:00:40,770 --> 00:00:43,270
how that refresh control worked, okay?

15
00:00:43,339 --> 00:00:45,171
Okay, so we missed that.

16
00:00:45,240 --> 00:00:47,907
So here is the app we had from last time.

17
00:00:47,976 --> 00:00:50,977
By the way, I have modified our app

18
00:00:51,046 --> 00:00:53,045
here to change our request a little bit.

19
00:00:53,113 --> 00:00:55,347
If you remember this line of code from last time,

20
00:00:55,416 --> 00:00:56,815
it used to just have the query.

21
00:00:56,884 --> 00:01:00,718
But I've changed it to also filter out retweets and

22
00:01:00,787 --> 00:01:04,188
I've also put on the safe filter, which hopefully will

23
00:01:04,257 --> 00:01:06,624
make it so that when I do these look ups,

24
00:01:06,692 --> 00:01:10,227
these sort of up looks, we don't get stuff on the screen,

25
00:01:10,296 --> 00:01:12,129
you know this is a family show,

26
00:01:12,197 --> 00:01:15,331
so we don't want to see some of that stuff.

27
00:01:15,400 --> 00:01:17,666
Anyway, hopefully, that'll work.

28
00:01:17,735 --> 00:01:19,735
So let's go back here and

29
00:01:19,804 --> 00:01:22,571
take a look at what this looks like.

30
00:01:22,640 --> 00:01:24,272
There's my simulator right here.

31
00:01:24,341 --> 00:01:25,273
So let's go ahead and search.

32
00:01:25,341 --> 00:01:29,710
Let's try Trump again and cross our fingers, all right.

33
00:01:29,779 --> 00:01:34,949
So that's not, I don't see anything too terrible there.

34
00:01:35,017 --> 00:01:38,752
Okay so what we added was this UI where we can pull down.

35
00:01:38,821 --> 00:01:40,153
Okay and it adds more tweets,

36
00:01:40,221 --> 00:01:41,888
you see how it added a tweet there?

37
00:01:41,957 --> 00:01:43,589
We have the second pull right there,

38
00:01:43,658 --> 00:01:44,724
this was with the first pull.

39
00:01:44,792 --> 00:01:49,895
And we pull down again, no tweets this time, okay?

40
00:01:49,964 --> 00:01:52,431
So each time we pull down it's doing another twitter

41
00:01:52,499 --> 00:01:53,497
fetch, and

42
00:01:53,566 --> 00:01:57,268
may get more tweets depending if people are tweeting or not.

43
00:01:57,337 --> 00:01:59,503
So let's take a look at the code to do this, again,

44
00:01:59,572 --> 00:02:01,004
I posted this code, but

45
00:02:01,073 --> 00:02:02,539
we'll just look at it, I'm not gonna type it all in,

46
00:02:02,608 --> 00:02:04,207
we're just gonna look at it real quick.

47
00:02:04,275 --> 00:02:07,042
First of all, let's talk about how do I get this UI where

48
00:02:07,111 --> 00:02:11,280
we pull down and it calls a method, or whatever?

49
00:02:11,349 --> 00:02:14,150
So let's go to look in our storyboard.

50
00:02:16,854 --> 00:02:19,787
All right, so here's our storyboard, and

51
00:02:19,856 --> 00:02:23,691
what I did was I just selected my table view controller and

52
00:02:23,760 --> 00:02:26,193
I went down here to this refreshing.

53
00:02:26,262 --> 00:02:27,360
You see that refreshing choice?

54
00:02:27,429 --> 00:02:30,864
And I changed it from disabled to enabled, and when I set it

55
00:02:30,933 --> 00:02:33,466
to enabled nothing changed here in the UI.

56
00:02:33,535 --> 00:02:36,436
You can't see any spinning thing, but

57
00:02:36,504 --> 00:02:40,072
over here in the document outline it created this

58
00:02:40,141 --> 00:02:42,340
refresh control right here.

59
00:02:42,409 --> 00:02:45,977
And so I can control drag from the document outline just as I

60
00:02:46,046 --> 00:02:47,145
can through here.

61
00:02:47,214 --> 00:02:49,680
So all I did to make this work is I just brought up

62
00:02:49,749 --> 00:02:52,082
my controller right here.

63
00:02:52,151 --> 00:02:53,784
And here's the method I did it with right here.

64
00:02:53,853 --> 00:02:58,188
I just Ctrl dragged from the Refresh Control to this method

65
00:02:58,256 --> 00:03:00,590
called refresh, okay?

66
00:03:00,659 --> 00:03:04,360
That's all I did to, to make that happen.

67
00:03:04,429 --> 00:03:05,627
And inside refresh,

68
00:03:05,696 --> 00:03:08,363
I just called that same method I had before, searchForTweets.

69
00:03:08,432 --> 00:03:10,698
This one right here, the one that search for tweets.

70
00:03:10,767 --> 00:03:12,533
And that used to look like this,

71
00:03:12,602 --> 00:03:14,368
I only changed one thing in here.

72
00:03:14,437 --> 00:03:17,805
It used to just get the twitterRequest by

73
00:03:17,873 --> 00:03:19,873
looking at our search term up here.

74
00:03:19,942 --> 00:03:21,475
Remember this function?

75
00:03:21,543 --> 00:03:25,144
And all I did was added this, which says, if

76
00:03:25,213 --> 00:03:29,849
the lastTwitterRequest has a newer version, then use that.

77
00:03:29,918 --> 00:03:33,319
But if it doesn't, then default back to doing to query

78
00:03:33,388 --> 00:03:35,053
request the way we used to.

79
00:03:35,122 --> 00:03:37,355
The only other things that I had to do was turn the refresh

80
00:03:37,424 --> 00:03:39,524
control off, you do that with the end refreshing.

81
00:03:39,593 --> 00:03:42,159
So I just did that when I went back to the main queue here,

82
00:03:42,228 --> 00:03:44,328
to get my results, so I turned it off.

83
00:03:44,397 --> 00:03:45,562
I also turned it off if for

84
00:03:45,631 --> 00:03:48,265
some reason I couldn't get any request or whatsoever.

85
00:03:48,333 --> 00:03:50,634
Okay, there's nothing in the search term field and

86
00:03:50,702 --> 00:03:53,002
I couldn't get a newer version of my last request.

87
00:03:53,071 --> 00:03:55,771
So I just said, I'm gonna make sure that thing is not

88
00:03:55,840 --> 00:03:57,940
spinning and spinning forever.

89
00:03:58,009 --> 00:03:59,374
They wanna get out of here with that.

90
00:03:59,443 --> 00:04:02,110
And the only other thing I had to do was up here,

91
00:04:02,178 --> 00:04:05,813
when the search text changes, someone types#Stanford or

92
00:04:05,882 --> 00:04:09,250
something like that, I need to invalidate that last Twitter

93
00:04:09,318 --> 00:04:12,152
request so that it's not trying to get new versions

94
00:04:12,221 --> 00:04:13,920
of the previous one that I had.

95
00:04:13,989 --> 00:04:16,589
I want it to do the new one.

96
00:04:16,658 --> 00:04:20,226
And the way that I made it so that we had these little

97
00:04:20,295 --> 00:04:24,296
titles right here, see these titles two, three, four, five?

98
00:04:24,365 --> 00:04:27,132
I implemented another UI table view data source method,

99
00:04:27,201 --> 00:04:28,900
this one down here.

100
00:04:28,969 --> 00:04:31,203
Called titleForHeaderInSection.

101
00:04:31,271 --> 00:04:33,437
I just put titles on the sections.

102
00:04:33,506 --> 00:04:36,974
Remember, each section is another pull from Twitter.

103
00:04:37,043 --> 00:04:38,642
And so I just have each title.

104
00:04:38,711 --> 00:04:41,377
It's actually gonna be the count of things I had minus

105
00:04:41,446 --> 00:04:42,312
the section number.

106
00:04:42,381 --> 00:04:44,146
So the top one is section zero.

107
00:04:44,215 --> 00:04:45,814
So section zero is gonna show

108
00:04:45,883 --> 00:04:47,115
the number of pulls that I've made.

109
00:04:47,184 --> 00:04:48,516
tweets.count is how many pulls I made.

110
00:04:48,585 --> 00:04:50,151
And it's obviously gonna

111
00:04:50,219 --> 00:04:51,853
decrement as the sections go down.

112
00:04:54,123 --> 00:04:57,391
Okay, so that's what gave us this.

113
00:04:57,460 --> 00:04:58,892
And you can see that the longer we wait,

114
00:04:58,961 --> 00:05:01,661
obviously it pulls more information,

115
00:05:01,730 --> 00:05:02,829
as tweets pile up.

116
00:05:04,331 --> 00:05:08,334
Okay, let's go back to our slides.

117
00:05:08,402 --> 00:05:10,202
All right, here we go.

118
00:05:10,271 --> 00:05:13,871
So Core Data is this big framework inside of iOS for

119
00:05:13,940 --> 00:05:16,574
doing object-oriented databases.

120
00:05:16,643 --> 00:05:19,409
So let's talk a little bit about what that means.

121
00:05:19,478 --> 00:05:21,545
So, when do you need a database?

122
00:05:21,613 --> 00:05:23,814
Well you need a database when you have a large amount of

123
00:05:23,882 --> 00:05:26,916
data, and especially if you want to kind of make queries

124
00:05:26,985 --> 00:05:30,153
into that data and find out things about that data and

125
00:05:30,221 --> 00:05:32,654
the relationships between all the things in there.

126
00:05:32,723 --> 00:05:34,089
You really can't do that by like,

127
00:05:34,158 --> 00:05:36,558
taking a big dictionary or a big array and

128
00:05:36,627 --> 00:05:39,627
searching through it, you need a database.

129
00:05:39,696 --> 00:05:42,797
And so there's a lot of technologies for databases out

130
00:05:42,866 --> 00:05:45,766
there but most of them are not object-oriented.

131
00:05:45,835 --> 00:05:48,769
So we have this framework that Apple provides called

132
00:05:48,837 --> 00:05:51,705
Core Data, it's what we call an object-oriented database

133
00:05:51,774 --> 00:05:55,108
but actually, it's really not an object-oriented database

134
00:05:55,177 --> 00:05:56,976
on the inside.

135
00:05:57,045 --> 00:05:59,411
It's only an object-oriented database on the outside.

136
00:05:59,480 --> 00:06:01,247
The side that you look at.

137
00:06:01,315 --> 00:06:04,950
Underneath, it's actually a relational database usually.

138
00:06:05,018 --> 00:06:08,987
Now Core Data is designed to have any backend of storage.

139
00:06:09,055 --> 00:06:11,589
But it's primary implementation is on top of

140
00:06:11,657 --> 00:06:13,957
SQL which is a relational database.

141
00:06:14,026 --> 00:06:18,061
How many people know what SQL Database is?

142
00:06:18,130 --> 00:06:19,396
Okay, almost all of you, good.

143
00:06:19,464 --> 00:06:25,268
So, if we had to do databases in our iOS apps using SQL,

144
00:06:25,336 --> 00:06:27,870
we'd be like no, I have to learn this whole query

145
00:06:27,939 --> 00:06:29,705
language, and how am I gonna do this?

146
00:06:29,774 --> 00:06:32,708
Not to worry, we don't have to know any SQL to use core Data.

147
00:06:32,776 --> 00:06:35,543
No SQL whatsoever- we're just gonna purely do this

148
00:06:35,612 --> 00:06:38,280
on the object side.

149
00:06:38,348 --> 00:06:39,380
So how does this work?

150
00:06:39,449 --> 00:06:40,380
How does core Data work?

151
00:06:40,449 --> 00:06:43,551
Well, first we're gonna create a visual mapping

152
00:06:43,619 --> 00:06:45,985
between things in our database and

153
00:06:46,054 --> 00:06:48,688
some objects that we're gonna be able to program with

154
00:06:48,757 --> 00:06:51,791
in our object-oriented code that we like.

155
00:06:51,860 --> 00:06:54,793
And kinda roughly, it's

156
00:06:54,862 --> 00:06:58,597
the tables in the database are kinda gonna be objects.

157
00:06:58,666 --> 00:07:01,833
And the columns in the tables are kind of vars.

158
00:07:01,902 --> 00:07:04,069
But we don't even really care what it's doing there.

159
00:07:04,137 --> 00:07:06,737
What we're gonna focus on is this visual map,

160
00:07:06,806 --> 00:07:10,607
this visual description basically of our schema.

161
00:07:10,676 --> 00:07:12,509
Okay, how many people know what the word schema means?

162
00:07:12,578 --> 00:07:15,812
Okay, so two-thirds of you.

163
00:07:15,881 --> 00:07:18,748
So schema is basically the description of what's

164
00:07:18,816 --> 00:07:22,218
in your database, not the contents of it but how all its

165
00:07:22,287 --> 00:07:24,687
data types are and how they relate to each other, etc.

166
00:07:24,756 --> 00:07:27,923
So we're gonna do all that graphically.

167
00:07:27,992 --> 00:07:30,325
And this is what it looks like.

168
00:07:30,394 --> 00:07:33,428
First, if I wanna use Core Data in my app,

169
00:07:33,497 --> 00:07:37,498
I'm almost certainly going to wanna click this button

170
00:07:37,567 --> 00:07:39,366
that says Use Core Data.

171
00:07:39,435 --> 00:07:41,869
We've seen it every time we've created an app, and we haven't

172
00:07:41,938 --> 00:07:43,870
clicked it so far, but now we are going to click it.

173
00:07:43,939 --> 00:07:45,872
And clicking Use Core Data there,

174
00:07:45,940 --> 00:07:48,875
is gonna create two things for us, this visual map,

175
00:07:48,943 --> 00:07:50,943
and some code in your App Delegate.

176
00:07:51,012 --> 00:07:52,878
And I'm gonna talk about both of those things.

177
00:07:52,946 --> 00:07:54,112
Now before I go to the next slide,

178
00:07:54,181 --> 00:07:56,948
notice that the name of this app is CoreDataExample.

179
00:07:57,017 --> 00:07:59,317
That's the, just the name of the app that I typed in there.

180
00:08:00,487 --> 00:08:03,386
So when I create this app, clicking that

181
00:08:03,455 --> 00:08:06,790
Use Core Data on, you'll see that it created this file,

182
00:08:06,859 --> 00:08:10,260
CoreDataExample.xcdatamodeld.

183
00:08:10,329 --> 00:08:12,395
So it chose the name of my app as it.

184
00:08:12,463 --> 00:08:16,332
And this is going to be our data model, all right?

185
00:08:16,401 --> 00:08:18,433
And so we'll, we'll talk about the AppDelegate

186
00:08:18,502 --> 00:08:21,570
code that Use Core Data also generated a little bit later.

187
00:08:21,639 --> 00:08:25,473
Right now we're gonna focus on this data model file.

188
00:08:25,542 --> 00:08:28,977
All right, but before we even do that, what happens if we

189
00:08:29,045 --> 00:08:32,413
have an existing app and you did not click Use Core Data?

190
00:08:32,482 --> 00:08:34,748
And now you decided, hey, I wanna add core data.

191
00:08:34,817 --> 00:08:38,318
Like maybe Smashtag Assignment 5 comes out and

192
00:08:38,386 --> 00:08:40,953
I tell you to add some Core Data to Smashtag.

193
00:08:41,022 --> 00:08:42,789
And you're like, woh, I can't go back and

194
00:08:42,857 --> 00:08:44,690
click Use Core Data, it's too late.

195
00:08:44,759 --> 00:08:47,726
So you're gonna have to create this data model file

196
00:08:47,794 --> 00:08:48,827
using new file.

197
00:08:48,896 --> 00:08:51,463
So you just go to File > New > File like this.

198
00:08:51,532 --> 00:08:52,830
You're not gonna pick any of

199
00:08:52,899 --> 00:08:54,465
the things we've picked so far.

200
00:08:54,533 --> 00:08:56,600
You're gonna scroll down to the section that

201
00:08:56,668 --> 00:08:57,401
says Core Data.

202
00:08:57,469 --> 00:08:59,669
And inside there these, there's two things,

203
00:08:59,738 --> 00:09:01,137
Data Model and Mapping Model.

204
00:09:01,206 --> 00:09:04,406
And make sure you pick Data Model because that's what you

205
00:09:04,475 --> 00:09:06,775
want to do here is create your data model,

206
00:09:06,844 --> 00:09:09,511
your schema essentially, for your database.

207
00:09:09,580 --> 00:09:11,179
It's gonna ask you what you wanna call it.

208
00:09:11,247 --> 00:09:13,948
Now, you don't have to call this the same as the name of

209
00:09:14,017 --> 00:09:16,484
your application like Use Core Data button does.

210
00:09:16,552 --> 00:09:17,584
You can call it anything you want.

211
00:09:17,653 --> 00:09:20,220
So here, just to be different, I've called it Model,

212
00:09:20,289 --> 00:09:21,955
it's my model.

213
00:09:22,023 --> 00:09:23,355
And by the way,

214
00:09:23,424 --> 00:09:27,994
your core data is usually the model of a lot of MVCs.

215
00:09:28,062 --> 00:09:31,429
Okay, a lot of MVCs, their job is going to be to display

216
00:09:31,498 --> 00:09:35,167
the data in the database, and so this data model is actually

217
00:09:35,236 --> 00:09:37,568
the MVC model as well for a lot of MVCs.

218
00:09:37,637 --> 00:09:39,737
So I'll call this one model, and

219
00:09:39,806 --> 00:09:42,773
you can see it created model.xedatamodeld.

220
00:09:42,842 --> 00:09:46,477
So whether you get that file by doing Use Core Data or

221
00:09:46,545 --> 00:09:48,445
whether you get it by creating it yourself,

222
00:09:48,514 --> 00:09:51,281
you're gonna have this mapping file.

223
00:09:51,350 --> 00:09:54,017
Now, let me go back to that AppDelegate thing.

224
00:09:54,085 --> 00:09:56,819
I said they was gonna put some code in your AppDelegate.

225
00:09:56,888 --> 00:09:58,954
It's very small amount of code.

226
00:09:59,023 --> 00:10:01,089
But I wanted to show it to you right here.

227
00:10:01,158 --> 00:10:02,891
This is what it looks like.

228
00:10:02,960 --> 00:10:05,794
It just creates this one var right here.

229
00:10:07,296 --> 00:10:10,130
By the way, if you didn't do Use Core Data, of course,

230
00:10:10,199 --> 00:10:12,198
you need this code in your AppDelegate,

231
00:10:12,267 --> 00:10:13,799
how are you gonna get it?

232
00:10:13,868 --> 00:10:16,669
Just go create some dummy application.

233
00:10:16,738 --> 00:10:19,405
Call it Foo, it doesn't really matter what you call it.

234
00:10:19,474 --> 00:10:21,707
Click Use Core Data when you create it and

235
00:10:21,775 --> 00:10:24,610
then copy this code from that AppDelegate to here.

236
00:10:24,678 --> 00:10:27,913
Okay, the code is identical from every app.

237
00:10:27,981 --> 00:10:31,115
The only difference between any of those things is this

238
00:10:31,183 --> 00:10:32,549
one string right here.

239
00:10:32,618 --> 00:10:33,384
You see that string?

240
00:10:33,453 --> 00:10:36,253
That's the name of that xcmodeld file, so

241
00:10:36,321 --> 00:10:37,520
datamodeld file.

242
00:10:37,589 --> 00:10:39,021
So with our core data example,

243
00:10:39,090 --> 00:10:41,190
this string would be CoreDataExample.

244
00:10:41,259 --> 00:10:43,692
When we went back and created it on our own with new file,

245
00:10:43,761 --> 00:10:45,093
of course, we called it Model.

246
00:10:45,162 --> 00:10:49,130
So just make sure this string matches the name of the file,

247
00:10:49,198 --> 00:10:53,100
the xcmodel datamodeld file, okay?

248
00:10:53,169 --> 00:10:55,736
So that's what you need to do if you didn't do the use

249
00:10:55,805 --> 00:10:57,805
Code Data originally you are going back and

250
00:10:57,874 --> 00:10:59,038
adding it- just copy and paste.

251
00:10:59,107 --> 00:11:03,509
It's only this one var really, it does provide another thing

252
00:11:03,578 --> 00:11:06,946
in your AppDelegate which is a function called saveContext.

253
00:11:07,014 --> 00:11:08,147
It's a very simple little function.

254
00:11:08,215 --> 00:11:11,016
I'm gonna show you how you could write it yourself.

255
00:11:11,085 --> 00:11:12,918
If you wanna copy it in, you can.

256
00:11:12,987 --> 00:11:16,321
Also I notice that they have applicationWillTerminate which

257
00:11:16,390 --> 00:11:18,790
is this application, AppDelegate method,

258
00:11:18,858 --> 00:11:21,592
that gets called right before you get terminated or

259
00:11:21,661 --> 00:11:24,594
you terminate it in any way and they call saveContext.

260
00:11:24,663 --> 00:11:26,129
Well, it's a kind of an idea, a good idea.

261
00:11:26,198 --> 00:11:28,198
saveContext() just saves your database.

262
00:11:28,267 --> 00:11:30,566
That's what saveContext does, all right?

263
00:11:30,635 --> 00:11:33,903
So this is how you can make up if you didn't do it.

264
00:11:33,971 --> 00:11:37,139
So anyway, you can see that the only thing in here

265
00:11:37,208 --> 00:11:39,641
is this lazy var persistentContainer, and

266
00:11:39,709 --> 00:11:41,209
I'm gonna talk all about persistentContainer,

267
00:11:41,277 --> 00:11:43,677
because that's the thing that essentially contains

268
00:11:43,746 --> 00:11:46,346
your database, all right?

269
00:11:46,415 --> 00:11:48,215
But let's go back and talk about the visual map.

270
00:11:48,284 --> 00:11:51,084
Cuz we have to have a visual map before we can do anything

271
00:11:51,153 --> 00:11:53,853
in our database because we have to have some things in

272
00:11:53,922 --> 00:11:56,556
our database, some objects and things like that.

273
00:11:56,625 --> 00:12:00,292
And Core database stores things in this kind of very

274
00:12:00,361 --> 00:12:02,027
straightforward way.

275
00:12:02,095 --> 00:12:05,764
It looks very object-oriented in our code because

276
00:12:05,833 --> 00:12:08,466
in Core Data terms it's storing entities,

277
00:12:08,535 --> 00:12:11,235
which look like classes to our code.

278
00:12:11,304 --> 00:12:14,872
Attributes, which look like vars on our classes.

279
00:12:14,940 --> 00:12:18,242
And relationship, which just look like vars that point to

280
00:12:18,310 --> 00:12:22,279
other objects in the database, other entities, etc.

281
00:12:22,348 --> 00:12:25,181
And so we're gonna use this what I'm calling a storyboard.

282
00:12:25,250 --> 00:12:26,081
It's not, don't get confused,

283
00:12:26,150 --> 00:12:27,716
this is not a storyboard, okay?

284
00:12:27,785 --> 00:12:30,319
You know what a storyboard is, your Interface Builder thing.

285
00:12:30,387 --> 00:12:32,087
But it's kind of like a storyboard,

286
00:12:32,156 --> 00:12:34,823
that's why it's in quotes for databases.

287
00:12:34,892 --> 00:12:37,224
It's a graphical, visual editor to create and

288
00:12:37,293 --> 00:12:40,427
describe all these entities, attributes and relationships,

289
00:12:40,496 --> 00:12:42,896
okay, that's what we're gonna do here.

290
00:12:42,965 --> 00:12:45,098
So let's start by adding an entity.

291
00:12:45,166 --> 00:12:48,034
Very easy, we go down to this button on the bottom here

292
00:12:48,103 --> 00:12:49,502
called Add Entity.

293
00:12:49,571 --> 00:12:51,103
Okay, to add an entity.

294
00:12:51,172 --> 00:12:53,305
By the way, there's couple other things in that if you

295
00:12:53,374 --> 00:12:55,807
hold down on that button you'll see Add Fetch Request,

296
00:12:55,875 --> 00:12:56,774
and Add Configuration.

297
00:12:56,843 --> 00:12:58,642
I don't have time to talk about those unfortunately,

298
00:12:58,711 --> 00:13:01,345
but especially Add Fetch Request is kind of a cool one.

299
00:13:01,414 --> 00:13:04,247
So, if you can take what I teach you here and extend it

300
00:13:04,316 --> 00:13:07,350
by going and learning about that, that would be great.

301
00:13:07,419 --> 00:13:08,884
So you click Add Entity,

302
00:13:08,953 --> 00:13:11,754
it creates a new entity called Entity.

303
00:13:11,822 --> 00:13:13,822
Cuz it doesn't know what name you want for it yet.

304
00:13:13,891 --> 00:13:16,491
And like I say, this analogous to a class.

305
00:13:16,560 --> 00:13:20,295
Now in our code we're gonna see any instances of this

306
00:13:20,364 --> 00:13:24,432
entity as instances of a class called NSManagedObject.

307
00:13:24,501 --> 00:13:27,235
So NSManagedObject super important in Core Data.

308
00:13:27,304 --> 00:13:29,804
It is the super class or the class of everything that

309
00:13:29,872 --> 00:13:32,773
comes, all these entities that come out of the database.

310
00:13:32,842 --> 00:13:36,142
It's like the thing that represents them in our code,

311
00:13:36,211 --> 00:13:37,710
and we'll see all about that.

312
00:13:37,779 --> 00:13:40,679
So for my kind of slides here,

313
00:13:40,748 --> 00:13:43,715
what I'm gonna do is create a database that would have

314
00:13:43,784 --> 00:13:45,384
stuff like we got from Twitter.

315
00:13:45,453 --> 00:13:46,952
So it's gonna have tweets and

316
00:13:47,021 --> 00:13:48,086
we're gonna have Twitter users.

317
00:13:48,155 --> 00:13:49,954
So those are gonna be two entities that we have and

318
00:13:50,023 --> 00:13:52,223
you're gonna see eventually, we're gonna have Tweet and

319
00:13:52,292 --> 00:13:53,557
TwitterUser classes in our code and

320
00:13:53,625 --> 00:13:55,258
we're gonna access vars and all that stuff.

321
00:13:55,327 --> 00:13:57,126
So I'm gonna rename this entity,

322
00:13:57,195 --> 00:13:59,828
this, that I added that was defaulted to entity,

323
00:13:59,897 --> 00:14:02,331
I'm gonna rename it and call it Tweet.

324
00:14:02,400 --> 00:14:04,934
So this is gonna be the first entity that I'm creating

325
00:14:05,002 --> 00:14:06,568
in the database.

326
00:14:06,636 --> 00:14:08,837
Now, an entity can have attributes.

327
00:14:08,906 --> 00:14:11,005
Those are kind of like vars, and relationships.

328
00:14:11,074 --> 00:14:14,108
Those are like vars that point to other entities.

329
00:14:14,177 --> 00:14:16,276
And I told you this fetched properties down at the bottom,

330
00:14:16,345 --> 00:14:17,144
I'm not gonna talk about.

331
00:14:17,213 --> 00:14:19,078
Very cool, but not gonna talk about them.

332
00:14:19,147 --> 00:14:21,047
Not just time-wise.

333
00:14:21,115 --> 00:14:23,315
So let's go and add some attributes to this entity.

334
00:14:23,384 --> 00:14:24,783
Real easy, you click this plus button,

335
00:14:24,852 --> 00:14:26,284
there's also an Add Attribute button,

336
00:14:26,353 --> 00:14:28,419
see it down in the lower right hand corner there.

337
00:14:28,488 --> 00:14:29,954
But I'm gonna click this little plus

338
00:14:30,023 --> 00:14:33,290
button right there under the section called Attributes.

339
00:14:33,359 --> 00:14:36,059
And when I do there it adds a new attribute called attribute

340
00:14:36,128 --> 00:14:37,927
and I'm gonna edit its name directly,

341
00:14:37,996 --> 00:14:39,495
just like I did the entity name.

342
00:14:39,564 --> 00:14:40,663
I'm gonna change this to be text.

343
00:14:40,732 --> 00:14:45,268
So, this is gonna be our tweet text, the 140 characters

344
00:14:45,336 --> 00:14:49,438
of the tweet is gonna be this particular attribute.

345
00:14:49,506 --> 00:14:53,008
Now, notice as soon as I did that, I got an error.

346
00:14:53,077 --> 00:14:55,476
In the corner there, this red error.

347
00:14:55,545 --> 00:14:56,043
And the reason for

348
00:14:56,112 --> 00:14:58,846
that is all attributes have to have a type.

349
00:14:58,914 --> 00:15:01,182
They can't just be undefined type like this one is.

350
00:15:01,250 --> 00:15:03,350
You see where it says the type is undefined.

351
00:15:03,419 --> 00:15:05,919
So, we need to change that to be a type.

352
00:15:05,988 --> 00:15:08,721
And it's really easy, right there where it says undefined.

353
00:15:08,790 --> 00:15:10,122
We're just going to mouse down,

354
00:15:10,191 --> 00:15:12,924
it's gonna bring up a menu and we can choose our type.

355
00:15:12,993 --> 00:15:15,393
Now, these are the types we have to choose from.

356
00:15:15,462 --> 00:15:18,663
A lot of different numeric types like 16-bit integers,

357
00:15:18,732 --> 00:15:20,164
32-bit integer, etc.

358
00:15:20,233 --> 00:15:23,900
Doubles, floats, can a be string of course,

359
00:15:23,969 --> 00:15:28,605
a Boolean value, a date which is going to look like a date,

360
00:15:28,674 --> 00:15:32,142
you know, the date struct in our code.

361
00:15:32,210 --> 00:15:35,445
And binary data which is gonna look like the data struct

362
00:15:35,513 --> 00:15:36,513
inside our code.

363
00:15:36,581 --> 00:15:39,782
So, these are gonna map to very familiar data types

364
00:15:39,851 --> 00:15:40,849
that we see.

365
00:15:40,918 --> 00:15:42,317
There is that one at the bottom there,

366
00:15:42,386 --> 00:15:44,919
transformable, another thing I'm not gonna talk about.

367
00:15:44,988 --> 00:15:48,322
But transformable allows you to store anything

368
00:15:48,391 --> 00:15:51,592
into the database by converting it to a data, and

369
00:15:51,661 --> 00:15:53,326
then converting it back on the way out.

370
00:15:53,395 --> 00:15:54,728
And so if you pick transformable there,

371
00:15:54,797 --> 00:15:56,729
you're gonna have to do some extra work.

372
00:15:56,798 --> 00:15:59,599
To tell Core Data about that transformation, and that's why

373
00:15:59,668 --> 00:16:02,001
I don't really have time to tell you about, but just know

374
00:16:02,070 --> 00:16:04,003
that if you wanted to store something like a CGRect.

375
00:16:04,071 --> 00:16:07,539
Actually, if I was going to store a CGRect, I might use

376
00:16:07,607 --> 00:16:09,841
the function, there's some function called something like

377
00:16:11,344 --> 00:16:13,143
NSStringFromCGRect.

378
00:16:13,212 --> 00:16:14,278
It gives you a string, and

379
00:16:14,346 --> 00:16:16,112
then there's NSCGRectFromString or

380
00:16:16,181 --> 00:16:16,746
something like that.

381
00:16:16,815 --> 00:16:18,047
So I'd probably store it as a string,

382
00:16:18,115 --> 00:16:20,482
but if I had something more complicated than that,

383
00:16:20,551 --> 00:16:21,783
then I might use a transformable.

384
00:16:21,852 --> 00:16:27,388
All right, these attributes here are going to be accessed,

385
00:16:27,457 --> 00:16:29,390
we're gonna get and set their values.

386
00:16:29,459 --> 00:16:32,159
Well actually, we're not going to do this but fundamentally

387
00:16:32,228 --> 00:16:34,595
the way you do it is you have these two methods,

388
00:16:34,664 --> 00:16:36,430
value(forKey) and setValue (forKey).

389
00:16:36,498 --> 00:16:38,598
And I'll talk about how we're gonna use that, but

390
00:16:38,667 --> 00:16:43,036
that's how we're gonna set and get the values on an entity.

391
00:16:43,105 --> 00:16:44,971
Notice the error went away as soon as we

392
00:16:45,040 --> 00:16:47,239
gave this thing, a type.

393
00:16:47,308 --> 00:16:50,709
So here I'm gonna add some more attributes, identifier,

394
00:16:50,777 --> 00:16:52,978
which is just some string that identifies the tweet and

395
00:16:53,046 --> 00:16:55,714
then created, which was when it was tweeted.

396
00:16:55,782 --> 00:17:00,251
Notice I'm setting created's type here to be date because

397
00:17:00,320 --> 00:17:03,287
it is a date, obviously, when the thing was created.

398
00:17:03,356 --> 00:17:06,189
Now this is one way to look at our entities and attributes,

399
00:17:06,258 --> 00:17:07,257
this kind of table form.

400
00:17:07,326 --> 00:17:09,859
But we can actually look at it in graphical form as well.

401
00:17:09,928 --> 00:17:12,094
If you see down in the corner where it says editor style.

402
00:17:12,163 --> 00:17:13,829
If I click on the other button there,

403
00:17:13,898 --> 00:17:15,965
the one that looks a little more like a graph,

404
00:17:16,033 --> 00:17:17,832
then it shows me the same thing but

405
00:17:17,901 --> 00:17:18,867
in this graphical form.

406
00:17:18,936 --> 00:17:21,335
It's even on graph paper, all right?

407
00:17:21,404 --> 00:17:24,105
And in this form right here we can do

408
00:17:24,173 --> 00:17:25,806
all the things that we did in the other one.

409
00:17:25,875 --> 00:17:27,941
For example, I can still add entity here.

410
00:17:28,010 --> 00:17:30,543
So I'm gonna add another entity for my Twitter User,

411
00:17:30,612 --> 00:17:32,244
this is people who tweet.

412
00:17:32,313 --> 00:17:34,112
And there it is, it called it entity again,

413
00:17:34,181 --> 00:17:35,280
that's the default.

414
00:17:35,349 --> 00:17:38,583
We'll set its name to be TwitterUser.

415
00:17:38,652 --> 00:17:40,986
All right, so we now have two entities, you see on there.

416
00:17:41,054 --> 00:17:44,289
What's kinda cool is as you drag these entities around,

417
00:17:44,358 --> 00:17:47,191
this, this kind of editor, this graphical

418
00:17:47,259 --> 00:17:49,727
editor, will automatically kind of keep them spaced apart

419
00:17:49,795 --> 00:17:50,594
from each other.

420
00:17:50,663 --> 00:17:52,595
Which is kind of fun, especially since they're going

421
00:17:52,664 --> 00:17:54,497
to start having wires connecting them because

422
00:17:54,566 --> 00:17:56,332
they're going to start having relationships

423
00:17:56,400 --> 00:17:59,668
to each other as you're going to see in a moment.

424
00:17:59,737 --> 00:18:02,871
We can add attributes in this graphical style as well- you

425
00:18:02,939 --> 00:18:05,874
can edit those right in there just by double clicking on

426
00:18:05,943 --> 00:18:07,809
them, change whatever you want.

427
00:18:07,877 --> 00:18:11,078
So, here I got a screenName, now of course I got an error

428
00:18:11,147 --> 00:18:14,014
again because I didn't set the type of that screenName.

429
00:18:14,083 --> 00:18:17,350
So, in this view you set the types by bringing up

430
00:18:17,419 --> 00:18:18,017
the inspector.

431
00:18:18,086 --> 00:18:20,286
So you just bring up your normal inspector,

432
00:18:20,355 --> 00:18:21,553
attribute inspector.

433
00:18:21,622 --> 00:18:23,755
And the, here you can see it's inspecting screenName,

434
00:18:23,824 --> 00:18:25,357
it's got the name there.

435
00:18:25,425 --> 00:18:27,625
There's some other things in here like transient,

436
00:18:27,694 --> 00:18:28,626
indexed, optional.

437
00:18:28,694 --> 00:18:31,395
By the way, that optional doesn't mean this is optional

438
00:18:31,464 --> 00:18:33,664
like the Swift thing optional.

439
00:18:33,732 --> 00:18:37,233
This is optional like in SQL database terms, right.

440
00:18:37,302 --> 00:18:39,469
In relational database optional.

441
00:18:39,538 --> 00:18:42,004
So I'm not gonna talk about any of the database

442
00:18:42,073 --> 00:18:43,539
You rarely need to set any of these properties right here.

443
00:18:43,540 --> 00:18:45,006
stuff of it.

444
00:18:46,743 --> 00:18:47,942
But you do need to set the type.

445
00:18:48,011 --> 00:18:49,143
So we're not gonna talk about that, but

446
00:18:49,211 --> 00:18:51,279
we have to set the type right here.

447
00:18:51,347 --> 00:18:53,280
And the screenName, of course, is a string.

448
00:18:53,349 --> 00:18:56,116
So I'm just gonna change it to a string.

449
00:18:56,185 --> 00:18:59,652
I'm adding another attribute to the TwitterUser,

450
00:18:59,721 --> 00:19:03,056
this one is the name, the person's actual name,

451
00:19:03,125 --> 00:19:06,458
not their @ sign handle, but their actual name.

452
00:19:06,527 --> 00:19:09,327
Now we've built a couple of entities with a bunch of

453
00:19:09,396 --> 00:19:12,030
attributes on them, okay, and this is gonna look like

454
00:19:12,099 --> 00:19:15,767
classes with vars in our code eventually.

455
00:19:15,836 --> 00:19:19,003
But what about relationships, obviously a Tweet and

456
00:19:19,072 --> 00:19:22,774
a TwitterUser have a relationship to each other.

457
00:19:22,842 --> 00:19:25,209
And to create relationships between things we just

458
00:19:25,278 --> 00:19:28,145
Ctrl+drag, this is our favorite gesture in Xcode and

459
00:19:28,213 --> 00:19:28,945
we're using it again.

460
00:19:29,013 --> 00:19:31,780
Ctrl+drag to create a relationship

461
00:19:31,849 --> 00:19:32,648
between two things.

462
00:19:32,717 --> 00:19:36,151
And it actually doesn't matter which direction you Ctrl+drag,

463
00:19:36,220 --> 00:19:38,820
because you're creating kind of a bidirectional

464
00:19:38,889 --> 00:19:40,388
relationship.

465
00:19:40,457 --> 00:19:43,057
So here, I did Ctrl+drag, and it automatically created this

466
00:19:43,126 --> 00:19:47,829
relationship, which it called newRelationship on both sides.

467
00:19:47,897 --> 00:19:52,766
And this relationship is essentially just gonna be

468
00:19:52,835 --> 00:19:54,768
a var in our class.

469
00:19:54,837 --> 00:19:59,071
But the var's type is either going to be the type, if it's

470
00:19:59,140 --> 00:20:01,508
like a Tweet, you know, it's gonna be a single one, or

471
00:20:01,576 --> 00:20:04,343
it could be an NSSet, if it's many of them.

472
00:20:04,412 --> 00:20:06,679
Like a Twitter user might have many tweets, and

473
00:20:06,747 --> 00:20:08,781
I'll talk about that in a moment.

474
00:20:08,849 --> 00:20:12,383
So, from a Tweet's perspective this relationship to

475
00:20:12,452 --> 00:20:14,419
a TwitterUser is the Tweeter.

476
00:20:14,487 --> 00:20:16,821
The person who tweeted this tweet.

477
00:20:16,889 --> 00:20:19,557
So, I'm going to change the name of this relationship on

478
00:20:19,625 --> 00:20:24,027
the Tweet side to be tweeter instead of newRelationship,

479
00:20:24,095 --> 00:20:25,361
which was the default.

480
00:20:25,430 --> 00:20:27,763
But, on the other, okay, so that's why I call it tweeter.

481
00:20:27,832 --> 00:20:29,865
On the other side the TwitterUser from its

482
00:20:29,934 --> 00:20:33,502
perspective though, okay, the relationship of the tweet is

483
00:20:33,571 --> 00:20:35,737
the tweets that this Twitter user has tweeted.

484
00:20:35,805 --> 00:20:38,840
Okay, it's not tweeter, the Twitter user is the tweeter,

485
00:20:38,909 --> 00:20:41,342
so he would never call this relationship tweeter.

486
00:20:41,411 --> 00:20:44,277
He's gonna call this relationship tweets

487
00:20:44,346 --> 00:20:46,213
because this is the tweet.

488
00:20:46,282 --> 00:20:47,748
Now notice that's plural, okay,

489
00:20:47,816 --> 00:20:50,583
we'll talk about that in a second.

490
00:20:50,652 --> 00:20:54,186
Notice that when we do this, Xcode tracks if I'm inspecting

491
00:20:54,255 --> 00:20:57,423
the tweet's relationship there on the TwitterUser side,

492
00:20:57,491 --> 00:20:58,858
it knows the inverse.

493
00:20:58,926 --> 00:21:00,759
It knows that tweeter goes the opposite direction,

494
00:21:00,828 --> 00:21:02,828
there's always gonna be an inverse relationship.

495
00:21:04,631 --> 00:21:07,264
So let's talk about that tweets being a plural right?

496
00:21:07,333 --> 00:21:10,100
So a tweet can only have one tweeter.

497
00:21:10,169 --> 00:21:12,002
Only one person can have tweeted it, but

498
00:21:12,070 --> 00:21:16,873
a Twitter user can tweet thousands of tweets, okay?

499
00:21:16,942 --> 00:21:18,474
And so that's a little different

500
00:21:18,542 --> 00:21:19,374
kind of relationship.

501
00:21:19,443 --> 00:21:21,410
So how do we specify that?

502
00:21:21,479 --> 00:21:24,679
We call the tweets relationship the,

503
00:21:24,748 --> 00:21:27,915
a to many relationship because obviously the Twitter

504
00:21:27,984 --> 00:21:29,951
user can have many tweets.

505
00:21:30,019 --> 00:21:32,953
So that's called to many in database parlance, and

506
00:21:33,022 --> 00:21:34,321
you set that right in the Inspector.

507
00:21:34,390 --> 00:21:36,123
So you just click on that tweets and

508
00:21:36,192 --> 00:21:37,690
you go over here to where it says Type,

509
00:21:37,759 --> 00:21:40,927
and instead of having it be To One you're gonna change it

510
00:21:40,995 --> 00:21:43,962
to be To Many, okay, so now it's a to many relationship.

511
00:21:44,031 --> 00:21:49,568
Right there, you can see that it's changed a little bit as,

512
00:21:49,637 --> 00:21:51,336
and we'll show that in a second.

513
00:21:51,404 --> 00:21:54,339
But the type of this relationship now on the tweet

514
00:21:54,407 --> 00:21:57,909
side is still type NSManagedObject,

515
00:21:57,978 --> 00:22:00,111
because it points to another entity in the database.

516
00:22:00,179 --> 00:22:02,279
And we know that the objects in the database

517
00:22:02,348 --> 00:22:04,081
are represented by an NSManagedObject.

518
00:22:04,150 --> 00:22:06,783
So that's gonna be the type of that var.

519
00:22:06,851 --> 00:22:09,118
Although we're eventually gonna make it even better than

520
00:22:09,187 --> 00:22:11,420
that, but on the other side though,

521
00:22:11,488 --> 00:22:17,493
the type of that var is NSSet of NSManagedObject, okay?

522
00:22:17,562 --> 00:22:23,598
Now NSSet, there is a Swift struct called set.

523
00:22:23,667 --> 00:22:25,766
It's a generic type, it's just like an array where you have

524
00:22:25,835 --> 00:22:26,667
to say what's in an array,

525
00:22:26,736 --> 00:22:29,270
same thing with a set you have to say what's in it.

526
00:22:29,338 --> 00:22:33,240
NSSet is kind of an older Objective-C kind of set.

527
00:22:33,309 --> 00:22:35,375
It's not generic, it's untyped.

528
00:22:35,443 --> 00:22:39,212
The things in NSSet are any, which we kinda need a little

529
00:22:39,281 --> 00:22:42,214
bit here cuz we really don't know what kinds of things

530
00:22:42,283 --> 00:22:43,149
are in there.

531
00:22:43,217 --> 00:22:47,619
However, in your code you can cast from this NSSet

532
00:22:47,688 --> 00:22:51,656
of NSManagedObject to a set of what you know to be in there

533
00:22:51,725 --> 00:22:53,158
using as question mark, and

534
00:22:53,226 --> 00:22:55,293
if that in fact is what's in there, it will work.

535
00:22:57,296 --> 00:22:58,462
So that's the NSSet there.

536
00:22:59,664 --> 00:23:01,164
One last thing I'm gonna show you here before

537
00:23:01,233 --> 00:23:04,300
we get back to the slides is this Delete Rule.

538
00:23:04,369 --> 00:23:06,268
You see the delete rule on the,

539
00:23:06,337 --> 00:23:10,005
clicked on tweets on here so we're inspecting tweets.

540
00:23:10,074 --> 00:23:13,608
And this delete rule tells you what happens

541
00:23:13,677 --> 00:23:17,979
to the pointed-to tweets if we deleted this Twitter user.

542
00:23:18,047 --> 00:23:19,880
Cuz if I delete this Twitter user,

543
00:23:19,949 --> 00:23:23,417
does that mean I delete all of the Twitter user's tweets?

544
00:23:23,486 --> 00:23:26,287
Well, it depends on this delete rule right here.

545
00:23:26,355 --> 00:23:27,821
this delete rule is saying nullify, which would mean no.

546
00:23:27,822 --> 00:23:29,288
So right now,

547
00:23:29,358 --> 00:23:32,091
Those tweets would stay in the database, and their tweeter

548
00:23:32,160 --> 00:23:35,261
will be set to nil because their tweeter got deleted.

549
00:23:35,330 --> 00:23:37,829
But there is a cascading delete rule, which would say

550
00:23:37,898 --> 00:23:40,332
if I delete this thing then delete everything that it

551
00:23:40,401 --> 00:23:42,367
points to, just go right down the graph and

552
00:23:42,436 --> 00:23:43,434
delete everything.

553
00:23:43,503 --> 00:23:46,170
So that's what controls what happens when you delete.

554
00:23:46,238 --> 00:23:48,405
Now I'm not gonna ask you to even do delete;

555
00:23:48,474 --> 00:23:51,141
I guess I might ask you an extra credit to do delete in

556
00:23:51,209 --> 00:23:52,141
assignment five.

557
00:23:52,210 --> 00:23:54,744
Because deletion kinda- you're really gonna know what

558
00:23:54,812 --> 00:23:56,612
you're doing- when you can delete things, and

559
00:23:56,681 --> 00:23:58,413
what kind of delete rules you want.

560
00:23:58,482 --> 00:24:00,215
But I just want to let you know that you specify

561
00:24:00,283 --> 00:24:02,317
the delete rule right here in the inspector.

562
00:24:03,986 --> 00:24:07,955
Okay, now that you've defined all your entities, attributes

563
00:24:08,023 --> 00:24:11,792
in relationships, then what can we do with these things?

564
00:24:11,861 --> 00:24:15,462
Well to do anything with it we need to get a hold of them

565
00:24:15,531 --> 00:24:18,531
in our code, grab onto them basically, and

566
00:24:18,600 --> 00:24:20,466
to do that we need another important class,

567
00:24:20,535 --> 00:24:23,502
NSManagedObjectContext, so I told you

568
00:24:23,571 --> 00:24:26,071
all those things in the database are NSManagedObjects,

569
00:24:26,139 --> 00:24:28,206
you need an NSManagedObjectContext,

570
00:24:28,275 --> 00:24:32,009
which represents a database to do anything with them,

571
00:24:32,078 --> 00:24:34,578
to get any of them, to create any of them, etc,

572
00:24:34,647 --> 00:24:37,381
this is the hub around which Core Data activity turns,

573
00:24:37,449 --> 00:24:38,615
as I say there.

574
00:24:38,684 --> 00:24:41,185
So how do I get one of these NSManagedObjectContext?

575
00:24:41,253 --> 00:24:43,920
And the answer is, you need a persistentContainer.

576
00:24:43,989 --> 00:24:46,623
Woo-hoo, and you know where to get one of those.

577
00:24:46,691 --> 00:24:48,190
You just click, Use Core Data, and

578
00:24:48,259 --> 00:24:49,858
it's gonna appear in your AppDelegate.

579
00:24:49,927 --> 00:24:51,693
You're gonna get that lazy var,

580
00:24:51,761 --> 00:24:53,461
that's called persistentContainer.

581
00:24:53,530 --> 00:24:55,262
And that is gonna be a persistentContainer.

582
00:24:55,331 --> 00:24:57,431
And from that you can get the context.

583
00:24:57,499 --> 00:25:00,568
Now, if you have the lazy var in your AppDelegate,

584
00:25:00,636 --> 00:25:02,636
How the heck do you call that var?

585
00:25:02,705 --> 00:25:04,003
How do you get that var?

586
00:25:04,072 --> 00:25:05,571
And this is how you do it, okay?

587
00:25:05,640 --> 00:25:10,009
You get a copy of the shared UIApplication, now,

588
00:25:10,077 --> 00:25:12,678
we didn't talk about this but your app has this one and

589
00:25:12,747 --> 00:25:16,415
only UIApplication object that represents your application

590
00:25:16,484 --> 00:25:19,784
and you get it by doing UIApplication.shared,

591
00:25:19,853 --> 00:25:20,919
it's a var.

592
00:25:20,987 --> 00:25:23,887
Static var in UIApplication class.

593
00:25:23,956 --> 00:25:24,955
Gives you the shared one.

594
00:25:25,024 --> 00:25:28,191
Then you're gonna access this var in UIApplication which is

595
00:25:28,260 --> 00:25:29,159
its delegate.

596
00:25:30,528 --> 00:25:32,762
Now, its delegate is automatically set up for

597
00:25:32,830 --> 00:25:35,597
you to be this Swift class AppDelegate that you see

598
00:25:35,666 --> 00:25:37,999
always; we always put it off in Supporting Files and

599
00:25:38,068 --> 00:25:40,134
get it out of our way, but it's created for you,

600
00:25:40,203 --> 00:25:41,035
it's a nice little class.

601
00:25:41,104 --> 00:25:43,604
We're going to talk about the application life cycle, and

602
00:25:43,672 --> 00:25:46,707
where it fits in, in a little bit, but for now all

603
00:25:46,776 --> 00:25:49,542
you need to know is you can get AppDelegate, and you want

604
00:25:49,611 --> 00:25:52,845
to send persistentContainer to it to get that var, but of

605
00:25:52,914 --> 00:25:57,450
course you have to as it to be the AppDelegate class first.

606
00:25:57,519 --> 00:25:58,885
So this is the code you're going to use.

607
00:25:58,953 --> 00:26:01,120
(UIApplication.shared.delegate as!

608
00:26:01,189 --> 00:26:03,956
AppDelegate) All that in one expression

609
00:26:04,024 --> 00:26:06,758
dot persistentContainer now you're gonna get this

610
00:26:06,826 --> 00:26:09,794
persistentContainer, and notice I'm doing as

611
00:26:09,862 --> 00:26:12,863
exclamation point this will crash if my App Delegate is

612
00:26:12,932 --> 00:26:15,866
not in fact App Delegate, but it's already wired up

613
00:26:15,934 --> 00:26:18,669
to be that for you when you create a new project,

614
00:26:18,737 --> 00:26:20,103
so that should never be a problem.

615
00:26:21,306 --> 00:26:21,770
Okay? So

616
00:26:21,839 --> 00:26:24,640
now I have this persistentContainer,

617
00:26:24,709 --> 00:26:27,275
I need to get the context out of it.

618
00:26:27,344 --> 00:26:28,643
And, so,

619
00:26:28,712 --> 00:26:33,281
the container has an awesome var called viewContext.

620
00:26:33,349 --> 00:26:36,684
And the viewContext is an NSManagedObjectContext that's

621
00:26:36,753 --> 00:26:39,620
only suitable for use on the main queue.

622
00:26:39,688 --> 00:26:40,520
This is in red,

623
00:26:40,588 --> 00:26:42,956
you know whenever you see anything in red on my slides,

624
00:26:43,024 --> 00:26:45,191
this means pay attention, it will matter for

625
00:26:45,260 --> 00:26:47,960
your homework, and in life, but

626
00:26:48,029 --> 00:26:51,029
you can only use this viewContext in the main queue,

627
00:26:51,098 --> 00:26:54,333
it called viewContext because you use it with your views,

628
00:26:54,401 --> 00:26:57,869
okay, your UI views, that's why we call it viewContext.

629
00:26:59,706 --> 00:27:02,773
So why do I make a point about this main queue?

630
00:27:02,842 --> 00:27:05,809
Well, the reason I do that is because NSManagedObjectContext

631
00:27:05,878 --> 00:27:07,744
is not thread-safe.

632
00:27:07,813 --> 00:27:10,747
But I'm gonna talk you, talk to you about how we can do

633
00:27:10,816 --> 00:27:13,883
multithreaded database stuff towards the end of this talk.

634
00:27:13,951 --> 00:27:16,552
All right, so now you have this viewContext then you can

635
00:27:16,621 --> 00:27:18,020
use it to do things.

636
00:27:18,089 --> 00:27:21,690
Now, it's so

637
00:27:21,759 --> 00:27:23,892
{UIApplication.shared.delegate as!

638
00:27:23,960 --> 00:27:26,027
Appdelegate).persistentContai- ner,

639
00:27:26,096 --> 00:27:27,394
that's kind of a messy line of code.

640
00:27:27,463 --> 00:27:30,330
There's a lot of, there's as and all these things in there.

641
00:27:30,399 --> 00:27:34,100
So at times we'll just create a static version of

642
00:27:34,169 --> 00:27:37,537
persistentContainer in our AppDelegate.

643
00:27:37,606 --> 00:27:39,138
Okay, we'll just call it the same thing.

644
00:27:39,207 --> 00:27:41,307
persistentContainer but it's static and

645
00:27:41,376 --> 00:27:43,776
it's just gonna return that messy line of code.

646
00:27:43,845 --> 00:27:46,011
So now we can get that persistentContainer with

647
00:27:46,079 --> 00:27:48,747
AppDelegate.persistentContai- ner.

648
00:27:48,815 --> 00:27:50,248
See what I did there?

649
00:27:50,317 --> 00:27:52,683
I just made it easier to get up by making that be a static,

650
00:27:52,752 --> 00:27:56,153
a class var, and we can do the same thing with viewContext,

651
00:27:56,222 --> 00:27:59,455
you might create a static called viewContext and for

652
00:27:59,524 --> 00:28:02,092
the rest of these slides you can assume I've done this.

653
00:28:02,160 --> 00:28:04,793
Which is good because typing that long messy thing would

654
00:28:04,862 --> 00:28:07,563
make all my slides spill over the edge.

655
00:28:07,632 --> 00:28:09,831
So I'm gonna use this shorter version as well.

656
00:28:09,900 --> 00:28:11,300
And you're welcome to create the static

657
00:28:11,369 --> 00:28:13,201
version in your AppDelegate if you want

658
00:28:13,270 --> 00:28:14,568
to make your code a little cleaner.

659
00:28:14,637 --> 00:28:17,104
Now this viewContext in the persistentContainer

660
00:28:17,173 --> 00:28:18,456
There's one of them that represents your entire

661
00:28:18,457 --> 00:28:19,740
are shared.

662
00:28:19,808 --> 00:28:20,573
database.

663
00:28:20,642 --> 00:28:22,709
So it's perfectly fine to create a single static

664
00:28:22,777 --> 00:28:23,643
that does this.

665
00:28:23,711 --> 00:28:26,178
By the way, what if you wanted multiple databases?

666
00:28:26,246 --> 00:28:27,679
You could even have multiple databases with

667
00:28:27,748 --> 00:28:29,180
different schema.

668
00:28:29,249 --> 00:28:31,316
Very easy, if you go look at the code for

669
00:28:31,384 --> 00:28:34,819
persistentContainer in AppDelegate,

670
00:28:34,887 --> 00:28:37,087
you'll see it's only like four lines of code.

671
00:28:37,156 --> 00:28:39,289
And you could just copy it to create a different

672
00:28:39,358 --> 00:28:42,759
persistentContainer using a different xcmodeld file.

673
00:28:42,828 --> 00:28:45,295
Instead of using model according to the example,

674
00:28:45,363 --> 00:28:46,828
create another one with a different one and

675
00:28:46,897 --> 00:28:50,399
you can just go file, new file and create another data model.

676
00:28:50,468 --> 00:28:54,403
You could even create two persistent containers with

677
00:28:54,471 --> 00:28:55,904
the same model.

678
00:28:55,973 --> 00:28:58,006
So they would be separate databases, but

679
00:28:58,074 --> 00:28:59,640
have the same model, the same entities to that and

680
00:28:59,709 --> 00:29:00,674
the same relationship to that.

681
00:29:00,743 --> 00:29:02,309
It's perfectly allowed as well.

682
00:29:02,377 --> 00:29:04,243
But for everything you're going to do in this class, and

683
00:29:04,312 --> 00:29:05,444
for really with most apps,

684
00:29:05,513 --> 00:29:08,046
you're going to have one big database.

685
00:29:08,115 --> 00:29:10,582
And you're going to have this one persistent container that

686
00:29:10,651 --> 00:29:12,384
is the container for it.

687
00:29:12,452 --> 00:29:14,452
All right.

688
00:29:14,521 --> 00:29:18,055
So now I have a context in my hand, this viewContext.

689
00:29:18,124 --> 00:29:19,023
And what can I do?

690
00:29:19,091 --> 00:29:21,391
Well, of course, I can insert objects into the database.

691
00:29:21,460 --> 00:29:23,227
I can delete objects from the database.

692
00:29:23,295 --> 00:29:25,361
And I can query for objects in the database.

693
00:29:25,430 --> 00:29:26,662
So, let's talk about all those things.

694
00:29:26,731 --> 00:29:29,765
Let's start with insert because until we insert some

695
00:29:29,834 --> 00:29:32,267
data in the database we can't do any of those other things.

696
00:29:32,336 --> 00:29:35,136
And the way you insert an object in the database, or

697
00:29:35,205 --> 00:29:36,538
a way to do it, and actually for

698
00:29:36,607 --> 00:29:39,107
the next few slide I'm going to kind of show you the,

699
00:29:39,175 --> 00:29:40,741
the essentials.

700
00:29:40,810 --> 00:29:43,843
But, we're eventually going to move up to a high level and

701
00:29:43,912 --> 00:29:46,479
access this stuff in a much nicer way.

702
00:29:46,548 --> 00:29:48,414
But I'll tell you the basics of it first.

703
00:29:48,483 --> 00:29:51,117
So the basic way to put something in the database is

704
00:29:51,186 --> 00:29:53,252
with this really interesting method.

705
00:29:53,321 --> 00:29:57,923
NSEntityDescription.insertNew- Object(forEntityName: into:

706
00:29:57,991 --> 00:29:59,624
context).

707
00:29:59,693 --> 00:30:02,260
Okay, that's a mouthful, used to be even more of a mouthful

708
00:30:02,329 --> 00:30:04,128
before they renamed it.

709
00:30:04,197 --> 00:30:08,366
And you just specify the name of the entity, so

710
00:30:08,434 --> 00:30:09,933
Tweet or TwitterUser.

711
00:30:10,002 --> 00:30:12,435
And you give it a context that is gonna be the viewContext

712
00:30:12,504 --> 00:30:13,570
you got from the AppDelegate.

713
00:30:13,639 --> 00:30:15,871
And boom, it's gonna create one of these in the database.

714
00:30:15,940 --> 00:30:19,708
Now all of its attributes will be nil.

715
00:30:19,777 --> 00:30:21,810
Okay, although you can inspect the attributes in

716
00:30:21,879 --> 00:30:24,313
the data model editor and specify default value.

717
00:30:24,381 --> 00:30:26,848
And so it might start out with the default value.

718
00:30:26,917 --> 00:30:30,785
But if it doesn't, then they'll start out as nil.

719
00:30:30,853 --> 00:30:34,055
Okay, so that's great.

720
00:30:34,123 --> 00:30:36,323
I can now create one.

721
00:30:36,392 --> 00:30:40,460
And now I need to set those vars to have some value.

722
00:30:40,529 --> 00:30:43,496
I need to set the text of the tweet and things like that and

723
00:30:43,565 --> 00:30:46,465
I told you I'm gonna do this with value for key and

724
00:30:46,534 --> 00:30:48,867
set value for key.

725
00:30:48,936 --> 00:30:53,872
So for example I wanted to set the let's say the text,

726
00:30:53,941 --> 00:30:56,074
I could just say tweet.

727
00:30:56,143 --> 00:31:00,212
A set value for key quote text, to be a string.

728
00:31:03,817 --> 00:31:06,117
And you can do dot notation here, with value for key path.

729
00:31:06,186 --> 00:31:08,318
That's what I'm showing in green right there.

730
00:31:08,387 --> 00:31:10,754
You can have, if you had a tweet you can actually set

731
00:31:10,823 --> 00:31:15,325
the tweet's tweeter's name, using this dot notation to set

732
00:31:15,394 --> 00:31:17,761
value for key path tweeter dot name and it would go through

733
00:31:17,829 --> 00:31:20,696
the tweeter relationship which is kinda fun.

734
00:31:20,765 --> 00:31:23,198
I'm kinda going fast through this because this is a really

735
00:31:23,267 --> 00:31:25,333
terrible API.

736
00:31:25,402 --> 00:31:27,502
First of all it's got any in there so

737
00:31:27,571 --> 00:31:30,070
there's not type checking going on here, okay?

738
00:31:30,139 --> 00:31:37,311
You could say, set value date for key quote text, all right?

739
00:31:37,380 --> 00:31:39,480
And that would be perfectly accepted by Swift.

740
00:31:39,549 --> 00:31:43,617
Date is an Any and quote text is a String, but

741
00:31:43,685 --> 00:31:46,452
of course that's gonna fail miserably at run time, okay,

742
00:31:46,521 --> 00:31:48,087
because the text is a Atring.

743
00:31:48,155 --> 00:31:50,822
So we're not really gonna use this API but this is

744
00:31:50,891 --> 00:31:55,561
the underlying basic way that Core Data is doing this.

745
00:31:55,629 --> 00:31:57,695
Yes the key is just the name of the attribute, and

746
00:31:57,764 --> 00:32:00,732
the value is all the things we've talked about before.

747
00:32:02,769 --> 00:32:04,769
I do have the blue Use Scalar Type there which

748
00:32:04,837 --> 00:32:05,536
is interesting.

749
00:32:05,604 --> 00:32:09,839
If the thing you're putting in the database is a flow or

750
00:32:09,908 --> 00:32:12,575
an Int32 or one of these things.

751
00:32:12,644 --> 00:32:15,678
It's actually gonna be stored in a database as an NSNumber,

752
00:32:15,747 --> 00:32:16,879
which is a class,

753
00:32:16,947 --> 00:32:20,515
it's an object, kind of generic holder of numbers.

754
00:32:20,584 --> 00:32:25,320
But if you flip on the switch in the inspector in your data

755
00:32:25,389 --> 00:32:28,689
modeller for that attribute saying use a scalar type,

756
00:32:28,758 --> 00:32:32,360
then it'll make the type be double or int or whatever,

757
00:32:32,429 --> 00:32:33,394
instead of NSNumber, so.

758
00:32:33,463 --> 00:32:35,596
I know, you had a question?

759
00:32:35,664 --> 00:32:38,298
>> Yes, so the question is, does set value reject

760
00:32:38,367 --> 00:32:39,799
something where the types don't match?

761
00:32:39,868 --> 00:32:41,434
And the answer is, it can't.

762
00:32:41,502 --> 00:32:43,702
It doesn't know the type, the types are any,

763
00:32:43,771 --> 00:32:46,138
as long as it matches any- and everything matches any.

764
00:32:46,207 --> 00:32:47,939
So, it can't.

765
00:32:48,008 --> 00:32:52,577
There's no way for it to have enough information to reject.

766
00:32:52,645 --> 00:32:55,079
As long as it matches any, it'll accept that as the type.

767
00:32:55,147 --> 00:32:56,447
And then at runtime, it will crash.

768
00:32:56,515 --> 00:32:59,216
If you try to set a date to be into a string field.

769
00:32:59,285 --> 00:33:03,553
>> So when it's like [INAUDIBLE]

770
00:33:03,622 --> 00:33:06,856
save context,

771
00:33:06,925 --> 00:33:09,125
do you have to like make it go through.

772
00:33:09,193 --> 00:33:10,293
Or is it. >> Go and remove.

773
00:33:10,361 --> 00:33:11,660
>> [CROSSTALK] >> What do you

774
00:33:11,728 --> 00:33:12,794
mean go and remove it?

775
00:33:12,863 --> 00:33:13,428
Remove what?

776
00:33:21,971 --> 00:33:23,604
Yeah, we'll talk about saving in this.

777
00:33:23,673 --> 00:33:24,638
So, the question is,

778
00:33:24,707 --> 00:33:26,773
when the app terminates it does save context and

779
00:33:26,842 --> 00:33:29,609
they're trying to save this, we'll talk all about saving in

780
00:33:29,677 --> 00:33:31,944
a minute cause that's an important piece of this.

781
00:33:32,013 --> 00:33:35,247
That's the keys and values, pretty straightforward there;

782
00:33:35,316 --> 00:33:38,150
in fact we're going to talk about saving right now.

783
00:33:38,218 --> 00:33:39,885
We do a nice lead in.

784
00:33:39,953 --> 00:33:43,020
All these changes that you make with that set value even

785
00:33:43,089 --> 00:33:45,123
insert entity description for

786
00:33:45,191 --> 00:33:48,125
entity name context whatever that thing is called.

787
00:33:48,194 --> 00:33:50,728
All that stuff only happens in memory,

788
00:33:50,796 --> 00:33:53,796
if you want that to actually happen permanently in

789
00:33:53,865 --> 00:33:55,998
the database you need to save it.

790
00:33:56,067 --> 00:33:58,233
And you do that by telling the context,

791
00:33:58,302 --> 00:34:01,370
like that view context thing, to save with the method save.

792
00:34:01,438 --> 00:34:04,240
It couldn't be simpler, except that it can throw.

793
00:34:05,910 --> 00:34:07,842
Save is a method that can throw because

794
00:34:07,911 --> 00:34:10,144
maybe there's a problem writing out to the database.

795
00:34:10,213 --> 00:34:12,880
And there's many problems that could happen writing

796
00:34:12,949 --> 00:34:14,448
out to the database.

797
00:34:14,517 --> 00:34:15,882
And you need to look at documentation and

798
00:34:15,951 --> 00:34:17,783
kind of figure out what they all are.

799
00:34:17,852 --> 00:34:20,687
But the take home message here is you do need to save.

800
00:34:20,755 --> 00:34:23,189
If you don't save, that substance is gonna be lost

801
00:34:23,257 --> 00:34:25,324
when your app exists or whatever.

802
00:34:25,393 --> 00:34:26,558
So you definitely just save.

803
00:34:26,627 --> 00:34:29,627
And especially when talking about multithreaded Core Data.

804
00:34:29,696 --> 00:34:30,928
And one thread is working.

805
00:34:30,997 --> 00:34:33,531
That thread needs to save if it wants any of the other

806
00:34:33,600 --> 00:34:36,066
threads to see the work that it's done.

807
00:34:36,135 --> 00:34:40,370
Okay, so you can use try question mark here, remember,

808
00:34:40,439 --> 00:34:41,604
which means try and

809
00:34:41,673 --> 00:34:44,807
if it fails, just return nil and ignore it.

810
00:34:44,875 --> 00:34:48,310
You can do that, if you don't mind that it didn't save.

811
00:34:48,379 --> 00:34:50,946
And the kinda things that can happen, saving errors.

812
00:34:51,015 --> 00:34:53,248
You could obviously have file system problems,

813
00:34:53,317 --> 00:34:55,617
your disk is full or something like that.

814
00:34:55,686 --> 00:34:57,919
But you can also have inconsistencies in

815
00:34:57,988 --> 00:35:01,121
the database, maybe you had conflicting

816
00:35:01,190 --> 00:35:04,291
data of two threads trying to save to the same database, and

817
00:35:04,359 --> 00:35:06,126
they've tried to write over the top of each other,

818
00:35:06,194 --> 00:35:08,261
those kind of things.

819
00:35:08,330 --> 00:35:10,496
Again, a lot of those problems you're not gonna have,

820
00:35:10,565 --> 00:35:12,365
unless you build a pretty complicated,

821
00:35:12,433 --> 00:35:14,733
multithreaded application, or something like that,

822
00:35:14,802 --> 00:35:17,335
but, again, you gotta check the documentation, I couldn't,

823
00:35:17,404 --> 00:35:19,971
it would take too long for me to go through all of it.

824
00:35:21,441 --> 00:35:25,776
Okay now, as I said value forKey and setValue forKey.

825
00:35:25,845 --> 00:35:29,713
Really ugly,

826
00:35:29,782 --> 00:35:32,483
What we really want to do is be able to set these vars

827
00:35:32,551 --> 00:35:35,685
as vars, we just wanna have a var called text

828
00:35:35,754 --> 00:35:37,487
somewhere that we can set.

829
00:35:37,556 --> 00:35:39,521
And of course we're exactly going to do that.

830
00:35:39,590 --> 00:35:42,791
And the way we're going to do that is create a subclass of

831
00:35:42,860 --> 00:35:45,561
NSManagedObject, instead of having NSManagedObject in

832
00:35:45,629 --> 00:35:47,295
the database we doing set-value, get-value on it.

833
00:35:47,364 --> 00:35:51,465
Instead we're going to create a subclass of NSManageObjects

834
00:35:51,534 --> 00:35:54,635
and it's going to have vars on there for all the attributes,

835
00:35:54,704 --> 00:35:57,971
like text, and screen name and all those things.

836
00:35:58,040 --> 00:36:00,307
And Xcode will generate all that code for

837
00:36:00,375 --> 00:36:01,208
you behind the scenes,

838
00:36:01,276 --> 00:36:03,676
you don't have to do any work to make that happen.

839
00:36:03,744 --> 00:36:05,811
Quite quite simple, so let's look and see how we do that.

840
00:36:05,880 --> 00:36:09,280
You do that by inspecting the entity.

841
00:36:09,349 --> 00:36:11,083
So here I've chosen tweet.

842
00:36:11,151 --> 00:36:12,316
Okay, not any of its attributes but

843
00:36:12,385 --> 00:36:15,786
tweet itself, and I want to make it so

844
00:36:15,855 --> 00:36:17,988
it generates this magic code, and how do I do that?

845
00:36:18,057 --> 00:36:20,857
Well, if you go down on the inspector

846
00:36:20,926 --> 00:36:23,260
a little ways you see it says Codegen.

847
00:36:23,329 --> 00:36:24,760
See that Codegen, that's for

848
00:36:24,829 --> 00:36:26,729
generating this code, this magic code.

849
00:36:26,797 --> 00:36:29,198
Now, you actually have a couple of choices here for

850
00:36:29,267 --> 00:36:30,299
the Codegen.

851
00:36:30,367 --> 00:36:33,769
The default I believe is this one Class Definition.

852
00:36:33,837 --> 00:36:36,837
If you choose this one it will generate that subclass for

853
00:36:36,906 --> 00:36:38,873
you and it will just work.

854
00:36:38,942 --> 00:36:41,809
Okay, you'll be able to access your tweets as a class

855
00:36:41,878 --> 00:36:42,543
called tweet.

856
00:36:42,612 --> 00:36:44,744
With all the vars.

857
00:36:44,813 --> 00:36:46,312
Now this sounds good and

858
00:36:46,381 --> 00:36:49,215
it is good; by the way if you do this class definition

859
00:36:49,284 --> 00:36:52,251
codegen it will not show up in your navigator.

860
00:36:52,320 --> 00:36:54,686
It's all behind the scenes- you never really see this file

861
00:36:54,755 --> 00:36:58,290
that is, this codegen file that generates.

862
00:36:58,359 --> 00:36:59,024
So don't look for

863
00:36:59,092 --> 00:37:00,792
it there if you put this on class definition.

864
00:37:00,861 --> 00:37:02,393
This might even be the default actually.

865
00:37:02,461 --> 00:37:04,028
To be Class Definition might be on.

866
00:37:05,063 --> 00:37:07,030
But there's other choices in here.

867
00:37:07,099 --> 00:37:11,200
And the one we choose the most often is Category/Extension.

868
00:37:11,269 --> 00:37:15,271
By the way, category just is the Objective-C word for

869
00:37:15,339 --> 00:37:16,805
extension.

870
00:37:16,874 --> 00:37:20,008
Objective-C has something like extensions called categories.

871
00:37:20,077 --> 00:37:21,809
So that's why it says Category/Extension.

872
00:37:21,878 --> 00:37:24,845
But you can think in your mind that this just says extension.

873
00:37:24,914 --> 00:37:28,215
And what this is gonna do is only generate an extension

874
00:37:28,284 --> 00:37:30,017
of your Tweet class.

875
00:37:30,085 --> 00:37:32,852
You have to actually write the Tweet class itself.

876
00:37:32,921 --> 00:37:35,121
But it's all gonna have only your code in it, or

877
00:37:35,190 --> 00:37:36,989
it could be empty if you want.

878
00:37:37,058 --> 00:37:40,325
The extension's gonna take care of all making the vars.

879
00:37:40,394 --> 00:37:42,061
Okay, the var magic right there.

880
00:37:43,497 --> 00:37:47,165
So let's see how this works.

881
00:37:47,234 --> 00:37:48,933
Even when I switch to Category/Extension.

882
00:37:49,002 --> 00:37:51,268
Again, I don't get that extension showing up in

883
00:37:51,337 --> 00:37:52,035
my navigator.

884
00:37:52,104 --> 00:37:54,838
It's kind of hidden from you.

885
00:37:54,907 --> 00:37:57,674
Here I'm gonna add the extension way of doing it for

886
00:37:57,742 --> 00:37:58,507
TwitterUser too.

887
00:37:58,576 --> 00:38:01,176
So both of them, both Tweet and TwitterUser, I'm gonna

888
00:38:01,245 --> 00:38:07,182
have an extension generated and, why do we like this one?

889
00:38:07,251 --> 00:38:08,917
Because, a lot of times for

890
00:38:08,986 --> 00:38:11,520
our Tweet or TwitterUser we want to add our own code.

891
00:38:13,222 --> 00:38:14,021
Like in a tweet.

892
00:38:14,089 --> 00:38:18,859
Imagine you wanted to add a static method that took data

893
00:38:18,927 --> 00:38:22,595
from Twitter and turned it into a tweet in the database.

894
00:38:22,664 --> 00:38:23,930
Where would you put that code?

895
00:38:23,998 --> 00:38:26,498
Well, a great place to put it would be in a tweet class,

896
00:38:26,567 --> 00:38:27,699
if there was such a thing.

897
00:38:27,768 --> 00:38:30,502
And so, you're in fact, going to create such a thing.

898
00:38:30,571 --> 00:38:33,772
And the extension is going to handle all of the var business

899
00:38:33,841 --> 00:38:34,705
for you.

900
00:38:34,774 --> 00:38:37,708
If you did choose Manual/None, right here for Codegen,

901
00:38:37,777 --> 00:38:40,544
meaning don't do any Codegen, then you're doing value for

902
00:38:40,613 --> 00:38:41,445
set value for key.

903
00:38:43,081 --> 00:38:45,682
Good luck with that, the code's gonna be a mess, okay?

904
00:38:45,750 --> 00:38:48,284
So, we almost always do it this way with this extension.

905
00:38:49,654 --> 00:38:52,721
Also, if we build our app using multiple modules

906
00:38:52,789 --> 00:38:55,523
like we have in Smash Tag, we have a framework module and

907
00:38:55,592 --> 00:38:57,158
then we have the main module.

908
00:38:57,227 --> 00:38:58,926
Then you're probably gonna wanna choose

909
00:38:58,995 --> 00:39:01,228
from this pull-down here where it says module,

910
00:39:01,297 --> 00:39:03,230
current product module.

911
00:39:03,299 --> 00:39:06,467
I think if you have a single app that's not modularized

912
00:39:06,535 --> 00:39:10,470
like that you probably don't need to set that, but

913
00:39:10,539 --> 00:39:14,707
in a multi-modual app you probably do want to.

914
00:39:14,776 --> 00:39:18,577
So, since we've chosen here to create only the extension,

915
00:39:18,646 --> 00:39:22,080
we obviously need to write the code for the classes Tweet And

916
00:39:22,149 --> 00:39:25,017
TwitterUser, we have to create those classes ourselves.

917
00:39:25,085 --> 00:39:26,551
So how do we do that?

918
00:39:26,619 --> 00:39:28,419
Well, just like we create anything,

919
00:39:28,487 --> 00:39:30,220
we use file, new file.

920
00:39:30,289 --> 00:39:32,256
Then we do file, new file, this time we are back

921
00:39:32,325 --> 00:39:35,559
to saying it's a cocoa touch class because NSManageObject.

922
00:39:35,628 --> 00:39:37,660
Why is it code called cocoa touch class,

923
00:39:37,729 --> 00:39:40,229
we wanna make sure we set our super class to be in its

924
00:39:40,297 --> 00:39:42,030
managed object, right?

925
00:39:42,099 --> 00:39:43,665
So, I'm creating a class called Tweet,

926
00:39:43,734 --> 00:39:46,701
you see, which is a subclass of NSManagedObject.

927
00:39:46,770 --> 00:39:48,436
And is gonna create this for us.

928
00:39:48,504 --> 00:39:51,539
See? Class Tweet: NSManagedObject.

929
00:39:51,608 --> 00:39:52,706
No code in there.

930
00:39:52,775 --> 00:39:56,043
That space is for us, we get write anything we want.

931
00:39:56,112 --> 00:39:58,778
The code that does the vars is in that extension which we

932
00:39:58,847 --> 00:39:59,746
don't even see, but but

933
00:39:59,815 --> 00:40:02,082
I'm gonna show it to yo in a second here.

934
00:40:04,785 --> 00:40:07,452
Notice that I picked the name of this class Tweet

935
00:40:07,521 --> 00:40:09,888
to be the same as the name of the entity in the database,

936
00:40:09,956 --> 00:40:12,290
which, you want to do.

937
00:40:12,359 --> 00:40:16,027
It is possible to not do that by inspecting the entity

938
00:40:16,096 --> 00:40:18,229
in the data model, but, don't do it.

939
00:40:18,298 --> 00:40:20,231
Just have the entity with the same name.

940
00:40:20,299 --> 00:40:22,699
People reading your code are going to expect this class,

941
00:40:22,768 --> 00:40:24,400
this subclass of NSManageObject that

942
00:40:24,469 --> 00:40:25,602
represents a tweet.

943
00:40:25,670 --> 00:40:28,371
Entity to be called tweet, so called it that.

944
00:40:30,441 --> 00:40:33,708
Now, we've got an error here, I'll just created this class,

945
00:40:33,777 --> 00:40:34,976
how I'm gonna possibly have an error,

946
00:40:35,045 --> 00:40:36,944
I'm done anything how could I've done anything wrong?

947
00:40:37,013 --> 00:40:38,379
Well, the problem the problem here is,

948
00:40:38,448 --> 00:40:41,081
really, Xcode has done something wrong.

949
00:40:41,150 --> 00:40:45,685
When Xcode created this, it didn't seem to realize that

950
00:40:45,754 --> 00:40:47,687
NSManageObject is not in UIKit.

951
00:40:47,756 --> 00:40:50,790
You see how it put import UIKit at the top?

952
00:40:50,859 --> 00:40:54,593
Really, what we need there is import CoreData, okay.

953
00:40:54,662 --> 00:40:55,761
All the code that you write,

954
00:40:55,829 --> 00:40:57,129
any time you're doing something in CoreData,

955
00:40:57,198 --> 00:40:58,997
you have to import CoreData.

956
00:40:59,065 --> 00:41:01,032
It's a different framework that the UIKit so

957
00:41:01,101 --> 00:41:02,934
you must import it everywhere that you're going to use it.

958
00:41:03,002 --> 00:41:05,235
Just like we had to import Twitter everywhere we want to

959
00:41:05,304 --> 00:41:06,937
use that Twitter framework that I gave you.

960
00:41:08,507 --> 00:41:09,906
So, I don't know why Xcode, I think it's just an oversight

961
00:41:09,907 --> 00:41:11,306
Okay?

962
00:41:11,376 --> 00:41:13,842
that Xcode when you choose NSManagedObject

963
00:41:13,911 --> 00:41:15,944
as your super class you should know, that's in Core Data so

964
00:41:16,013 --> 00:41:17,546
it should be import Core Data there.

965
00:41:17,614 --> 00:41:19,714
Don't know why it doesn't do that.

966
00:41:19,782 --> 00:41:22,784
So here I've created one for the TwitterUser class.

967
00:41:22,852 --> 00:41:25,352
Again you can put anything you want in there.

968
00:41:25,421 --> 00:41:26,219
This is your class.

969
00:41:26,288 --> 00:41:27,086
You can do anything you want.

970
00:41:27,155 --> 00:41:29,588
All the stuff about the vars is off in

971
00:41:29,657 --> 00:41:31,390
an extension somewhere.

972
00:41:31,459 --> 00:41:34,092
In fact, let's go take a look at that extension,

973
00:41:34,161 --> 00:41:34,910
Even though it's not going to show up in your next navigator

974
00:41:34,911 --> 00:41:35,660
what it looks like.

975
00:41:35,729 --> 00:41:37,127
you're probably never going to look at it.

976
00:41:37,196 --> 00:41:38,363
I thought I'd show it to you so

977
00:41:38,431 --> 00:41:40,164
you understand a little bit what's going on.

978
00:41:40,232 --> 00:41:43,300
So, this is the extension, this generated for

979
00:41:43,369 --> 00:41:43,933
TwitterUser.

980
00:41:44,002 --> 00:41:45,568
You see that is an extension

981
00:41:45,637 --> 00:41:47,236
of the TwitterUser class, right?

982
00:41:47,305 --> 00:41:52,074
Remember extensions and it's got the vars.

983
00:41:52,143 --> 00:41:54,643
They're defined not just name and screenName but

984
00:41:54,712 --> 00:41:57,279
it's got that relationship var tweets as well.

985
00:41:58,281 --> 00:41:59,012
All right?

986
00:41:59,081 --> 00:42:01,048
And look at the type of tweets.

987
00:42:01,116 --> 00:42:03,917
As promised, it's an NSSet, it's an optional because it

988
00:42:03,986 --> 00:42:07,153
comes out of the database as not set.

989
00:42:07,222 --> 00:42:08,221
It's gonna get set.

990
00:42:09,823 --> 00:42:11,022
So these are the vars.

991
00:42:11,091 --> 00:42:12,224
And I'll talk a little bit about

992
00:42:12,292 --> 00:42:17,095
how these vars are actually implemented in a minute but

993
00:42:17,164 --> 00:42:18,463
all the vars are there.

994
00:42:18,532 --> 00:42:19,663
There's also some functions,

995
00:42:19,732 --> 00:42:20,964
now at the bottom you see those functions,

996
00:42:21,033 --> 00:42:23,967
those are kind of fun, those are convenience functions for

997
00:42:24,036 --> 00:42:28,438
adding and removing tweets from the tweets set

998
00:42:28,506 --> 00:42:33,876
because NSSet is immutable, okay?

999
00:42:33,945 --> 00:42:36,913
It's not var verses let like swift things,

1000
00:42:36,981 --> 00:42:40,349
NS set is kind of old Objective-C way, and NSSet,

1001
00:42:40,418 --> 00:42:44,552
like NSAttributedString, is immutable, cannot be changed,

1002
00:42:44,621 --> 00:42:47,588
so how can I add any tweets to my database here?

1003
00:42:47,657 --> 00:42:50,158
Well you used these functions instead, add to tweets,

1004
00:42:50,226 --> 00:42:51,825
remove from tweets, add to tweets,

1005
00:42:51,894 --> 00:42:55,896
remove from tweets, there's a pair for doing a single tweet,

1006
00:42:55,965 --> 00:42:58,531
and there having adding a whole bunch of tweets, or

1007
00:42:58,600 --> 00:43:00,833
removing a whole bunch of tweets, okay?

1008
00:43:00,902 --> 00:43:03,603
So you're definitely going to want those functions for

1009
00:43:03,671 --> 00:43:04,337
your assignment five.

1010
00:43:05,840 --> 00:43:08,540
Cuz you're gonna have some relationships where you're

1011
00:43:08,608 --> 00:43:11,609
gonna want to add them using these functions.

1012
00:43:11,678 --> 00:43:12,643
Now it adds those functions for

1013
00:43:12,712 --> 00:43:16,346
any too many relationship, any time you have a too many var

1014
00:43:16,415 --> 00:43:19,549
like tweets, it's going to add these functions automatically

1015
00:43:19,618 --> 00:43:21,151
It actually put it in its own little extension, this file

1016
00:43:21,152 --> 00:43:22,685
in the extensions.

1017
00:43:22,754 --> 00:43:26,622
has two extensions in it, both through TwitterUser.

1018
00:43:26,691 --> 00:43:29,825
Any questions about extensions there or any of that?

1019
00:43:29,894 --> 00:43:34,429
Okay, let's look at tweets extension real quick.

1020
00:43:34,498 --> 00:43:36,565
Couple other things to look at here that I didn't look

1021
00:43:36,634 --> 00:43:37,599
in the other one.

1022
00:43:37,667 --> 00:43:41,035
Notice this static func called fetchRequest?

1023
00:43:41,103 --> 00:43:41,735
Put that in your mind.

1024
00:43:41,804 --> 00:43:43,904
I'm gonna talk about that in a few slides.

1025
00:43:43,973 --> 00:43:46,640
fetchRequest is a really cool little static func that will

1026
00:43:46,709 --> 00:43:50,577
give you something you can use to fetch tweets.

1027
00:43:50,646 --> 00:43:52,245
And if you call fetchrRquest on twitter users,

1028
00:43:52,313 --> 00:43:54,213
you'll get something to fetch twitter users.

1029
00:43:54,282 --> 00:43:57,282
And we'll talk about all about fetch in a moment here.

1030
00:43:57,351 --> 00:44:01,886
Notice the type of tweeter, see the tweeter var.

1031
00:44:01,955 --> 00:44:04,589
Its type is TwitterUser.

1032
00:44:04,657 --> 00:44:06,324
Because of course that's what the tweeter is,

1033
00:44:06,393 --> 00:44:09,494
we control drag between the tweet and the tweeter user so

1034
00:44:09,562 --> 00:44:11,929
that tweeter var is of course a tweeter user,

1035
00:44:11,997 --> 00:44:15,432
not an NSSet, because it's a two one relationship, okay,

1036
00:44:15,501 --> 00:44:18,301
there's only one TwitterUser, who is my tweeter.

1037
00:44:20,105 --> 00:44:23,138
And what about this @NSManaged?

1038
00:44:23,207 --> 00:44:27,009
Okay, @NSManaged I'm just gonna say it's magic.

1039
00:44:27,077 --> 00:44:28,210
It's not really magic.

1040
00:44:28,278 --> 00:44:33,181
It's essentially something that says to the runtime, hey.

1041
00:44:33,250 --> 00:44:35,083
When someone accesses this var,

1042
00:44:35,152 --> 00:44:37,485
Core Data's gonna figure it out for you.

1043
00:44:37,554 --> 00:44:40,053
And what Core Data does, is when you try to say

1044
00:44:40,122 --> 00:44:45,058
Tweet.created equals some date, it gets trapped

1045
00:44:45,127 --> 00:44:48,228
at a low level in the runtime and Core Data swoops in and

1046
00:44:48,297 --> 00:44:51,731
does set value for key for you, okay.

1047
00:44:51,799 --> 00:44:55,268
Same thing if you get the created var, it swoops in and

1048
00:44:55,337 --> 00:44:57,603
does value for key and gets it that way.

1049
00:44:57,671 --> 00:45:01,339
But it's all happening at a low level behind the scenes.

1050
00:45:01,408 --> 00:45:05,309
So this extension does satisfy the extension limitation where

1051
00:45:05,378 --> 00:45:06,544
it can't have any storage.

1052
00:45:06,612 --> 00:45:09,580
All of the storage for these vars isn't in the database.

1053
00:45:10,616 --> 00:45:12,416
And when you ask for it.

1054
00:45:12,484 --> 00:45:14,985
Or when you set it, it's using its value for

1055
00:45:15,053 --> 00:45:17,019
key instead of value for key, to set it in the database.

1056
00:45:17,088 --> 00:45:18,087
Now again, it sets in memory.

1057
00:45:18,156 --> 00:45:19,021
You have to save it for

1058
00:45:19,090 --> 00:45:20,955
it to actually go out into the database.

1059
00:45:21,024 --> 00:45:25,159
But that what's happening.

1060
00:45:25,228 --> 00:45:29,130
All right, so

1061
00:45:29,199 --> 00:45:34,334
now that we have these class so here's some

1062
00:45:34,403 --> 00:45:39,206
code that creates a tweets and sets it's attributes, okay so

1063
00:45:39,274 --> 00:45:41,875
let's look at this piece by piece and see what it does.

1064
00:45:41,943 --> 00:45:45,078
The first thing is to create a tweet, we don't have to do

1065
00:45:45,146 --> 00:45:49,449
NSEntityDescription, Entity, insert Entity for name into

1066
00:45:49,517 --> 00:45:52,318
contacts, or whatever that huge, long terrible thing was-

1067
00:45:52,386 --> 00:45:55,421
we can just say, tweet, parenthesis context.

1068
00:45:55,489 --> 00:45:58,223
You just say what context, which means what database you

1069
00:45:58,292 --> 00:46:00,859
want the tweet to put in and it creates a new tweet.

1070
00:46:00,928 --> 00:46:03,994
Okay, just use a normal initializer for

1071
00:46:04,063 --> 00:46:05,496
new things so that's super cool.

1072
00:46:05,565 --> 00:46:07,364
That's one of the coolest features right there.

1073
00:46:07,432 --> 00:46:09,666
Not having to use an NSEntityDescription thing, so

1074
00:46:09,735 --> 00:46:13,002
no more NSEntityDescription, we'll not have to do that.

1075
00:46:13,071 --> 00:46:13,769
And then here,

1076
00:46:13,838 --> 00:46:18,107
I'm setting the text to be 140 characters of pure joy.

1077
00:46:18,175 --> 00:46:21,176
And I don't have to say set value 140 characters of pure

1078
00:46:21,244 --> 00:46:24,646
joy for key text and have all these literal strings like

1079
00:46:24,715 --> 00:46:28,016
text in there in this untyped thing.

1080
00:46:28,084 --> 00:46:29,918
I just say tweet.text equals that.

1081
00:46:29,986 --> 00:46:33,620
And the same thing here with created, again, so we don't

1082
00:46:33,689 --> 00:46:36,857
even have to worry about the thing, if we tried to say

1083
00:46:36,926 --> 00:46:41,228
tweet.created equals quote hello, this Swift would say,

1084
00:46:41,297 --> 00:46:44,330
no, created is of type Date, so you can't do that, so

1085
00:46:44,399 --> 00:46:46,899
it finds all of our, it type checks everything,

1086
00:46:46,968 --> 00:46:49,801
finds all of our possible errors.

1087
00:46:49,870 --> 00:46:52,170
What about relationships, okay, setting relationships?

1088
00:46:52,239 --> 00:46:56,675
So here I've created another object, a TwitterUser and

1089
00:46:56,743 --> 00:46:59,144
again I just set TwitterUser with a context,

1090
00:46:59,212 --> 00:47:01,111
I'll talk about that argument in just a second but

1091
00:47:01,180 --> 00:47:06,050
I told what database I wanna create in TwitterUser and

1092
00:47:06,118 --> 00:47:10,588
I set my tweet's tweeter equal to that TwitterUser.

1093
00:47:10,656 --> 00:47:12,522
So, it's exactly what you're, would imagine right?

1094
00:47:12,591 --> 00:47:14,290
Just set it equal to Joe.

1095
00:47:14,359 --> 00:47:18,794
And what's interesting about this is that when you set one

1096
00:47:18,863 --> 00:47:22,865
side of a relationship, the other side gets updated

1097
00:47:22,934 --> 00:47:26,001
automatically, 100% of the time.

1098
00:47:26,070 --> 00:47:27,369
This is call maintaining

1099
00:47:27,438 --> 00:47:30,038
the integrity of the database, okay?

1100
00:47:30,106 --> 00:47:33,341
And Core Data always maintains database integrity.

1101
00:47:33,410 --> 00:47:35,543
So, when you change one side relationship.

1102
00:47:35,611 --> 00:47:36,710
It changes the other.

1103
00:47:36,779 --> 00:47:39,546
So, that means for example if I say tweet.tweeter

1104
00:47:39,614 --> 00:47:42,282
equals Joe, then if I went over to the Joe side and

1105
00:47:42,350 --> 00:47:46,152
said hey give me Joe's tweets and I'm even gonna turn it

1106
00:47:46,220 --> 00:47:49,855
into a Swift kind of set from an NSSet to a set of

1107
00:47:49,924 --> 00:47:52,291
tweet because we know that's what tweets are, right?

1108
00:47:52,360 --> 00:47:56,461
Tweets are a set of Tweets, so I'm gonna as it to do that.

1109
00:47:56,530 --> 00:48:00,365
Then I can say, if Joe's tweet contains that tweet print yes

1110
00:48:00,434 --> 00:48:02,533
and of course it is going to print yes.

1111
00:48:02,602 --> 00:48:05,002
Because when I said tweet.tweeter = joe,

1112
00:48:05,071 --> 00:48:07,538
it automatically got added to joe's tweets.

1113
00:48:08,573 --> 00:48:09,238
That make sense?

1114
00:48:09,307 --> 00:48:10,640
And same thing the other way.

1115
00:48:10,709 --> 00:48:13,375
If I added a tweet into joe's tweets,

1116
00:48:13,444 --> 00:48:16,112
that tweet tweeter would automatically set to be joe.

1117
00:48:17,614 --> 00:48:18,546
Okay? Both sides will always

1118
00:48:18,615 --> 00:48:19,614
point to each other.

1119
00:48:19,682 --> 00:48:21,482
You never have to do anything to make that happen.

1120
00:48:23,086 --> 00:48:27,688
tweet.tweeter=joe is exactly

1121
00:48:27,756 --> 00:48:30,623
the same as saying joe dot addToTweets tweet.

1122
00:48:30,692 --> 00:48:32,959
Remember addToTweets is one of those convenience functions

1123
00:48:33,027 --> 00:48:34,427
that it created for us over there.

1124
00:48:35,763 --> 00:48:37,529
Now, notice the argument I used for

1125
00:48:37,598 --> 00:48:40,398
the context to create the Twitter user there.

1126
00:48:40,467 --> 00:48:43,434
I didn't say AppDelegate.viewContext.

1127
00:48:43,503 --> 00:48:45,502
I didn't use that same context bar that I had.

1128
00:48:45,571 --> 00:48:47,537
I said tweet.manageObjectContext.

1129
00:48:47,606 --> 00:48:51,107
In other words, I got, I found out what database the tweet is

1130
00:48:51,176 --> 00:48:53,977
in, and I put the Twitter user in the same database.

1131
00:48:54,046 --> 00:48:57,212
And this is a common way of programming in Core Data

1132
00:48:57,281 --> 00:48:59,148
where when you wanna get a context and

1133
00:48:59,217 --> 00:49:01,717
you already have a object in the database you

1134
00:49:01,786 --> 00:49:04,786
ask the object you already have what context to use.

1135
00:49:04,855 --> 00:49:08,256
And you can see that if I ever change my code to not put this

1136
00:49:08,325 --> 00:49:12,059
into this context, to put it into another context, at least

1137
00:49:12,128 --> 00:49:14,695
the Twitter user and the tweet would always be together

1138
00:49:14,764 --> 00:49:16,330
in whatever that context is.

1139
00:49:16,399 --> 00:49:18,865
So you can see why I used the tweets can't

1140
00:49:18,934 --> 00:49:22,702
manage object context here to create that instead of using

1141
00:49:22,771 --> 00:49:24,170
the context again.

1142
00:49:24,239 --> 00:49:26,905
So, it, it would work to say context, of course,

1143
00:49:26,974 --> 00:49:30,575
but I'm just saying there's a paradigm of development where

1144
00:49:30,644 --> 00:49:33,612
we're gonna try and use the context of related object.

1145
00:49:33,680 --> 00:49:35,480
So they end up in the same database for sure.

1146
00:49:37,150 --> 00:49:37,715
Okay?

1147
00:49:39,385 --> 00:49:41,351
All right, so

1148
00:49:41,420 --> 00:49:44,821
we can also use dot notation, because these are just vars.

1149
00:49:44,889 --> 00:49:47,723
So when I say tweet.tweeter, I get a TwitterUser object.

1150
00:49:47,792 --> 00:49:50,059
So, of course, I can say dot name on it and

1151
00:49:50,128 --> 00:49:52,228
set it equal to Joe Schmo, whatever, right?

1152
00:49:52,296 --> 00:49:57,266
tweet.tweeter.name = "Joe Schmo", all right?

1153
00:49:57,334 --> 00:49:59,134
No restriction there on those vars.

1154
00:50:00,703 --> 00:50:03,337
All right, remember I told you about the scalars?

1155
00:50:03,406 --> 00:50:06,240
This is that switch I was telling you about before.

1156
00:50:06,309 --> 00:50:09,777
If you don't do this, then when you say,

1157
00:50:09,845 --> 00:50:13,313
if you had an int, let's say you had retweet

1158
00:50:13,382 --> 00:50:17,950
count which was an int here let's say on Int32.

1159
00:50:18,019 --> 00:50:19,185
If you don't switch this button,

1160
00:50:19,253 --> 00:50:22,188
then that's going to be an NSNumber not an Int32.

1161
00:50:22,256 --> 00:50:24,489
But when you click this switch on,

1162
00:50:24,558 --> 00:50:26,958
now that var will be of type Int32.

1163
00:50:27,027 --> 00:50:28,893
So you almost always want this for numbers.

1164
00:50:28,962 --> 00:50:32,296
99.9% of the time, you want to have this switch on.

1165
00:50:32,365 --> 00:50:33,964
Luckily, it's on by default so

1166
00:50:34,033 --> 00:50:36,065
you don't even have to think about it much, but

1167
00:50:36,134 --> 00:50:37,300
I just wanted to let you know about it.

1168
00:50:38,736 --> 00:50:40,970
All right, so now lets talk about deletion.

1169
00:50:41,038 --> 00:50:44,773
Okay, now, I want to delete something from the database.

1170
00:50:44,842 --> 00:50:46,641
And that's incredibly easy,

1171
00:50:46,710 --> 00:50:50,378
almost too easy because your data's precious you don't want

1172
00:50:50,447 --> 00:50:53,547
to be deleting it to easily, but you do that by asking

1173
00:50:53,616 --> 00:50:56,851
the context to delete the NSManagedObject, so you can

1174
00:50:56,919 --> 00:50:59,920
pass any NSManagedObject to this method delete and

1175
00:50:59,989 --> 00:51:02,189
it will delete it from the database.

1176
00:51:02,258 --> 00:51:05,325
And it could cascade and delete other things as well

1177
00:51:05,393 --> 00:51:08,161
depending on what delete rule is, all right?

1178
00:51:08,230 --> 00:51:11,530
Most of the time by default, when I delete something,

1179
00:51:11,599 --> 00:51:15,067
other things that point to it get that pointer set to nil.

1180
00:51:15,136 --> 00:51:18,036
That's the nullify delete rule.

1181
00:51:18,105 --> 00:51:20,038
Now, when things get deleted from the database they got

1182
00:51:20,107 --> 00:51:23,541
sent this message first, prepare for deletion.

1183
00:51:23,610 --> 00:51:26,177
Okay, and this is a really good method.

1184
00:51:26,245 --> 00:51:28,812
Again, in here you don't have to do anything

1185
00:51:28,881 --> 00:51:31,748
to worry about the other pointers point to you

1186
00:51:31,817 --> 00:51:33,583
that's all fixed by the delete rule.

1187
00:51:33,652 --> 00:51:36,919
But what if you had another field in your database?

1188
00:51:36,988 --> 00:51:39,421
Back to the retweet count example again.

1189
00:51:39,490 --> 00:51:43,592
Let's say I had an int somewhere in TwitterUser,

1190
00:51:43,661 --> 00:51:46,227
which counted the number of retweets

1191
00:51:46,296 --> 00:51:48,296
that this twitter user had done.

1192
00:51:48,365 --> 00:51:51,065
And so if I was deleting a tweet and it happened to be

1193
00:51:51,133 --> 00:51:54,902
a retweet then I need to set that to be minus equal one.

1194
00:51:54,971 --> 00:51:56,636
And here's the perfect place to do it.

1195
00:51:56,705 --> 00:51:58,372
So tweet, and it's prepared for

1196
00:51:58,441 --> 00:52:00,507
deletion saying whoop, I'm about to be deleted.

1197
00:52:00,575 --> 00:52:03,376
I'd better tell my Twitter user, cuz I'm a retweet,

1198
00:52:03,444 --> 00:52:07,013
that he needs to decrement his retweet count.

1199
00:52:07,081 --> 00:52:09,381
So you see why you would use prepare for deletion?

1200
00:52:09,449 --> 00:52:11,416
It's a way to kind of update other things in the database

1201
00:52:11,485 --> 00:52:14,252
when as you're leaving the database.

1202
00:52:15,855 --> 00:52:17,955
All right, so that's it for deletion.

1203
00:52:18,023 --> 00:52:19,789
Next topic, querying,

1204
00:52:19,858 --> 00:52:22,158
the most important piece of this whole database thing.

1205
00:52:22,227 --> 00:52:24,294
It's really a waste of time doing all this stuff if you're

1206
00:52:24,362 --> 00:52:24,961
not gonna query, okay?

1207
00:52:25,029 --> 00:52:28,831
If you're not gonna make sophisticated requests for

1208
00:52:28,900 --> 00:52:32,767
the information based on the relationships, etc.

1209
00:52:32,836 --> 00:52:36,238
So, to do a query the most important thing you need to

1210
00:52:36,306 --> 00:52:40,475
know is NSFetchRequest, this class NSFetchRequest.

1211
00:52:40,544 --> 00:52:43,077
And NSFetchRequest encapsulates

1212
00:52:43,146 --> 00:52:45,946
what you want from the database.

1213
00:52:46,015 --> 00:52:47,915
So let's talk about an NSFetchRequest and

1214
00:52:47,984 --> 00:52:51,351
how we build one.

1215
00:52:51,420 --> 00:52:52,552
So when we're building one,

1216
00:52:52,621 --> 00:52:54,487
there's three important things we need to know.

1217
00:52:54,556 --> 00:52:57,323
One, what entity are we fetching?

1218
00:52:57,391 --> 00:53:01,626
Because a FetchRequest can only Fetch one kind of entity.

1219
00:53:01,695 --> 00:53:03,962
You can, there's no such thing a FetchRequest that will give

1220
00:53:04,031 --> 00:53:06,565
you some tweet and some Twitter user.

1221
00:53:06,633 --> 00:53:07,464
No, okay?

1222
00:53:07,533 --> 00:53:09,700
A fetch always gives you all tweets or

1223
00:53:09,769 --> 00:53:12,136
all Twitter users, make sense?

1224
00:53:12,205 --> 00:53:13,070
So that's the number one thing,

1225
00:53:13,139 --> 00:53:14,905
is we're gonna create the fetch request.

1226
00:53:14,973 --> 00:53:17,606
And it will be a fetch request or a very specific entity.

1227
00:53:17,675 --> 00:53:20,576
And it will only be able to fetch those entities.

1228
00:53:20,645 --> 00:53:24,446
The second thing is is an array of sort descriptors.

1229
00:53:24,515 --> 00:53:25,647
And why do we want this?

1230
00:53:25,716 --> 00:53:29,017
Because when we execute this fetch it's gonna come back

1231
00:53:29,086 --> 00:53:31,151
as an array, okay?

1232
00:53:31,220 --> 00:53:32,753
All the matching tweets or

1233
00:53:32,822 --> 00:53:34,888
Twitter user will come back in an array.

1234
00:53:34,957 --> 00:53:35,922
And since it's an array,

1235
00:53:35,991 --> 00:53:39,693
arrays are not sets, arrays are ordered and so

1236
00:53:39,761 --> 00:53:42,361
we have specify what order the things are in the arrays.

1237
00:53:42,430 --> 00:53:44,830
So we do that with these sort descriptors.

1238
00:53:44,898 --> 00:53:47,833
And finally, we just specify or what is it that we want,

1239
00:53:47,902 --> 00:53:51,236
which tweets do we want, which Twitter users do we want and

1240
00:53:51,305 --> 00:53:53,971
we do that with something called a predicate.

1241
00:53:54,040 --> 00:53:55,039
Okay, so let's dive in and

1242
00:53:55,107 --> 00:53:57,174
look at all three of these things.

1243
00:53:57,243 --> 00:53:58,575
This is what it looks like,

1244
00:53:58,644 --> 00:54:00,777
kinda top level to create a fetch request.

1245
00:54:00,846 --> 00:54:02,479
Okay, you get a fetch request.

1246
00:54:02,547 --> 00:54:04,447
You set the source descriptor and you set its predicate.

1247
00:54:04,516 --> 00:54:07,016
So you get each of these three parts.

1248
00:54:07,085 --> 00:54:08,650
So getting the fetch request is easy.

1249
00:54:08,719 --> 00:54:10,852
We're gonna use that little static function

1250
00:54:10,921 --> 00:54:14,455
that the extension that I talked about, made for

1251
00:54:14,524 --> 00:54:16,223
us called fetchRequest.

1252
00:54:16,292 --> 00:54:19,127
Now, this is one of the very few times when Swift

1253
00:54:19,195 --> 00:54:22,830
cannot infer the type of this return value.

1254
00:54:24,132 --> 00:54:26,500
Should've put this in red, okay?

1255
00:54:26,568 --> 00:54:27,133
Because it's so

1256
00:54:27,202 --> 00:54:29,568
rare, Swift can almost always infer things.

1257
00:54:29,637 --> 00:54:31,169
But in turns out NSManagedObject

1258
00:54:31,238 --> 00:54:34,506
has a fetchRequest method and it returns the more generic

1259
00:54:34,574 --> 00:54:37,108
kind of fetchRequest and so when you're getting it,

1260
00:54:37,177 --> 00:54:39,610
it doesn't quite know which one you want.

1261
00:54:39,679 --> 00:54:41,579
So when you ask a Tweet for

1262
00:54:41,648 --> 00:54:44,582
its fetch request right here, you have to tell it did you

1263
00:54:44,650 --> 00:54:48,318
want the one in Tweet not the one from its super class?

1264
00:54:48,387 --> 00:54:48,884
All right? And so

1265
00:54:48,953 --> 00:54:51,186
say let request equal NSFetchRequest.

1266
00:54:51,255 --> 00:54:53,756
It's a generic type like array or something like that, right?

1267
00:54:53,825 --> 00:54:55,958
This is a fetch request only for Tweets.

1268
00:54:56,026 --> 00:54:58,594
So you say NSFetchRequest<tweet> =

1269
00:54:58,662 --> 00:55:00,595
Tweet.fetchRequest().

1270
00:55:00,664 --> 00:55:02,396
And it knows, of course,

1271
00:55:02,465 --> 00:55:05,900
that the only one that returns an NSFetchRequest for

1272
00:55:05,968 --> 00:55:09,003
tweets is the fetchRequest, and that's Tweet extension.

1273
00:55:11,106 --> 00:55:12,439
So now, you have a fetchRequest,

1274
00:55:12,507 --> 00:55:14,741
this is how you get a fetch request- couldn't be easier.

1275
00:55:14,809 --> 00:55:17,442
You just have to remember to do that static

1276
00:55:17,511 --> 00:55:19,378
typing right there.

1277
00:55:19,446 --> 00:55:21,446
Okay, now we need the sortDescriptor, right?

1278
00:55:21,515 --> 00:55:22,947
It's got this array coming back.

1279
00:55:23,016 --> 00:55:25,516
What order are they going to be?

1280
00:55:25,585 --> 00:55:27,851
SortDescriptor looks like this.

1281
00:55:27,920 --> 00:55:29,352
You create it with a key.

1282
00:55:29,421 --> 00:55:32,188
That is the key, the attribute in

1283
00:55:32,257 --> 00:55:35,258
the database that you want to sort on, so the screen name or

1284
00:55:35,327 --> 00:55:38,828
even the text in the tweet or the actual name of

1285
00:55:38,897 --> 00:55:40,896
the tweeter, whatever it's gonna be.

1286
00:55:40,965 --> 00:55:42,230
This right here, sortDescriptor,

1287
00:55:42,299 --> 00:55:45,867
will be a sort descriptor only suitable for fetching Twitter

1288
00:55:45,936 --> 00:55:49,471
users, because screenName is a key in Twitter user,

1289
00:55:49,540 --> 00:55:51,906
not in tweet, so we're gonna use this SortDescriptor

1290
00:55:51,975 --> 00:55:53,641
in a tweet request.

1291
00:55:53,709 --> 00:55:55,175
And I say that because on the previous slide,

1292
00:55:55,244 --> 00:55:57,611
I just showed you how to make a fetch request for a tweet.

1293
00:55:57,680 --> 00:55:59,312
Anyway, I should just, that should have been Twitter user.

1294
00:55:59,381 --> 00:56:01,648
But anyway, so this is a Twitter user.

1295
00:56:01,716 --> 00:56:02,781
SortDescriptor.

1296
00:56:02,850 --> 00:56:05,951
And notice it has ascending or descending like us A to Z or

1297
00:56:06,020 --> 00:56:10,588
Z to A and then it has this argument selector and

1298
00:56:10,657 --> 00:56:13,458
this one creates some confusion.

1299
00:56:13,527 --> 00:56:15,859
But really this selector just says,

1300
00:56:15,928 --> 00:56:20,497
what method am I gonna use to compare items to do the sort.

1301
00:56:20,566 --> 00:56:24,735
All right now, you don't even have to specify the selector

1302
00:56:24,804 --> 00:56:26,837
if you don't want to and for

1303
00:56:26,906 --> 00:56:29,906
almost all data types, numbers,

1304
00:56:29,975 --> 00:56:34,410
dates, it's going to use a method called compare, okay.

1305
00:56:34,479 --> 00:56:38,747
Compare returns something called a comparison result

1306
00:56:38,816 --> 00:56:41,450
which is either, it's the same, it's greater than, or

1307
00:56:41,518 --> 00:56:42,084
it's less than.

1308
00:56:42,153 --> 00:56:43,618
So, that's what this compare method does.

1309
00:56:43,687 --> 00:56:44,885
And it's implemented by date.

1310
00:56:44,954 --> 00:56:46,187
It's implemented by Int32.

1311
00:56:46,256 --> 00:56:47,888
It's implemented by double.

1312
00:56:47,957 --> 00:56:49,823
It's even implemented by string.

1313
00:56:49,892 --> 00:56:50,724
Okay? So,

1314
00:56:50,793 --> 00:56:52,358
you could just use compare.

1315
00:56:52,427 --> 00:56:54,594
But, for strings.

1316
00:56:54,662 --> 00:56:56,695
You wanna think a little bit about what kind

1317
00:56:56,764 --> 00:56:57,895
of comparison do you want?

1318
00:56:57,964 --> 00:57:01,233
Do you want case-insensitive compare?

1319
00:57:01,301 --> 00:57:03,734
Or you could even use this special compare,

1320
00:57:03,803 --> 00:57:05,736
called localizedStandardCompare.

1321
00:57:05,805 --> 00:57:06,737
This will compare them so

1322
00:57:06,806 --> 00:57:09,573
that it is sourced just like the finder on the Mac.

1323
00:57:09,641 --> 00:57:11,575
And what does the finder on the Mac do that's different

1324
00:57:11,643 --> 00:57:12,942
than case insensitive?

1325
00:57:13,010 --> 00:57:15,444
Well, there's a lot of issues with things like diacritic

1326
00:57:15,513 --> 00:57:17,912
marks, and you know,

1327
00:57:17,981 --> 00:57:20,616
things in your local language where things sort differently,

1328
00:57:20,684 --> 00:57:23,284
depending on what language you're in, what locale it is.

1329
00:57:23,353 --> 00:57:25,419
You'd, you sometimes you ignore the diacritics,

1330
00:57:25,488 --> 00:57:26,320
like accent marks.

1331
00:57:26,389 --> 00:57:28,154
Sometimes they mean something.

1332
00:57:28,223 --> 00:57:31,992
And, so localized standard compare is a special compare

1333
00:57:32,061 --> 00:57:35,194
for strings, that knows how to do that, okay?

1334
00:57:35,263 --> 00:57:38,197
And this is very commonly the one we will use for strings.

1335
00:57:38,266 --> 00:57:39,832
When we're gonna show something in our UI,

1336
00:57:39,901 --> 00:57:42,334
maybe this array of thing for fetching,

1337
00:57:42,403 --> 00:57:43,168
we're gonna put it in the UI.

1338
00:57:43,237 --> 00:57:44,769
We would want it to be in order,

1339
00:57:44,838 --> 00:57:46,304
this localizedStandardCompare.

1340
00:57:46,372 --> 00:57:50,374
You notice that it's an NSString dot method.

1341
00:57:50,443 --> 00:57:53,343
It's not String.localizedStandardComp-

1342
00:57:53,412 --> 00:57:55,679
that's because this has to be an Objective-C visible method.

1343
00:57:55,680 --> 00:57:57,947
are. And

1344
00:57:58,950 --> 00:58:01,584
And you need the NSString version.

1345
00:58:01,652 --> 00:58:03,285
So basically you're going to say NSString dot, and

1346
00:58:03,354 --> 00:58:07,522
you can go look, search for compare in NSString or string,

1347
00:58:07,591 --> 00:58:09,690
because a string implements them all as well but

1348
00:58:09,759 --> 00:58:12,393
you need NSString dot and then the name of the method.

1349
00:58:12,462 --> 00:58:14,995
And you can search, and there is case insensitive and

1350
00:58:15,064 --> 00:58:18,232
the standard compare and then the regular compare and etc.

1351
00:58:18,301 --> 00:58:22,335
Now one other thing about this is that,

1352
00:58:22,404 --> 00:58:27,273
these methods some of them are special in that,

1353
00:58:27,342 --> 00:58:32,211
it does to compare on the database side, okay.

1354
00:58:32,280 --> 00:58:36,082
Using SQL to do it, see what I'm saying?

1355
00:58:36,150 --> 00:58:39,251
It's not actually bringing all the data over.

1356
00:58:39,320 --> 00:58:41,786
Calling this method on every string, and

1357
00:58:41,855 --> 00:58:43,989
doing some kind of quicksort or something.

1358
00:58:44,057 --> 00:58:46,690
It's using super powerful sorting mechanisms that

1359
00:58:46,759 --> 00:58:48,993
are built into an SQL database, okay.

1360
00:58:49,062 --> 00:58:52,896
So, in fact, all of the NSString ones will do that.

1361
00:58:52,965 --> 00:58:56,834
Okay, so they're super duper efficient.

1362
00:58:56,902 --> 00:59:00,537
Now, if you wanted to use your own compare though,

1363
00:59:00,606 --> 00:59:01,971
it's not gonna be efficient.

1364
00:59:02,040 --> 00:59:02,838
Because it is gonna have to

1365
00:59:02,906 --> 00:59:05,674
bring all the data from the database into your memory so

1366
00:59:05,743 --> 00:59:07,509
it can run your little method over it.

1367
00:59:07,578 --> 00:59:08,776
So I strongly recommend

1368
00:59:08,845 --> 00:59:11,479
against using your own selector here.

1369
00:59:11,548 --> 00:59:13,413
I would use the standard selectors.

1370
00:59:13,482 --> 00:59:14,548
If you're gonna use your own selector

1371
00:59:14,617 --> 00:59:16,449
it's gotta be on a pretty small dataset.

1372
00:59:16,518 --> 00:59:20,487
Cuz it's not gonna be very efficient.

1373
00:59:22,123 --> 00:59:24,423
Notice that when we do the fetch request,

1374
00:59:24,492 --> 00:59:26,759
we don't just give it a sort descriptor,

1375
00:59:26,828 --> 00:59:29,427
we give it an array of sort descriptors.

1376
00:59:29,496 --> 00:59:33,632
That's the old sort by last name, and then first name.

1377
00:59:33,700 --> 00:59:34,432
Right? So if

1378
00:59:34,501 --> 00:59:37,167
we have 12 Smiths in there, we'll sort them and

1379
00:59:37,236 --> 00:59:38,936
the Smiths will be in the right spot.

1380
00:59:39,005 --> 00:59:40,870
And then all of the first names of the Smiths

1381
00:59:40,939 --> 00:59:41,971
will be in order by that.

1382
00:59:42,040 --> 00:59:44,240
So we can have as many of these sub sort by the one

1383
00:59:44,308 --> 00:59:45,675
thing, sub sort by the next thing,

1384
00:59:45,744 --> 00:59:47,476
sub sort by the next thing.

1385
00:59:47,544 --> 00:59:50,612
Basically, we can break ties with subsequent sorting and

1386
00:59:50,681 --> 00:59:53,749
that's why we give an array of sort descriptors.

1387
00:59:56,619 --> 01:00:00,688
Okay, so, that's the fetch request and

1388
01:00:00,757 --> 01:00:02,790
its sort descriptors and now the predicate.

1389
01:00:02,858 --> 01:00:06,192
Okay, the predicate is the guts of saying which tweets do

1390
01:00:06,261 --> 01:00:06,993
we want.

1391
01:00:07,062 --> 01:00:08,962
Which Twitter users do we want?

1392
01:00:09,030 --> 01:00:12,031
We create them with kind of interesting API.

1393
01:00:12,099 --> 01:00:17,069
It looks a lot like printf from C.

1394
01:00:17,137 --> 01:00:20,672
NSPredicate format colon, and then a string.

1395
01:00:20,740 --> 01:00:23,008
And the string is a format string.

1396
01:00:23,076 --> 01:00:24,608
And again, looks a lot like printf.

1397
01:00:24,677 --> 01:00:28,045
So the best way to explain this is probably by example.

1398
01:00:28,114 --> 01:00:30,114
But the way you're gonna learn this is you're gonna go

1399
01:00:30,182 --> 01:00:33,884
read the documentation for NSPredicate, you've got to go

1400
01:00:33,953 --> 01:00:37,053
read that documentation, in its class documentation,

1401
01:00:37,122 --> 01:00:39,856
there's gonna be a link that says, creating predicates,

1402
01:00:39,924 --> 01:00:42,858
or something like that, click on that, and go there, and

1403
01:00:42,927 --> 01:00:45,327
learn all the things you can put in this format string,

1404
01:00:45,396 --> 01:00:48,497
cuz it's all very specific to doing database queries, but

1405
01:00:48,566 --> 01:00:49,631
I'll show you some examples, so

1406
01:00:49,700 --> 01:00:51,666
you get an idea of what's going on here.

1407
01:00:51,735 --> 01:00:53,067
So here's the first one,

1408
01:00:53,136 --> 01:00:54,935
let's have the search string called foo.

1409
01:00:58,207 --> 01:01:00,039
All these searches then I'm gonna do right here

1410
01:01:00,108 --> 01:01:01,307
are tweet searches.

1411
01:01:01,375 --> 01:01:04,710
These are for predicates for searching for a tweet.

1412
01:01:04,778 --> 01:01:08,113
So first, I'm gonna find all the tweets whose text,

1413
01:01:08,182 --> 01:01:11,617
the actual tweet, the 140 characters of pure joy or

1414
01:01:11,685 --> 01:01:14,151
whatever, contains case sensitive.

1415
01:01:14,220 --> 01:01:15,320
Case insensitively.

1416
01:01:15,388 --> 01:01:18,222
That's what [c] means.

1417
01:01:18,290 --> 01:01:20,624
%@. %@ is a substitution variable,

1418
01:01:20,693 --> 01:01:22,659
and I have to give its value at the end.

1419
01:01:22,728 --> 01:01:25,328
And so I'm substituting search string.

1420
01:01:25,397 --> 01:01:28,298
Okay, note that I can't say, text contains foo.

1421
01:01:28,367 --> 01:01:32,902
I have to say, text contains %@ and then.

1422
01:01:32,971 --> 01:01:35,037
Put something at the end there.

1423
01:01:35,106 --> 01:01:36,237
Okay, so that's an obvious one,

1424
01:01:36,306 --> 01:01:38,739
I'm searching for all my tweets that contain foo.

1425
01:01:38,808 --> 01:01:41,309
How about this one?

1426
01:01:41,378 --> 01:01:46,213
I want all the tweets whose tweeter equals %@.

1427
01:01:46,282 --> 01:01:48,615
I'm going to put Joe in there as the substitution variable

1428
01:01:48,684 --> 01:01:52,986
and created after some date that I create.

1429
01:01:54,155 --> 01:01:56,489
See that? I'm using greater

1430
01:01:56,557 --> 01:01:57,556
than to do that.

1431
01:01:57,625 --> 01:01:59,324
And I'm doing && for and,

1432
01:01:59,393 --> 01:02:01,326
you can also use the word and there.

1433
01:02:02,295 --> 01:02:03,094
Okay? So that's all gonna be

1434
01:02:03,163 --> 01:02:05,129
the tweets created by Joe since that date.

1435
01:02:07,199 --> 01:02:09,198
You're starting to see the power of building the query

1436
01:02:09,267 --> 01:02:10,133
into the database, right?

1437
01:02:10,202 --> 01:02:12,601
If I had thousands of tweets, it'd be really easy to find

1438
01:02:12,670 --> 01:02:14,570
the ones since yesterday, for example.

1439
01:02:14,639 --> 01:02:16,839
I'll show you that in a second here.

1440
01:02:16,907 --> 01:02:21,910
Aand then I can also though, search through dot notation,

1441
01:02:21,979 --> 01:02:23,844
on other fields, in other entities, but

1442
01:02:23,913 --> 01:02:28,616
this tweeter.screenName equals percent @ sign%@ with CS193P,

1443
01:02:28,684 --> 01:02:30,617
that's still searching for tweets.

1444
01:02:30,686 --> 01:02:31,185
That's searching for

1445
01:02:31,253 --> 01:02:34,621
tweets whose tweeter's screen name is CS193P.

1446
01:02:34,689 --> 01:02:37,056
Do you see what it's doing there?

1447
01:02:37,125 --> 01:02:38,557
This is still a tweet predicate.

1448
01:02:38,626 --> 01:02:41,060
This is not a twitter user predicate.

1449
01:02:41,996 --> 01:02:43,094
Okay?

1450
01:02:43,163 --> 01:02:45,263
So here's a different predicate.

1451
01:02:45,332 --> 01:02:47,932
This one is for Twitter user.

1452
01:02:48,001 --> 01:02:49,234
So here I'm searching for all the Twitter users

1453
01:02:49,235 --> 01:02:50,468
Okay?

1454
01:02:52,438 --> 01:02:56,506
who has a Tweet whose text contains foo.

1455
01:02:57,743 --> 01:02:58,708
Okay?

1456
01:02:58,777 --> 01:03:01,009
So it even knows how to do a pluralistic

1457
01:03:01,078 --> 01:03:03,278
search right here where you've got tweets dot text that means

1458
01:03:03,346 --> 01:03:08,049
all the tweets, texts and doing contains and

1459
01:03:08,118 --> 01:03:10,919
we can do [c] if we wanted foo.

1460
01:03:10,987 --> 01:03:13,054
So that's a twitter user search right there.

1461
01:03:13,122 --> 01:03:14,555
the twitter users who have tweeted anything that includes

1462
01:03:14,556 --> 01:03:15,989
We're looking for

1463
01:03:16,058 --> 01:03:19,493
foo, again a powerful search, really easy to express.

1464
01:03:22,563 --> 01:03:24,197
Question.

1465
01:03:24,265 --> 01:03:27,733
>> [INAUDIBLE] >> So the question,

1466
01:03:27,801 --> 01:03:29,801
does it infer this from the name of the variable,

1467
01:03:29,869 --> 01:03:31,035
it's not inferring it,

1468
01:03:31,104 --> 01:03:34,172
it's actually using the name of the attribute tweets

1469
01:03:34,240 --> 01:03:36,674
right there and the name of the attribute text and it's

1470
01:03:36,742 --> 01:03:40,177
building a SQL statement that will go and do this fetch.

1471
01:03:40,246 --> 01:03:41,878
Okay now it's doing all that underneath the covers,

1472
01:03:41,947 --> 01:03:44,314
we don't care how, but it's doing it.

1473
01:03:47,952 --> 01:03:48,718
Yeah, compound predicate.

1474
01:03:48,787 --> 01:03:51,453
You can build a compound predicate like an and

1475
01:03:51,522 --> 01:03:52,887
predicate or an or predicate.

1476
01:03:52,956 --> 01:03:55,957
You could put or or and in the string, or

1477
01:03:56,025 --> 01:03:58,026
you could create separate predicates and and

1478
01:03:58,094 --> 01:04:00,794
them together by creating an NSCompoundPredicate.

1479
01:04:00,863 --> 01:04:02,195
And predicate with sub-predicates, and

1480
01:04:02,264 --> 01:04:03,864
just given an array of predicates and

1481
01:04:03,932 --> 01:04:04,664
it ands them together.

1482
01:04:04,733 --> 01:04:06,699
Why would you ever want to do this versus just putting and

1483
01:04:06,767 --> 01:04:07,600
or, or in there?

1484
01:04:07,669 --> 01:04:10,970
Well, maybe you're computing what the predicates are,

1485
01:04:11,038 --> 01:04:14,139
based on some, depending on what the user clicked on or

1486
01:04:14,208 --> 01:04:14,939
something, you're computing it, and

1487
01:04:15,008 --> 01:04:18,009
so you want to add these things you computed together.

1488
01:04:19,845 --> 01:04:22,980
All right, there's also function predicates.

1489
01:04:23,049 --> 01:04:25,382
Now these are super powerful predicates,

1490
01:04:25,451 --> 01:04:27,284
and you don't need these for your homework, so

1491
01:04:27,352 --> 01:04:30,120
don't worry too much about these, but they're cool.

1492
01:04:30,188 --> 01:04:32,621
You can even say, you have a search like this one,

1493
01:04:32,690 --> 01:04:35,291
tweets.@count > 5,

1494
01:04:35,360 --> 01:04:37,926
this is a Twitter user search, that finds

1495
01:04:37,994 --> 01:04:42,363
all the Twitter users who have more than 5 Tweets, okay?

1496
01:04:42,432 --> 01:04:45,266
So, @count is actually running, kind of a function in

1497
01:04:45,335 --> 01:04:49,003
the database, to go count the number of Tweets that

1498
01:04:49,071 --> 01:04:50,770
the Twitter user has.

1499
01:04:50,839 --> 01:04:52,639
So, again, you'll see all of this when you go look at

1500
01:04:52,707 --> 01:04:55,708
the NSPredicate documentation, it's incredibly powerful,

1501
01:04:55,777 --> 01:04:59,445
you can see you barely have to type anything in as the format

1502
01:04:59,514 --> 01:05:02,081
string, and you get these really powerful searches.

1503
01:05:04,218 --> 01:05:06,718
All right, so let's put it all together now to create

1504
01:05:06,787 --> 01:05:08,019
our fetch request, okay.

1505
01:05:08,088 --> 01:05:09,154
I'm gonna create,

1506
01:05:09,222 --> 01:05:11,189
in this case, a Twitter user fetch request.

1507
01:05:11,257 --> 01:05:13,857
So I'm saying a FetchRequest<TwitterUser> =

1508
01:05:13,926 --> 01:05:16,527
TwitterUser.fetchRequest(), then I'm gonna

1509
01:05:16,595 --> 01:05:18,161
create a time which was yesterday,

1510
01:05:18,230 --> 01:05:21,030
it's actually not, it's 24 hours ago.

1511
01:05:21,099 --> 01:05:24,133
Time interval since now, minus 24 times 60 times 60,

1512
01:05:24,202 --> 01:05:27,068
that's 24 hours ago, and I'm creating a predicate

1513
01:05:27,137 --> 01:05:31,239
that says, find me any Twitter users that have a Tweet that's

1514
01:05:31,308 --> 01:05:36,378
created before yesterday, or since yesterday I guess,

1515
01:05:36,447 --> 01:05:38,812
yes, created is greater than yesterday.

1516
01:05:38,881 --> 01:05:42,917
So I'm finding all the Twitter users who have created Tweets

1517
01:05:42,985 --> 01:05:45,419
in the last twenty-four hours, that's what this one does.

1518
01:05:45,487 --> 01:05:49,556
So any is a special term that means match any

1519
01:05:49,625 --> 01:05:51,424
of these things, and

1520
01:05:51,492 --> 01:05:54,828
these things are Tweets that are created since yesterday.

1521
01:05:56,096 --> 01:05:58,831
And I'm gonna sort the result by the actual name,

1522
01:05:58,899 --> 01:06:01,733
the real name of the Twitter user.

1523
01:06:01,802 --> 01:06:04,436
So I'm just doing sortDescriptor, key of name,

1524
01:06:04,504 --> 01:06:07,305
ascending true, I'm not specifying a selector, so

1525
01:06:07,374 --> 01:06:09,873
I'm gonna get kind of the default comparison.

1526
01:06:09,942 --> 01:06:12,743
Okay, that's it, so that's how you create a fetch request.

1527
01:06:12,811 --> 01:06:16,914
Now, since I have a fetch request, how do I make it go?

1528
01:06:16,982 --> 01:06:19,782
Give me those Tweets, give me those Twitter users.

1529
01:06:19,851 --> 01:06:22,618
We do that with the very simple method in context, so

1530
01:06:22,687 --> 01:06:25,721
we ask the context to do the fetch, and it will go out and

1531
01:06:25,790 --> 01:06:28,623
return an array of all those things,

1532
01:06:28,692 --> 01:06:31,627
sorted in the way the fetch request says to sort them.

1533
01:06:31,695 --> 01:06:33,228
Okay, simple as that.

1534
01:06:33,297 --> 01:06:37,832
The only thing not so simple, it throws, okay?

1535
01:06:37,901 --> 01:06:43,004
Just like context save throws, context execute also throws.

1536
01:06:43,073 --> 01:06:45,539
So, you could put in a try question mark,

1537
01:06:45,608 --> 01:06:48,942
in that case, if the execute fails, and usually it's gonna

1538
01:06:49,011 --> 01:06:51,411
fail because your predicate is wrong, or something.

1539
01:06:53,114 --> 01:06:56,182
Like your predicate just makes no sense then you could fail.

1540
01:06:56,251 --> 01:06:57,916
If it's gonna fail, you're gonna get back nil,

1541
01:06:57,985 --> 01:06:58,984
if you do try question mark,

1542
01:06:59,052 --> 01:07:00,652
remember that's what try question mark means.

1543
01:07:00,720 --> 01:07:03,054
It means try this, and if it fails, give back nil.

1544
01:07:03,123 --> 01:07:04,188
But it if doesn't fail,

1545
01:07:04,257 --> 01:07:06,524
then you're gonna get an optional array.

1546
01:07:06,592 --> 01:07:08,892
And that array is gonna be empty,

1547
01:07:08,961 --> 01:07:11,928
if it couldn't find anything that matches your request, or,

1548
01:07:11,997 --> 01:07:14,130
it's gonna be full of objects, okay?

1549
01:07:14,199 --> 01:07:16,832
Tweets, or Twitter users, an array of tweets, or

1550
01:07:16,901 --> 01:07:18,200
an array of Twitter users,

1551
01:07:18,268 --> 01:07:19,501
at least that's what it's gonna look like to you,

1552
01:07:19,570 --> 01:07:22,404
it's not quite that, looks like it, all right?

1553
01:07:22,472 --> 01:07:24,939
That's the result you're gonna get back, so, again,

1554
01:07:25,007 --> 01:07:26,974
super simple querying.

1555
01:07:27,042 --> 01:07:31,445
Now, you might be a little scared of doing this request,

1556
01:07:31,513 --> 01:07:35,415
what if it's matches a million things, okay?

1557
01:07:35,484 --> 01:07:38,818
Are you gonna get a million Tweets back in one

1558
01:07:38,887 --> 01:07:39,719
request like this?

1559
01:07:39,788 --> 01:07:41,621
The answer is no.

1560
01:07:41,689 --> 01:07:45,658
This array that you get back is really super smart array.

1561
01:07:45,726 --> 01:07:48,693
It doesn't actually bring the data in from the database,

1562
01:07:48,762 --> 01:07:51,496
until you start asking for it, okay?

1563
01:07:51,565 --> 01:07:53,964
So until I ask for the Twitter user,

1564
01:07:54,033 --> 01:07:56,133
a certain Twitter user's information,

1565
01:07:56,201 --> 01:07:58,401
the Twitter user's name, the Twitter user's screen name,

1566
01:07:58,470 --> 01:08:00,403
the Twitter user did not get faulted from the database.

1567
01:08:00,472 --> 01:08:01,904
This is called faulting, okay?

1568
01:08:01,973 --> 01:08:03,706
And so, these objects, you can imagine,

1569
01:08:03,775 --> 01:08:05,941
they're kind of shells, empty shells.

1570
01:08:06,010 --> 01:08:07,276
And until you crack open the shell and

1571
01:08:07,344 --> 01:08:08,810
start looking inside,

1572
01:08:08,879 --> 01:08:10,811
it doesn't actually get the data for you.

1573
01:08:10,880 --> 01:08:12,546
And the reason this matters to you is,

1574
01:08:12,615 --> 01:08:15,482
if you go in the debugger, or you do a print statement,

1575
01:08:15,551 --> 01:08:20,220
like this one where you say, for user in recentTweeters

1576
01:08:20,289 --> 01:08:23,423
fetched user whatever, when you print that out,

1577
01:08:23,492 --> 01:08:26,159
it's not gonna print the, a Tweeter user object,

1578
01:08:26,227 --> 01:08:29,261
it's gonna print some kind of faulting shel.

1579
01:08:29,330 --> 01:08:30,529
Because you haven't actually asked for

1580
01:08:30,598 --> 01:08:32,631
any of the data inside that thing yet, so

1581
01:08:32,699 --> 01:08:34,065
it hasn't faulted yet.

1582
01:08:34,134 --> 01:08:34,899
But if you say, for

1583
01:08:34,968 --> 01:08:38,169
user in recentTweeters and say fetched user named, and

1584
01:08:38,238 --> 01:08:41,438
now you say user.name, now you are faulting this object in.

1585
01:08:41,507 --> 01:08:42,205
In fact, this for

1586
01:08:42,274 --> 01:08:45,809
loop would fault all these objects in to memory.

1587
01:08:45,877 --> 01:08:47,410
Okay, fetch them all, cuz you're asking for

1588
01:08:47,479 --> 01:08:48,411
the name of every single one.

1589
01:08:48,480 --> 01:08:50,445
Boom, fault, fault, fault, they're all coming in.

1590
01:08:50,514 --> 01:08:53,449
Now, it doesn't do it one by one, it faults in batches,

1591
01:08:53,517 --> 01:08:55,717
it's really high performance, so,

1592
01:08:55,785 --> 01:08:57,752
you know, don't worry about that.

1593
01:08:57,821 --> 01:09:00,455
But just, I just don't want you to be surprised

1594
01:09:00,524 --> 01:09:01,054
when you go in the debugger and

1595
01:09:01,123 --> 01:09:02,957
you're like, I printed out this Twitter, user and

1596
01:09:03,026 --> 01:09:04,858
there's no screen name, what's going on?

1597
01:09:04,927 --> 01:09:06,492
Well, it hasn't faulted it in.

1598
01:09:06,561 --> 01:09:07,993
In fact, the debugger you could say,

1599
01:09:08,062 --> 01:09:09,862
print the user.name,

1600
01:09:09,931 --> 01:09:13,332
and it would fault it in, okay, give it to you.

1601
01:09:15,369 --> 01:09:17,568
All right, I told you I was gonna talk about Core Data

1602
01:09:17,637 --> 01:09:19,470
thread safety, so here it is.

1603
01:09:19,539 --> 01:09:22,873
NSManagedObjectContext, the context thing,

1604
01:09:22,942 --> 01:09:24,775
that thing that you're sending executes to,

1605
01:09:24,844 --> 01:09:27,544
that thing that you're hitting save, the things that you're

1606
01:09:27,613 --> 01:09:30,280
using to create Tweet, Tweet, subcontext,

1607
01:09:30,349 --> 01:09:33,817
colon whatever, that handle on database is not thread safe.

1608
01:09:35,052 --> 01:09:38,420
A context can only be used on the queue

1609
01:09:38,489 --> 01:09:41,156
that it was created on, period.

1610
01:09:41,225 --> 01:09:44,492
If you past a context to another queue,

1611
01:09:44,561 --> 01:09:47,194
like you tried to dispatch off to some

1612
01:09:47,263 --> 01:09:50,030
global concurrent queue, and you pasted the context, or

1613
01:09:50,099 --> 01:09:52,866
even just pasted a Tweet, okay, that's not gonna work,

1614
01:09:52,935 --> 01:09:55,335
cuz that Tweet was created on this other context.

1615
01:09:55,403 --> 01:09:56,870
So in fact, not only the context,

1616
01:09:56,939 --> 01:09:59,372
but everything that you create on that context

1617
01:09:59,441 --> 01:10:01,907
has to all be done in the same queue.

1618
01:10:01,976 --> 01:10:03,175
So now you're probably thinking,

1619
01:10:03,244 --> 01:10:07,145
well how the heck do I do multithreading then?

1620
01:10:07,214 --> 01:10:10,315
Cuz a database especially, you can imagine, for

1621
01:10:10,384 --> 01:10:13,584
temple one to load your database off the main queue,

1622
01:10:13,653 --> 01:10:15,853
cuz you, you might be loading lots and lots of things.

1623
01:10:15,922 --> 01:10:16,586
Now your queries,

1624
01:10:16,655 --> 01:10:19,255
your probably gonna do those on the main queue because,

1625
01:10:19,324 --> 01:10:20,890
the user's looking at that information.

1626
01:10:20,959 --> 01:10:22,157
You want it to be highly responsive.

1627
01:10:22,226 --> 01:10:25,794
Okay, it's probably worth, and core data is super fast,

1628
01:10:25,863 --> 01:10:27,029
especially with queries.

1629
01:10:27,097 --> 01:10:28,797
So, you could probably do that on the main queue.

1630
01:10:28,866 --> 01:10:29,464
But loading it up,

1631
01:10:29,532 --> 01:10:31,432
you probably don't want to do that.

1632
01:10:31,501 --> 01:10:33,734
All right, so, how do we do multithreading?

1633
01:10:33,803 --> 01:10:36,570
Although that we do multithreading in Core Data,

1634
01:10:36,638 --> 01:10:43,110
is each database can have multiple contexts, okay?

1635
01:10:43,179 --> 01:10:47,247
So, the database underneath, is multithreaded,

1636
01:10:47,315 --> 01:10:50,850
it can have multiple contexts writing to it.

1637
01:10:50,918 --> 01:10:52,784
Okay, completely different context,

1638
01:10:52,853 --> 01:10:55,820
writing to the same database, in different queue's even, so

1639
01:10:55,889 --> 01:10:57,622
it's fully multithreaded.

1640
01:10:57,691 --> 01:11:00,992
So that means we had to have a context for every queue.

1641
01:11:01,060 --> 01:11:03,361
Whatever queue we're going to access the database,

1642
01:11:03,430 --> 01:11:04,896
we have to a context in every queue.

1643
01:11:04,964 --> 01:11:07,230
Now I'm gonna show you how to create a context, or

1644
01:11:07,299 --> 01:11:07,997
on another queue, so

1645
01:11:08,066 --> 01:11:10,467
you can do something with that queue in a second here.

1646
01:11:10,535 --> 01:11:12,101
But first I want to talk about this important

1647
01:11:12,170 --> 01:11:15,471
method in context called performBlock.

1648
01:11:15,539 --> 01:11:17,373
performBlock just takes a closure,

1649
01:11:17,441 --> 01:11:18,807
a closure that takes no arguments,

1650
01:11:18,875 --> 01:11:22,677
returns no arguments, and it will ensure, this is

1651
01:11:22,746 --> 01:11:27,381
an insurance method, it will ensure that everything inside

1652
01:11:27,450 --> 01:11:32,086
that closure happens on the right queue for that context.

1653
01:11:32,154 --> 01:11:34,955
Okay, so this, don't get confused,

1654
01:11:35,024 --> 01:11:38,125
this method does not dispatch, you know,

1655
01:11:38,193 --> 01:11:42,562
cause background thrading, this is just making sure that,

1656
01:11:42,631 --> 01:11:45,998
that closure executes on the right queue.

1657
01:11:46,067 --> 01:11:48,433
So this is a way that you can kind of be safe.

1658
01:11:48,502 --> 01:11:50,735
And some might argue you should put performBlock around

1659
01:11:50,804 --> 01:11:53,238
every single call to every Core Data thing you ever do,

1660
01:11:53,307 --> 01:11:56,307
because that will ensure that you'll never have a problem

1661
01:11:56,376 --> 01:11:59,811
where you're accessing the context not on it's queue.

1662
01:11:59,879 --> 01:12:01,778
Okay, it accidentally, you got some bad code.

1663
01:12:01,847 --> 01:12:06,483
Now, that might be a little bit overkill especially if

1664
01:12:06,552 --> 01:12:09,352
you're mostly using the main queue anyway, and

1665
01:12:09,421 --> 01:12:12,355
you really, maybe you only use background queues for

1666
01:12:12,424 --> 01:12:15,324
this tiny little bit of processing on the side.

1667
01:12:15,393 --> 01:12:17,993
It's not like you have the tons context and

1668
01:12:18,062 --> 01:12:20,695
lots of different queues all going at each other.

1669
01:12:20,764 --> 01:12:22,564
So, it might be overkill.

1670
01:12:22,632 --> 01:12:24,466
But if you're doing anything where you have,

1671
01:12:24,534 --> 01:12:27,202
truly have multiple context on multiple queues and

1672
01:12:27,270 --> 01:12:31,572
they're access and things, this is a good way to be safe.

1673
01:12:31,641 --> 01:12:35,175
Okay, so all this does is it makes it so you are safe.

1674
01:12:35,243 --> 01:12:39,346
The code inside that block will be executed on the proper

1675
01:12:39,415 --> 01:12:40,947
queue for that context.

1676
01:12:41,015 --> 01:12:43,516
Even if it has to dispatch, it will do it if it has to.

1677
01:12:43,585 --> 01:12:44,917
If it doesn't have to dispatch,

1678
01:12:44,986 --> 01:12:47,786
if you're on the right queue, it'll just execute it, fine.

1679
01:12:47,855 --> 01:12:49,387
But if you're on the wrong queue right now and

1680
01:12:49,456 --> 01:12:50,055
you execute this,

1681
01:12:50,124 --> 01:12:52,056
it will dispatch it to the right queue.

1682
01:12:52,125 --> 01:12:53,991
There's also performBlockAndWait,

1683
01:12:54,060 --> 01:12:55,659
which will get it on the right queue and

1684
01:12:55,728 --> 01:12:58,062
wait until it's done, and then continue in your queue.

1685
01:12:59,298 --> 01:13:01,597
Okay, but this doesn't really talk about,

1686
01:13:01,666 --> 01:13:05,100
how do I get another context in a different thread, right?

1687
01:13:05,169 --> 01:13:07,969
I wanna do some code on another thread.

1688
01:13:08,038 --> 01:13:09,370
Where do I get a context?

1689
01:13:09,439 --> 01:13:12,840
The only context I know how to get right now is viewContext.

1690
01:13:12,909 --> 01:13:14,909
That's the main queue's context,

1691
01:13:14,978 --> 01:13:16,143
that's the only only one I can get.

1692
01:13:16,212 --> 01:13:18,812
Okay, well, you're gonna use this really cool method

1693
01:13:18,881 --> 01:13:20,013
in persistentContainer.

1694
01:13:20,082 --> 01:13:24,050
This is new in iOS 10 and a really cool method,

1695
01:13:24,119 --> 01:13:25,185
super cool.

1696
01:13:25,253 --> 01:13:27,954
It makes it really easy to do background process on

1697
01:13:28,022 --> 01:13:29,188
Core Data.

1698
01:13:29,256 --> 01:13:31,256
It's called performBackgroundTask.

1699
01:13:31,324 --> 01:13:34,292
Remember, this is a function on persistentContainer that

1700
01:13:34,361 --> 01:13:36,327
you get from the AppDelegate.

1701
01:13:36,396 --> 01:13:38,129
And this takes a closure.

1702
01:13:38,197 --> 01:13:42,866
This closure has one argument, the argument is a context.

1703
01:13:42,935 --> 01:13:45,569
And that context is appropriate for use

1704
01:13:45,638 --> 01:13:49,172
on this other thread that this is going to create for you.

1705
01:13:49,240 --> 01:13:52,107
So this performBackgroundTask finds another queue,

1706
01:13:52,176 --> 01:13:55,044
not the main queue, some other queue.

1707
01:13:55,113 --> 01:13:58,346
And it creates a context in that other queue, and it

1708
01:13:58,415 --> 01:14:02,584
executes your closure on that other queue in the background.

1709
01:14:03,853 --> 01:14:05,153
Now, it's a convenience method.

1710
01:14:05,221 --> 01:14:07,855
So if you really needed to control the quality of

1711
01:14:07,923 --> 01:14:10,724
service, for example, the queue and all the, okay, well,

1712
01:14:10,793 --> 01:14:11,558
you can't use this.

1713
01:14:11,626 --> 01:14:14,694
But 99.99% of the time, whatever quality of

1714
01:14:14,762 --> 01:14:17,330
service that queue is getting is the right one for

1715
01:14:17,398 --> 01:14:19,499
Core Data cuz Core Data knows its business.

1716
01:14:20,801 --> 01:14:21,633
So you're gonna do it.

1717
01:14:21,702 --> 01:14:25,169
Now, inside this closure couple of things really

1718
01:14:25,238 --> 01:14:26,037
be careful of.

1719
01:14:26,105 --> 01:14:28,839
One, never use viewContext in here.

1720
01:14:28,908 --> 01:14:32,242
Do you see why that would be horrendously bad to

1721
01:14:32,311 --> 01:14:34,911
use viewContext inside this closure?

1722
01:14:34,980 --> 01:14:37,781
Because this closure by definition is not executing on

1723
01:14:37,849 --> 01:14:39,415
the main queue.

1724
01:14:39,484 --> 01:14:41,350
By definition this closure is on a separate

1725
01:14:41,419 --> 01:14:42,718
queue on a background queue.

1726
01:14:42,787 --> 01:14:44,452
That's the whole point of this thing,

1727
01:14:44,521 --> 01:14:46,121
is to put this thing on another queue.

1728
01:14:46,189 --> 01:14:48,255
So never use viewContext in there,

1729
01:14:48,324 --> 01:14:50,257
that's why it's in red, okay?

1730
01:14:50,326 --> 01:14:55,062
The second thing is don't forget to save this context.

1731
01:14:55,130 --> 01:14:56,629
If you do a whole bunch of stuff in here and

1732
01:14:56,698 --> 01:14:58,264
you don't save, you just did for

1733
01:14:58,333 --> 01:14:59,699
nothing cuz you did in memory.

1734
01:14:59,768 --> 01:15:02,601
And then this block went away, you're never gonna get that

1735
01:15:02,670 --> 01:15:05,804
context back again, that data is lost.

1736
01:15:05,873 --> 01:15:08,507
Which all gonna leave the heap and then nothing ever happens.

1737
01:15:08,575 --> 01:15:10,875
It never gonna get committed to the database.

1738
01:15:10,944 --> 01:15:12,944
So, don't forget to save before you leave.

1739
01:15:14,113 --> 01:15:15,679
Now, when you save,

1740
01:15:15,748 --> 01:15:18,515
it will push it down to the database and

1741
01:15:18,584 --> 01:15:23,186
your other context like your viewContext will see it, okay?

1742
01:15:23,255 --> 01:15:26,022
And so these two contexts, the one that's happening on this

1743
01:15:26,091 --> 01:15:27,423
background and the viewContext.

1744
01:15:27,492 --> 01:15:29,291
They're working on the same database, so

1745
01:15:29,360 --> 01:15:30,192
when this one saves,

1746
01:15:30,261 --> 01:15:33,027
boom this guys is gonna start seeing those changes.

1747
01:15:33,096 --> 01:15:36,430
I'm gonna talk a little bit how react to seeing those

1748
01:15:36,499 --> 01:15:38,266
changes in a minute here.

1749
01:15:39,468 --> 01:15:41,334
Okay, so, everyone understand this?

1750
01:15:41,403 --> 01:15:43,703
Cuz you're gonna have to do this in assignment five.

1751
01:15:43,772 --> 01:15:47,040
And I want you to do all your loading off the main queue,

1752
01:15:47,109 --> 01:15:49,709
and all your fetching on the main queue.

1753
01:15:50,845 --> 01:15:56,315
All right, Core Data is huge.

1754
01:15:56,384 --> 01:15:56,948
Huge.

1755
01:15:58,351 --> 01:15:59,484
I can't cover it all.

1756
01:16:00,686 --> 01:16:02,085
It's got optimistic locking, for

1757
01:16:02,154 --> 01:16:03,053
those of you that know about database.

1758
01:16:03,121 --> 01:16:06,423
It's got optimistic locking and all that database stuff.

1759
01:16:06,491 --> 01:16:10,025
It has full undo, redo, which is incredible.

1760
01:16:10,094 --> 01:16:13,462
It obviously knows how to roll back unsaved changes.

1761
01:16:13,531 --> 01:16:15,330
Okay, if you have changes in memory and

1762
01:16:15,398 --> 01:16:16,297
you want to roll some of them back,

1763
01:16:16,366 --> 01:16:17,966
you can do that before you save.

1764
01:16:18,034 --> 01:16:20,534
It knows about staleness, like, if I make a fetch,

1765
01:16:20,603 --> 01:16:23,870
how long before I really wanna fetch it again because I don't

1766
01:16:23,939 --> 01:16:26,206
trust that the data hasn't changed, right?

1767
01:16:26,274 --> 01:16:28,574
How long it takes for the data to get stale.

1768
01:16:28,643 --> 01:16:31,710
And a lot of other things in the Core Data.

1769
01:16:31,779 --> 01:16:33,212
So, I can't cover it all,

1770
01:16:33,280 --> 01:16:35,247
there's not enough time to do that.

1771
01:16:35,316 --> 01:16:37,749
Cuz we're trying to talk about a whole another topic about

1772
01:16:37,818 --> 01:16:39,217
But you'll want to check the documentation, you won't need

1773
01:16:39,218 --> 01:16:40,617
Core Data here.

1774
01:16:40,687 --> 01:16:43,521
anything else of this stuff to do your homeworks, of course,

1775
01:16:43,589 --> 01:16:45,689
I'm just trying to get you started with this.

1776
01:16:45,757 --> 01:16:48,224
But you need to know that this stuff is in there, so that

1777
01:16:48,293 --> 01:16:52,562
one day when you go out and do some significant iOS database

1778
01:16:52,631 --> 01:16:54,764
stuff, you'll know that these features are out there.

1779
01:16:56,300 --> 01:17:01,503
All right, the next topic here is Core Data and UITableView.

1780
01:17:01,572 --> 01:17:05,306
As you can imagine, this is a marriage made in heaven, okay?

1781
01:17:05,375 --> 01:17:06,908
Because you got this database,

1782
01:17:06,977 --> 01:17:09,244
got all this big data sets in there and

1783
01:17:09,312 --> 01:17:13,681
what is the UI we use to show big data sets in iOS?

1784
01:17:13,750 --> 01:17:14,982
UITableView.

1785
01:17:15,051 --> 01:17:18,152
Okay, UITableView is great at showing arbitrary large

1786
01:17:19,487 --> 01:17:22,288
data sets in our arbitrary UIs, right?

1787
01:17:22,357 --> 01:17:23,655
We can do custom table view cell,

1788
01:17:23,724 --> 01:17:26,191
we can do anything UI we want.

1789
01:17:26,260 --> 01:17:30,429
So, this is so common that Apple has invented this very

1790
01:17:30,497 --> 01:17:33,965
important class called NSFetchedResultsController.

1791
01:17:34,034 --> 01:17:36,333
This is not a viewController, okay?

1792
01:17:36,402 --> 01:17:39,403
This is a controller that controls Core Data and

1793
01:17:39,472 --> 01:17:40,571
UITableView talking together,

1794
01:17:40,639 --> 01:17:44,607
but it's not in its fetch results view controller, okay?

1795
01:17:44,676 --> 01:17:47,277
And all this NSFetchedResultsController

1796
01:17:47,346 --> 01:17:50,513
does is it hooks up an NSFetchRequest that you create

1797
01:17:50,582 --> 01:17:52,481
to a UITableView.

1798
01:17:52,550 --> 01:17:55,651
And it hooks them up in such a strong way that if anything

1799
01:17:55,720 --> 01:17:59,087
changes in the database that would cause that fetch request

1800
01:17:59,156 --> 01:18:02,090
to return different results, it updates the table

1801
01:18:02,158 --> 01:18:04,993
automatically, you don't have to do anything.

1802
01:18:05,062 --> 01:18:09,096
So this is an active live hookup between

1803
01:18:09,165 --> 01:18:14,467
the NSFetchRequest and the TableView, okay?

1804
01:18:14,536 --> 01:18:17,370
Even if some other context are changing the data, it doesn't

1805
01:18:17,439 --> 01:18:20,807
matter, it's always keeping that TableView up to date.

1806
01:18:21,977 --> 01:18:25,011
So I'm gonna talk about how we do this,

1807
01:18:25,080 --> 01:18:28,980
how we use an NSFetchedResultsController.

1808
01:18:29,049 --> 01:18:31,550
I'm even gonna provide you some kind of free code

1809
01:18:31,619 --> 01:18:32,984
to do some of it.

1810
01:18:33,053 --> 01:18:34,586
You'll have to type in a little bit of the rest of it.

1811
01:18:34,654 --> 01:18:37,455
But it's, it's pretty easy to do.

1812
01:18:39,191 --> 01:18:40,657
So how fundamentally does

1813
01:18:40,726 --> 01:18:42,725
NSFetchedResultsController work?

1814
01:18:42,794 --> 01:18:46,596
Two ways, one, it has a delegate and

1815
01:18:46,664 --> 01:18:50,600
that delegate you set to be your UITableViewController.

1816
01:18:50,668 --> 01:18:53,001
And whenever the FetchResultsController sees

1817
01:18:53,070 --> 01:18:53,802
something happening

1818
01:18:53,871 --> 01:18:56,638
in the database that would affect that fetchRequest,

1819
01:18:56,706 --> 01:18:59,707
it tells the table view controller, hey, do this,

1820
01:18:59,776 --> 01:19:02,843
add this row, add a section, reload this row, whatever,

1821
01:19:02,911 --> 01:19:09,349
it uses UITableView primitives to update the table, okay?

1822
01:19:09,418 --> 01:19:10,350
I'm gonna show you,

1823
01:19:10,419 --> 01:19:12,318
I'm gonna give you the code that does that part of it,

1824
01:19:12,387 --> 01:19:14,454
that implements the NSFetchedResultsController's

1825
01:19:14,522 --> 01:19:16,422
delegate, okay, so that's one way it does it.

1826
01:19:16,491 --> 01:19:18,758
The other way that the NSFetchedResultsController

1827
01:19:18,826 --> 01:19:21,493
works is that it provides implementation for

1828
01:19:21,562 --> 01:19:24,763
all of your UITableView data sources methods, right?

1829
01:19:24,831 --> 01:19:26,631
Because the contents of your table

1830
01:19:26,700 --> 01:19:28,131
are coming out of the database,

1831
01:19:28,200 --> 01:19:30,668
so NSFetchedResultsController lets you know all of them, how

1832
01:19:30,736 --> 01:19:33,436
many sections, how many rows and sections all that stuff.

1833
01:19:33,505 --> 01:19:35,204
In fact, this is what it looks like,

1834
01:19:35,273 --> 01:19:37,874
this is the implementation that you're gonna put in to

1835
01:19:37,942 --> 01:19:41,077
your controller when you have fetchedResultsController.

1836
01:19:41,146 --> 01:19:42,077
The first thing you're gonna

1837
01:19:42,146 --> 01:19:44,212
do is you're gonna create a fetchedResultsController, and

1838
01:19:44,281 --> 01:19:46,448
I'm gonna show you how to do that in a moment.

1839
01:19:46,516 --> 01:19:48,382
And so you're always gonna have a var called

1840
01:19:48,451 --> 01:19:50,518
fetchedResultsController, and

1841
01:19:50,586 --> 01:19:53,386
it's gonna be of type NSFetchedResultsController.

1842
01:19:53,455 --> 01:19:56,056
And when you have that var, now you can implement your

1843
01:19:56,125 --> 01:19:59,659
sections, number of sections in TableView by saying return

1844
01:19:59,728 --> 01:20:04,731
fetchedResultsController .sections.count, okay?

1845
01:20:04,800 --> 01:20:06,231
Those are a lot of optionals in there, so

1846
01:20:06,300 --> 01:20:08,934
we'll default to one section.

1847
01:20:09,003 --> 01:20:10,969
And then to get the number of rows in a section,

1848
01:20:11,038 --> 01:20:12,771
you're just gonna say the,

1849
01:20:12,839 --> 01:20:14,539
you're gonna get the sections first by saying

1850
01:20:14,608 --> 01:20:16,640
fetchedResultsController?.sec- tions.

1851
01:20:16,709 --> 01:20:21,445
And as long as you have some sections, sections.count

1852
01:20:21,514 --> 01:20:24,748
greater than zero, then you're gonna return the sections in

1853
01:20:24,817 --> 01:20:27,650
that section that's passed to you number of objects.

1854
01:20:27,719 --> 01:20:31,087
Okay, so that code, that's it, that's all of your, those two

1855
01:20:31,155 --> 01:20:34,390
methods, that's the entire implementation if you're using

1856
01:20:34,458 --> 01:20:36,491
a fetchedResultsController, okay?

1857
01:20:36,560 --> 01:20:39,394
And then of course, there's cellForRowAt, okay,

1858
01:20:39,463 --> 01:20:41,629
you gotta implement that, that one too,

1859
01:20:41,698 --> 01:20:44,298
you're gonna use fetchedResultsController.

1860
01:20:44,367 --> 01:20:48,869
And the most important thing about cellForRowAt is you need

1861
01:20:48,938 --> 01:20:53,274
to know what's at that row, which thing in my database is

1862
01:20:53,343 --> 01:20:56,909
at that row in that section in my table.

1863
01:20:56,978 --> 01:21:00,480
And you get that by asking the fetchedResultsController with

1864
01:21:00,549 --> 01:21:02,481
this method objectAtIndexPath.

1865
01:21:02,550 --> 01:21:05,117
So you just say fetchedResultsController,

1866
01:21:05,186 --> 01:21:08,520
give me the object, and that object is gonna be a tweet, or

1867
01:21:08,589 --> 01:21:11,189
a Twitter user, or whatever, some entity.

1868
01:21:11,258 --> 01:21:13,691
Give me an object at the index path

1869
01:21:13,760 --> 01:21:17,262
that cellForRowAt indexPath is asking me for.

1870
01:21:17,330 --> 01:21:19,363
So now I have the Twitter user or the tweet,

1871
01:21:19,432 --> 01:21:21,232
I can easily load up my UI.

1872
01:21:21,300 --> 01:21:24,667
You know, pass it off to my UI, custom UITableView cell,

1873
01:21:24,736 --> 01:21:25,902
or if I have a subtitle cell,

1874
01:21:25,971 --> 01:21:27,970
just take a couple of things out of there and

1875
01:21:28,039 --> 01:21:30,105
put it in the text label in the detailed text label,

1876
01:21:30,174 --> 01:21:31,340
you see what I'm saying?

1877
01:21:31,408 --> 01:21:34,642
But you can see that the fetchedResultsController,

1878
01:21:34,711 --> 01:21:37,512
that code in yellow right there in the middle of

1879
01:21:37,581 --> 01:21:39,180
cellForRowAt indexPath,

1880
01:21:39,249 --> 01:21:42,416
that's doing all the work to figure out what tweet or

1881
01:21:42,485 --> 01:21:45,653
what Twitter user is at this row in the table, okay?

1882
01:21:45,721 --> 01:21:47,120
So those code on the last slide and

1883
01:21:47,189 --> 01:21:49,789
the code on this slide, you'll have to type that code in any

1884
01:21:49,858 --> 01:21:53,392
time you're using an NSFetchedResultsController.

1885
01:21:53,461 --> 01:21:56,028
Now, on the previous slide, one of the things was var

1886
01:21:56,097 --> 01:21:58,330
fetchedResultsController equals something.

1887
01:21:58,399 --> 01:22:00,566
So now let's talk about how we create

1888
01:22:00,634 --> 01:22:03,001
a fetchedResultsController, okay?

1889
01:22:03,070 --> 01:22:04,769
So this is what the initializer for

1890
01:22:04,838 --> 01:22:07,304
NSFetchedResultsController looks like here.

1891
01:22:07,373 --> 01:22:09,273
It takes a request, a context.

1892
01:22:09,342 --> 01:22:11,074
Obviously, it doesn't know what database

1893
01:22:11,143 --> 01:22:12,375
we're fetching in.

1894
01:22:12,444 --> 01:22:15,444
And then it's got a sectionNameKeyPath.

1895
01:22:15,513 --> 01:22:19,682
That sectionNameKeyPath is the var in

1896
01:22:19,751 --> 01:22:24,519
that entity that, whose value is a string,

1897
01:22:24,588 --> 01:22:28,891
which is the title of the section it's in, okay?

1898
01:22:28,959 --> 01:22:31,425
That's how you do sections with fetchedResultsController.

1899
01:22:31,494 --> 01:22:33,928
You just have to, and you might have to invent this or

1900
01:22:33,997 --> 01:22:35,195
even calculate this.

1901
01:22:35,264 --> 01:22:38,265
But all of your tweets or all your Twitter users, if they're

1902
01:22:38,333 --> 01:22:40,800
gonna be in sections, they all have to have a var,

1903
01:22:40,869 --> 01:22:43,870
which is a string, which is the section they're in, okay,

1904
01:22:43,939 --> 01:22:45,738
the name of the section they're in.

1905
01:22:45,807 --> 01:22:49,341
And as long as they have that, then the fetchedResults will,

1906
01:22:49,410 --> 01:22:50,843
will make the sections and

1907
01:22:50,911 --> 01:22:53,344
put them all in there in the right section.

1908
01:22:53,413 --> 01:22:56,681
And we'll talk about cacheName in a second here.

1909
01:22:56,749 --> 01:22:58,950
So we have to create a fetchRequest to put in here.

1910
01:22:59,019 --> 01:23:00,818
So here's an example of creating a fetchRequest for

1911
01:23:00,887 --> 01:23:01,719
tweets, right?

1912
01:23:01,788 --> 01:23:03,486
So you recognize that first line there,

1913
01:23:03,555 --> 01:23:05,655
creating a fetchRequest for tweets.

1914
01:23:05,723 --> 01:23:09,625
And I'm gonna sort by when the tweets were created, okay,

1915
01:23:09,694 --> 01:23:11,427
when the tweet was tweeted out.

1916
01:23:11,496 --> 01:23:15,664
And I'm gonna look for all the tweets whose tweeter's name

1917
01:23:15,732 --> 01:23:18,734
equals some name, the name, okay?

1918
01:23:18,803 --> 01:23:20,468
So it's gonna get all those tweets, and

1919
01:23:20,537 --> 01:23:22,903
I'm gonna set that request as the first argument there,

1920
01:23:22,972 --> 01:23:24,471
to NSFetchedResultsController.

1921
01:23:24,540 --> 01:23:27,807
By the way, notice NSFetchedResultsController is

1922
01:23:27,876 --> 01:23:31,612
also a generic type, and NSFetchedResultsController can

1923
01:23:31,681 --> 01:23:34,313
only control fetches for a certain type.

1924
01:23:34,382 --> 01:23:36,915
So you have to say what type, okay, what type of entity that

1925
01:23:36,984 --> 01:23:39,618
your FetchController is doing, and these are the same type of

1926
01:23:39,687 --> 01:23:41,587
things that are in the rows of your table.

1927
01:23:42,956 --> 01:23:45,056
Now that cacheName at the bottom is interesting.

1928
01:23:45,124 --> 01:23:48,726
That is actually going to permanently cache the results.

1929
01:23:48,794 --> 01:23:49,793
it's gonna get the results out of the database and

1930
01:23:49,794 --> 01:23:50,793
In other words,

1931
01:23:50,863 --> 01:23:55,532
store on disk the result in some internal format.

1932
01:23:55,601 --> 01:23:57,667
And that's cool, and that storage, by the way,

1933
01:23:57,735 --> 01:23:58,968
if you quit your app and come back,

1934
01:23:59,037 --> 01:24:01,904
it will still use that cache, so it's quite efficient.

1935
01:24:01,973 --> 01:24:03,605
But you have to be a little bit careful.

1936
01:24:03,674 --> 01:24:06,708
You cannot change anything about your request.

1937
01:24:06,777 --> 01:24:09,578
As soon as you change anything about your request, like

1938
01:24:09,646 --> 01:24:12,713
the name, the tweeter.name that you're searching for, or

1939
01:24:12,782 --> 01:24:15,082
what you're sorting by, or anything.

1940
01:24:15,151 --> 01:24:17,718
Now that cache is invalid, and you'll have to invalidate that

1941
01:24:17,786 --> 01:24:21,354
cache, okay, and there's an API in there for doing that.

1942
01:24:21,423 --> 01:24:24,057
You can pass nil there if you don't wanna do the caching,

1943
01:24:24,125 --> 01:24:28,027
which for most reasonable sized datasets perfectly fine,

1944
01:24:28,095 --> 01:24:29,662
you don't really need the caching.

1945
01:24:29,730 --> 01:24:31,363
But I just wanna emphasize that if you change your

1946
01:24:31,432 --> 01:24:34,700
request, your cache is now invalid.

1947
01:24:34,768 --> 01:24:38,169
And about that section key thing, something to be careful

1948
01:24:38,237 --> 01:24:42,006
about there, too, is that whatever your sortDescriptors

1949
01:24:42,075 --> 01:24:46,410
say that your rows would sort in, that has to be

1950
01:24:46,478 --> 01:24:51,515
exactly the same order that your sections was sorted in.

1951
01:24:51,583 --> 01:24:53,484
In other words, the FetchedResultsController

1952
01:24:53,552 --> 01:24:55,918
doesn't know how to like move things around

1953
01:24:55,987 --> 01:24:58,521
because they sort out of order of their sections.

1954
01:24:58,590 --> 01:25:00,556
That's why a lot of times that we're doing sections,

1955
01:25:00,624 --> 01:25:04,360
the first sortDescriptor will be sort by the section key

1956
01:25:04,428 --> 01:25:05,927
name var, right?

1957
01:25:05,996 --> 01:25:08,163
And then the second one will be sort by what we

1958
01:25:08,231 --> 01:25:10,865
really wanna sort by, because we have to make sure

1959
01:25:10,934 --> 01:25:13,935
that our entire table is sorted in section order.

1960
01:25:15,338 --> 01:25:16,269
You see why?

1961
01:25:16,338 --> 01:25:17,737
Cuz otherwise it's just weird,

1962
01:25:17,806 --> 01:25:19,072
things would all be in the wrong places.

1963
01:25:20,274 --> 01:25:22,208
So keyThatSaysWhichAttributeIsTh-

1964
01:25:22,276 --> 01:25:24,810
eSectionName has to sort in the same order as your

1965
01:25:24,878 --> 01:25:26,044
sortDescriptors.

1966
01:25:27,847 --> 01:25:32,216
Okay, now, I told you that NSFetchedResultsController

1967
01:25:32,285 --> 01:25:33,817
watches Core Data.

1968
01:25:33,886 --> 01:25:36,953
It sees changes happening in there, and it updates it.

1969
01:25:37,022 --> 01:25:38,888
And it does that with its delegate, okay?

1970
01:25:38,957 --> 01:25:40,489
Its delegate wants to be the tableView,

1971
01:25:40,558 --> 01:25:42,124
be the tableViewController, rather.

1972
01:25:42,193 --> 01:25:44,360
Cuz it's gonna tell the tableViewController, and

1973
01:25:44,429 --> 01:25:45,627
it sends messages like this.

1974
01:25:45,696 --> 01:25:48,663
So this is a typical NSFetchedResultsController

1975
01:25:48,731 --> 01:25:50,031
delegate method.

1976
01:25:50,099 --> 01:25:53,200
Controller did change add indexPath for change type, and

1977
01:25:53,269 --> 01:25:55,202
here's the new indexPath.

1978
01:25:55,271 --> 01:25:58,105
Okay, and these change types might be deleted or

1979
01:25:58,173 --> 01:26:00,973
inserted or modified or whatever.

1980
01:26:01,042 --> 01:26:04,176
Now, you have to put the code in there that would call

1981
01:26:04,245 --> 01:26:07,480
the right methods on the tableView to get the sections

1982
01:26:07,549 --> 01:26:10,449
inserted or deleted or rows added or whatever.

1983
01:26:10,518 --> 01:26:13,819
But I'm gonna give you that code for free, okay, and

1984
01:26:13,888 --> 01:26:16,120
the demo that I'm gonna do on Wednesday,

1985
01:26:16,189 --> 01:26:19,757
I'm gonna have a class called fetchedResultsTableViewContro-

1986
01:26:19,826 --> 01:26:21,759
ller, which is gonna be a class.

1987
01:26:21,827 --> 01:26:25,796
And you can make that to be the super class of your

1988
01:26:25,864 --> 01:26:28,598
UITableViewController.

1989
01:26:28,667 --> 01:26:32,001
And you'll just inherit this implementation of

1990
01:26:32,070 --> 01:26:36,039
the delegate, okay?

1991
01:26:36,107 --> 01:26:38,107
Yes, cuz that's what I just said.

1992
01:26:38,176 --> 01:26:41,276
Okay, so when you're using core data in UITableView,

1993
01:26:41,345 --> 01:26:44,079
the things to remember are, you're going to subclass

1994
01:26:44,148 --> 01:26:46,347
fetchedResultsTableViewContro- ller,

1995
01:26:46,416 --> 01:26:48,950
the thing I'm gonna give you, so that you implement

1996
01:26:49,019 --> 01:26:51,585
NSFetchedResultsController delegate.

1997
01:26:51,654 --> 01:26:54,621
You're going to add a var to your UITableViewController

1998
01:26:54,690 --> 01:26:56,856
called fetchedResultsController, and

1999
01:26:56,925 --> 01:26:58,557
you're gonna set its value to be

2000
01:26:58,626 --> 01:27:01,995
an NSFetchedResultsController with the fetchRequest that you

2001
01:27:02,063 --> 01:27:05,464
want, okay, that you want to populate your table.

2002
01:27:05,532 --> 01:27:08,700
Then you're gonna implement your UITableView data source

2003
01:27:08,769 --> 01:27:11,770
methods using fetchedResultsController var

2004
01:27:11,839 --> 01:27:14,405
methods, just like I showed you in the slides,

2005
01:27:14,474 --> 01:27:15,907
character for character,

2006
01:27:15,975 --> 01:27:18,910
you can use the exact same things that are on the slide.

2007
01:27:18,978 --> 01:27:21,679
Okay, and then it's all gonna magically work, all you'll

2008
01:27:21,747 --> 01:27:24,014
have to do is inside your cellForRowAt indexPath,

2009
01:27:24,082 --> 01:27:25,748
you'll have the object, the tweet,

2010
01:27:25,817 --> 01:27:28,284
or the Twitter user, you just gotta load up your UI.

2011
01:27:29,454 --> 01:27:30,919
After you have all this set up,

2012
01:27:30,988 --> 01:27:34,022
then you can proceed to using the fetchedResultsController

2013
01:27:34,091 --> 01:27:35,890
in your tableViewController.

2014
01:27:35,959 --> 01:27:38,826
First thing you have to do is perform fetch on

2015
01:27:38,895 --> 01:27:40,161
the fetchedResultsController.

2016
01:27:40,229 --> 01:27:43,431
That will cause it to go out and do your NSFetchRequest,

2017
01:27:43,499 --> 01:27:44,564
basically.

2018
01:27:44,633 --> 01:27:46,766
It's not gonna pull all the data over, but

2019
01:27:46,835 --> 01:27:49,836
it's going to basically bring over, do the same thing as if

2020
01:27:49,905 --> 01:27:52,404
you had executed the fetchRequest yourself, and

2021
01:27:52,473 --> 01:27:55,508
then you're gonna wanna do tableView View.reloadData.

2022
01:27:55,576 --> 01:27:59,144
And that's because you want all of your datasource

2023
01:27:59,213 --> 01:28:03,481
methods to be called, and you know that we've implemented

2024
01:28:03,549 --> 01:28:07,118
all of them in terms of our fetch results controller as

2025
01:28:07,187 --> 01:28:09,720
showed on the previous slides there.

2026
01:28:09,788 --> 01:28:12,556
And the only other thing you want to remember to do

2027
01:28:12,625 --> 01:28:15,692
is set your fetch results controller's delegate to be

2028
01:28:15,761 --> 01:28:19,663
yourself and, again, we use that fetch results table view

2029
01:28:19,731 --> 01:28:22,732
controller code that added the delegate methods for

2030
01:28:22,801 --> 01:28:26,302
the fetch results controller to the UITableView controller

2031
01:28:26,370 --> 01:28:29,638
until we can do all the things that is necessary to

2032
01:28:29,707 --> 01:28:33,074
be a fetchedResultsController delegate.

2033
01:28:33,143 --> 01:28:36,077
And what that buys you is that anytime in the database

2034
01:28:36,146 --> 01:28:39,046
changes that would affect the NSFetchedRequest

2035
01:28:39,115 --> 01:28:42,383
that you wired up to your fetchedResultsController.

2036
01:28:42,452 --> 01:28:45,218
Then, it will use that delegate to ask the table view

2037
01:28:45,287 --> 01:28:47,154
to update the rows or sections,

2038
01:28:47,223 --> 01:28:49,623
whatever happened to change.

2039
01:28:49,691 --> 01:28:52,258
So let me talk a little bit about what's coming up here,

2040
01:28:52,327 --> 01:28:55,027
on Wednesday, I'm gonna do a big demo that shows you all of

2041
01:28:55,095 --> 01:28:56,828
this stuff, as usual.

2042
01:28:56,897 --> 01:28:58,530
Assignment five is going out on Wednesday,

2043
01:28:58,599 --> 01:28:59,831
it'll be due the next Wednesday.

2044
01:28:59,899 --> 01:29:03,300
It's going to be to add Core Data stuff to your Smashtag.

2045
01:29:03,369 --> 01:29:08,839
On Friday, very relevant section.

2046
01:29:08,908 --> 01:29:12,276
It's using CloudKit to do a database.

2047
01:29:12,344 --> 01:29:15,145
Okay? Now, Core Data and CloudKit,

2048
01:29:15,214 --> 01:29:17,380
what, what are they, how are they related?

2049
01:29:17,448 --> 01:29:19,515
Well, Core Data is for

2050
01:29:19,584 --> 01:29:22,285
doing things that you would do with a relational database,

2051
01:29:22,353 --> 01:29:25,354
these powerful queries and searches and things like that.

2052
01:29:25,423 --> 01:29:28,056
Cloud Kit is, what if you wanted to have a database

2053
01:29:28,125 --> 01:29:30,692
on the network, in the cloud, okay?

2054
01:29:30,760 --> 01:29:34,028
A network that's being shared between multiple people or

2055
01:29:34,097 --> 01:29:35,996
even by a single person on multiple,

2056
01:29:36,065 --> 01:29:38,198
on multiple of their devices, or whatever.

2057
01:29:38,267 --> 01:29:40,934
So there quite different in the way they approach things.

2058
01:29:41,002 --> 01:29:44,971
In Core Data, we do the schema using this visual mapper.

2059
01:29:45,040 --> 01:29:48,607
In CloudKit, it's essentially schema on the fly.

2060
01:29:48,676 --> 01:29:51,310
As you start saving vars,

2061
01:29:51,378 --> 01:29:54,980
it starts making this schema up for you, so

2062
01:29:55,049 --> 01:29:57,816
it's a very different kind of way of thinking about.

2063
01:29:57,885 --> 01:30:00,618
You don't think of it from a scheme of design point.

2064
01:30:00,687 --> 01:30:03,788
In advance, there's kind of more organic as you go and

2065
01:30:03,857 --> 01:30:04,655
also you don't have to,

2066
01:30:04,723 --> 01:30:07,590
you know, kind of create this whole scheme of front and

2067
01:30:07,659 --> 01:30:10,560
describe it, you can describe it as you use it essentially.

2068
01:30:10,629 --> 01:30:14,531
So it's a very interesting comparison between the two.

2069
01:30:14,599 --> 01:30:16,265
I wish I had time to do CloudKit.

2070
01:30:16,334 --> 01:30:18,067
Last quarter, I had the extra lectures.

2071
01:30:18,135 --> 01:30:20,035
I was able to do CloudKit as a whole lecture but,

2072
01:30:20,104 --> 01:30:23,205
we'll have to do it as a Friday section this week so,

2073
01:30:23,273 --> 01:30:24,538
don't miss that.

2074
01:30:24,607 --> 01:30:26,640
Next Monday is a holiday.

2075
01:30:26,709 --> 01:30:28,542
So no lecture and then next Wednesday,

2076
01:30:28,611 --> 01:30:30,111
I'm gonna go over your requirements for

2077
01:30:30,179 --> 01:30:31,979
the final project, which are required to do.

2078
01:30:32,047 --> 01:30:35,915
And I'm also gonna have a lecture as well on AutoLayout.

2079
01:30:35,984 --> 01:30:38,417
We'll finally get to Autolayout and

2080
01:30:38,486 --> 01:30:41,654
how do that Autolayout stuff.

2081
01:30:41,723 --> 01:30:43,522
I'd say, I just wanted to show you that and

2082
01:30:43,591 --> 01:30:46,025
I will see you all on Wednesday.

2083
01:30:46,093 --> 01:30:56,401
>> For more please visit us on Stanford.edu.
>> 更多课程详见 stanford.edu
