1
00:00:00,401 --> 00:00:04,435
本字幕由志愿者义务贡献，采用许可协议
知识共享 署名-非商业性使用-相同方式共享 3.0 美国

2
00:00:04,504 --> 00:00:07,605
Stanford University.
斯坦福大学

3
00:00:07,674 --> 00:00:11,109
>> All right, well, welcome to Stanford CS193P,
欢迎参加 2017 年冬季学期斯坦福

4
00:00:11,178 --> 00:00:14,946
Developing Applications for iOS, winter of 2017.
CS193P 课程，iOS 应用程序开发

5
00:00:15,015 --> 00:00:18,183
This is Lecture number 9.

6
00:00:18,252 --> 00:00:20,786
And today we have only one topic which is Table View.

7
00:00:20,854 --> 00:00:23,187
And I'm gonna go through a bunch of slides to talk about

8
00:00:23,256 --> 00:00:23,989
the concepts of it.

9
00:00:24,058 --> 00:00:26,992
And then we're gonna have a humongous demo

10
00:00:27,061 --> 00:00:29,360
that we're gonna build a Twitter client and

11
00:00:29,429 --> 00:00:31,296
it's gonna use Table View and

12
00:00:31,365 --> 00:00:33,532
some other things that we've learned, like Text Field.

13
00:00:34,802 --> 00:00:36,835
And Table View, what is it?

14
00:00:36,903 --> 00:00:40,739
You've seen a Table View in all sorts of iOS apps.

15
00:00:40,807 --> 00:00:43,908
It's just this UI where there's a list of things.

16
00:00:43,977 --> 00:00:46,879
There's really two different kinds of looks to Table View.

17
00:00:46,947 --> 00:00:48,479
There's the kind on the left there,

18
00:00:48,548 --> 00:00:50,648
which we call plain style.

19
00:00:50,717 --> 00:00:53,818
Plain style is just a list of things.

20
00:00:53,887 --> 00:00:56,721
And it might be collected into groups like little sections.

21
00:00:56,790 --> 00:00:59,291
But it's mostly just a big long list.

22
00:00:59,359 --> 00:01:02,660
On the right side, is called a grouped style.

23
00:01:02,729 --> 00:01:05,230
Where the sections in the table,

24
00:01:05,299 --> 00:01:08,934
you're more obviously disconnected from each other.

25
00:01:09,003 --> 00:01:11,436
They have you know, big gaps in between.

26
00:01:11,505 --> 00:01:17,943
Normally the plain style we use for dynamic data.

27
00:01:18,011 --> 00:01:20,445
Data that might have any number of items in there.

28
00:01:20,514 --> 00:01:22,580
The group style we tend to use for static data,

29
00:01:22,649 --> 00:01:25,050
where we know exactly what rows are gonna be in there,

30
00:01:25,119 --> 00:01:28,120
and exactly what's gonna be in them.

31
00:01:28,188 --> 00:01:31,289
So let's talk about the names of all the parts of

32
00:01:31,358 --> 00:01:33,558
a Table View, so that as I'm explaining all this,

33
00:01:33,627 --> 00:01:35,461
you'll know what the terminology is.

34
00:01:36,563 --> 00:01:38,230
First we have a table header.

35
00:01:38,298 --> 00:01:39,363
That's a UIView.

36
00:01:39,432 --> 00:01:40,999
There's only one of them.

37
00:01:41,068 --> 00:01:43,135
It sits at the very top of the table.

38
00:01:43,204 --> 00:01:44,902
This is where, as you'll see in the demo,

39
00:01:44,971 --> 00:01:49,040
you might put a search field or something that searches

40
00:01:49,109 --> 00:01:51,009
to find what's in your table or something like that.

41
00:01:51,078 --> 00:01:53,478
And similarly, there's a footer view.

42
00:01:53,546 --> 00:01:54,513
Rarely see this used.

43
00:01:54,582 --> 00:01:57,749
But it's just a UIView that sits at the bottom

44
00:01:57,817 --> 00:01:59,301
And in between, there are these things called sections.

45
00:01:59,302 --> 00:02:00,786
of the table.

46
00:02:00,854 --> 00:02:03,989
So a section is just a combination of a header and

47
00:02:04,058 --> 00:02:05,857
a footer, which are usually strings, but

48
00:02:05,925 --> 00:02:09,460
also could be UIViews, and then any number of rows.

49
00:02:09,529 --> 00:02:10,728
That's what we call a section.

50
00:02:10,797 --> 00:02:12,397
So that's a section right there.

51
00:02:12,466 --> 00:02:15,667
This is the section header for the two sections that I have

52
00:02:15,736 --> 00:02:18,537
showing in this table, right, where it says Header 0.

53
00:02:18,605 --> 00:02:20,705
And these are sections footers for

54
00:02:20,774 --> 00:02:22,440
the two sections that I have.

55
00:02:22,509 --> 00:02:25,310
These two sections happen to both have the same numbers of

56
00:02:25,379 --> 00:02:28,113
rows in each which is two but a section, one section have

57
00:02:28,182 --> 00:02:31,583
a 100 rows, and one could have just 1, it's perfectly fine.

58
00:02:32,786 --> 00:02:36,521
This right in here, we call a table cell.

59
00:02:36,589 --> 00:02:39,023
C-E-L-L, cell, and it's the UIView,

60
00:02:39,092 --> 00:02:40,692
actually UITableViewCell,

61
00:02:40,761 --> 00:02:43,495
it's the name of the subclass that's in there.

62
00:02:43,564 --> 00:02:46,731
And this is the thing that's gonna draw the data that's at

63
00:02:46,800 --> 00:02:47,799
a particular row.

64
00:02:47,868 --> 00:02:49,467
And we're gonna see how that works.

65
00:02:49,536 --> 00:02:52,203
By the way, along the bottom you're seeing source code that

66
00:02:52,272 --> 00:02:54,005
kind of corresponds with these things.

67
00:02:54,074 --> 00:02:57,075
Don't worry I'm gonna get back to showing you all that stuff

68
00:02:57,143 --> 00:02:57,976
in later slides.

69
00:02:58,045 --> 00:03:01,145
So this is the naming we use to name all the parts of

70
00:03:01,214 --> 00:03:03,014
a table view.

71
00:03:03,083 --> 00:03:04,148
And this is in plain style.

72
00:03:04,217 --> 00:03:06,618
All the same names work in group style.

73
00:03:06,687 --> 00:03:08,519
Everything just kinda looks a little different.

74
00:03:08,588 --> 00:03:10,088
All right, still have a header, footer,

75
00:03:10,157 --> 00:03:12,123
sections, all the same.

76
00:03:12,192 --> 00:03:14,059
Just a little different UI look.

77
00:03:15,896 --> 00:03:18,930
Now, tables can have sections or not.

78
00:03:18,999 --> 00:03:20,832
You don't have to have any sections, so

79
00:03:20,900 --> 00:03:25,003
the table on the left is just a whole list of cities and

80
00:03:25,071 --> 00:03:27,205
the countries they're in and just a big long list.

81
00:03:27,273 --> 00:03:29,307
On the right is kind of the same kind of list but

82
00:03:29,376 --> 00:03:31,943
you can see that they're grouped into sections there by

83
00:03:32,011 --> 00:03:32,811
country, right.

84
00:03:32,880 --> 00:03:35,213
So Japan there, Mexico, etc.

85
00:03:35,282 --> 00:03:37,248
So sections are optional,

86
00:03:37,317 --> 00:03:40,318
not optional in the case of an option, but

87
00:03:40,387 --> 00:03:44,856
sections you can have them or not, it's totally up to you.

88
00:03:46,160 --> 00:03:51,096
The type of the cell, like each row, there are four

89
00:03:51,164 --> 00:03:54,432
kinda pre-defined types and then there's a custom type.

90
00:03:54,501 --> 00:03:57,969
The four pre-defined types are subtitle where you just got

91
00:03:58,037 --> 00:03:58,737
like a title and

92
00:03:58,806 --> 00:04:01,773
a little smaller text subtitle under it.

93
00:04:01,842 --> 00:04:03,575
There's default which is the same except

94
00:04:03,643 --> 00:04:05,644
there's no little subtitle thing.

95
00:04:05,712 --> 00:04:08,179
There's value 1 and value 2, which is just like subtitle,

96
00:04:08,248 --> 00:04:10,715
it's just that the little thing underneath is in

97
00:04:10,784 --> 00:04:13,218
a different spot, it's either blue and

98
00:04:13,287 --> 00:04:17,588
to the left or it's kind of grayed off into the right but

99
00:04:17,657 --> 00:04:21,326
i's just how i's laying out the basic information there.

100
00:04:21,395 --> 00:04:23,995
Now a custom cell can have arbitrary UI

101
00:04:24,063 --> 00:04:25,130
in it as you will see.

102
00:04:26,533 --> 00:04:30,234
So how do we use a table view?

103
00:04:30,303 --> 00:04:32,070
Okay, a table view is a UIView,

104
00:04:32,139 --> 00:04:35,073
i's actually subclass UIScrollView because i's

105
00:04:35,141 --> 00:04:38,176
scrolling through all those rows.

106
00:04:38,245 --> 00:04:40,495
Well 99% of the time, we use the special ViewController

107
00:04:40,496 --> 00:04:42,746
So how do we do it?

108
00:04:42,816 --> 00:04:45,884
called UITableViewController in UIKit.

109
00:04:45,952 --> 00:04:50,922
And UITableViewController is just a convenient package to

110
00:04:50,991 --> 00:04:56,261
use UITableView in and its self.view is a UITableView.

111
00:04:56,330 --> 00:04:59,063
Okay, so you would only use a UITableViewController

112
00:04:59,132 --> 00:05:02,066
when your entire self.view is going to be filled

113
00:05:02,135 --> 00:05:04,035
with a table view.

114
00:05:04,104 --> 00:05:06,771
And you can add one into your storyboard just by dragging it

115
00:05:06,840 --> 00:05:08,139
out as we always do.

116
00:05:08,208 --> 00:05:09,841
There's a thing called Table View Controller and

117
00:05:09,910 --> 00:05:10,675
it's just gonna drag it out.

118
00:05:10,744 --> 00:05:12,878
Now it's a controller, so when you drag it out,

119
00:05:12,946 --> 00:05:14,512
it looks like an MVC.

120
00:05:14,581 --> 00:05:16,314
But inside of that MVC,

121
00:05:16,383 --> 00:05:18,316
there is a table view sitting there, okay?

122
00:05:18,385 --> 00:05:20,986
And so what you see here the controller,

123
00:05:21,055 --> 00:05:22,420
is a UITableViewController,

124
00:05:22,489 --> 00:05:26,191
and the self.view of it is a UITableView.

125
00:05:26,260 --> 00:05:27,793
Okay, subclass of UIScrollView.

126
00:05:29,329 --> 00:05:31,662
Now like any other ViewController,

127
00:05:31,731 --> 00:05:33,498
if you're going to do anything with this thing,

128
00:05:33,567 --> 00:05:35,400
you need to subclass it, right?

129
00:05:35,469 --> 00:05:37,302
Just like you create a calculator view controller or

130
00:05:37,370 --> 00:05:38,169
graph view controller,

131
00:05:38,237 --> 00:05:41,540
you need to subclass, your UITableViewController as well.

132
00:05:41,608 --> 00:05:43,074
And you do it the same way, right?

133
00:05:43,142 --> 00:05:44,910
New files are created.

134
00:05:44,978 --> 00:05:48,146
It's gonna be a Cocoa Touch Class of course.

135
00:05:48,214 --> 00:05:50,548
It's gonna be a subclass of UITableViewController.

136
00:05:50,617 --> 00:05:51,549
Make sure you pick that.

137
00:05:51,618 --> 00:05:53,585
Don't say it's a subclass of UIViewController.

138
00:05:53,654 --> 00:05:56,955
It has to be a subclass UITableViewController if you

139
00:05:57,023 --> 00:05:59,090
want it to work.

140
00:05:59,158 --> 00:06:02,660
And then you just set it in the identity inspector

141
00:06:02,729 --> 00:06:03,995
Just exactly like any other controllers, just that it has

142
00:06:03,996 --> 00:06:05,262
to be your class.

143
00:06:05,332 --> 00:06:08,033
to be subclass UITableViewController.

144
00:06:08,101 --> 00:06:11,002
This UITableViewController subclass

145
00:06:11,070 --> 00:06:14,739
is also going to serve as the data source and delegates.

146
00:06:14,808 --> 00:06:16,707
Okay, the data source is just a special kind of delegate for

147
00:06:16,776 --> 00:06:19,010
getting the data in the table.

148
00:06:19,079 --> 00:06:21,045
For the table view that's inside of it.

149
00:06:21,114 --> 00:06:23,114
So, we're gonna talk a lot more about that

150
00:06:23,183 --> 00:06:24,449
down the road here.

151
00:06:24,517 --> 00:06:27,352
By the way, if you right click on the view controller and

152
00:06:27,421 --> 00:06:29,888
you get that black window to come up, you can actually see

153
00:06:29,957 --> 00:06:31,623
it, if you look down towards the bottom there,

154
00:06:31,691 --> 00:06:33,225
you see data source and delegate.

155
00:06:33,293 --> 00:06:35,560
Their properties and they're pre wired up for you.

156
00:06:35,628 --> 00:06:37,862
If you use this UITableViewController thing,

157
00:06:37,930 --> 00:06:39,431
just pre-wires it up.

158
00:06:39,500 --> 00:06:41,399
That the controller is the delegate and

159
00:06:41,468 --> 00:06:44,335
data source of the table view.

160
00:06:44,404 --> 00:06:46,304
If you don't use UITableViewController,

161
00:06:46,373 --> 00:06:48,373
by the way, this kinda pre-packaged one?

162
00:06:48,442 --> 00:06:50,375
Then you'll have to wire up the data source and

163
00:06:50,443 --> 00:06:52,811
delegate, you know, either in code by saying

164
00:06:54,147 --> 00:06:57,215
tableView.delegate = self or something like that.

165
00:06:57,283 --> 00:06:59,150
You'll have to do it yourself but 99% of the time you're

166
00:06:59,219 --> 00:07:00,685
just gonna use this UITableViewController.

167
00:07:00,754 --> 00:07:02,921
Cuz usually the best UI for a table view, is for

168
00:07:02,989 --> 00:07:05,156
it to take over the whole screen.

169
00:07:05,225 --> 00:07:07,025
For it to fill the whole screen, it's rare that you can

170
00:07:07,094 --> 00:07:08,560
have a table view in part of your screen.

171
00:07:11,497 --> 00:07:14,866
So you can edit the attributes of the table view itself,

172
00:07:14,935 --> 00:07:16,734
of course, by just clicking on it and

173
00:07:16,803 --> 00:07:18,670
bringing up the attributes inspector.

174
00:07:18,738 --> 00:07:21,172
One thing that's a little frustrating about a table view

175
00:07:21,241 --> 00:07:24,309
is you've got the table view cells, which are UIViews.

176
00:07:24,377 --> 00:07:26,844
And then you've got the table view kind of that they're

177
00:07:26,913 --> 00:07:27,479
contained in.

178
00:07:27,547 --> 00:07:29,147
That's a UIView also.

179
00:07:29,215 --> 00:07:31,149
And then you've got the table view controller behind it.

180
00:07:31,218 --> 00:07:33,651
And you wanna set attributes on all of these things.

181
00:07:33,720 --> 00:07:38,523
So don't forget you can do Ctrl+Shift+Left-click, and

182
00:07:38,592 --> 00:07:39,424
it'll put up a little menu.

183
00:07:39,492 --> 00:07:41,459
Says, okay, what thing under the mouse do you want?

184
00:07:41,527 --> 00:07:44,796
Do you want the cell, the table view, or the controller?

185
00:07:44,864 --> 00:07:48,800
And so that'll help you dig down to the thing you want.

186
00:07:48,869 --> 00:07:50,368
All right, but once you have it selected,

187
00:07:50,437 --> 00:07:52,203
whichever one you want, like the TableView or

188
00:07:52,272 --> 00:07:55,506
the Controller or the Cell, you can inspect it of course.

189
00:07:55,575 --> 00:07:59,877
Now, one important thing is this grouped versus plain that

190
00:07:59,946 --> 00:08:01,045
I showed you at the very beginning.

191
00:08:01,114 --> 00:08:03,648
So here I'm gonna switch this one which is plain

192
00:08:03,716 --> 00:08:05,182
over to grouped.

193
00:08:05,251 --> 00:08:07,352
So I'm just picking grouped in the style there,

194
00:08:07,421 --> 00:08:08,619
in the inspector.

195
00:08:08,688 --> 00:08:11,455
Another important attribute is dynamic versus static.

196
00:08:11,524 --> 00:08:15,259
So dynamic is all the contents are coming from some database.

197
00:08:15,328 --> 00:08:18,363
And static is, I'm gonna put all the content right here in

198
00:08:18,431 --> 00:08:19,698
the story board, okay?

199
00:08:19,766 --> 00:08:21,199
So here we'll switch this one over to static.

200
00:08:21,267 --> 00:08:25,570
So this is now a static, grouped table view.

201
00:08:25,639 --> 00:08:28,205
And I told you that usually static table views

202
00:08:28,274 --> 00:08:31,509
are grouped, and usually only grouped ones are static.

203
00:08:31,577 --> 00:08:33,011
So usually these kinda go together.

204
00:08:33,080 --> 00:08:35,880
They don't have to, they're separate properties, but

205
00:08:35,949 --> 00:08:37,682
they generally go together.

206
00:08:37,750 --> 00:08:41,051
Now the UI for these rows, most of the time you're

207
00:08:41,120 --> 00:08:43,921
just going to build by dragging UI in.

208
00:08:43,990 --> 00:08:47,759
So here I'm just dragging the label in here, and you know,

209
00:08:47,827 --> 00:08:51,429
maybe I'll change the name of the label, dragging the UI

210
00:08:51,498 --> 00:08:55,199
switch in there, cuz I want to set up some settings.

211
00:08:55,268 --> 00:08:58,569
Often times, by the way, this thing is used for settings and

212
00:08:58,638 --> 00:08:59,737
things like that.

213
00:08:59,806 --> 00:09:03,008
And then if I want to talk to these switches and

214
00:09:03,076 --> 00:09:06,410
labels that I brought in there, I'm actually gonna

215
00:09:06,479 --> 00:09:09,581
create outlets to my UITableViewController.

216
00:09:09,649 --> 00:09:12,383
And since what's in this table is fixed for

217
00:09:12,452 --> 00:09:14,485
all time in the storyboard.

218
00:09:14,554 --> 00:09:15,954
I'm building it in a storyboard,

219
00:09:16,022 --> 00:09:17,122
that's perfectly fine.

220
00:09:17,190 --> 00:09:20,191
So I would just Ctrl + drag from them to my controller,

221
00:09:20,260 --> 00:09:23,061
which will work, and then I can create an outlet for

222
00:09:23,130 --> 00:09:25,730
example, my feature enabled switch outlet and

223
00:09:25,799 --> 00:09:27,798
it'll create an outlet here.

224
00:09:27,867 --> 00:09:29,134
And then in my code and my controller,

225
00:09:29,202 --> 00:09:31,969
I can obviously do whatever I want to that switch.

226
00:09:32,038 --> 00:09:35,573
So, it's almost like when you have a static table view, it's

227
00:09:35,642 --> 00:09:38,843
almost just like a normal view that you would build UI in.

228
00:09:38,911 --> 00:09:40,845
It's just that it's divided into these rows.

229
00:09:40,913 --> 00:09:42,914
Which is nice for something like settings, right?

230
00:09:42,983 --> 00:09:45,549
If you think about the settings app, right,

231
00:09:45,618 --> 00:09:46,817
on your phone.

232
00:09:46,886 --> 00:09:50,355
It's got a lot of UI that's kind of in rows right, and

233
00:09:50,423 --> 00:09:51,356
in tables.

234
00:09:51,424 --> 00:09:53,958
So, if you really wanna see how static table view works,

235
00:09:54,027 --> 00:09:56,493
get your phone out, go to the general settings app and

236
00:09:56,562 --> 00:09:57,662
just look around in there.

237
00:09:57,731 --> 00:10:01,232
That is table view after table view after table view where

238
00:10:01,300 --> 00:10:04,769
the rows are static built in some storyboard somewhere by

239
00:10:04,838 --> 00:10:05,736
Apple.

240
00:10:05,805 --> 00:10:11,075
All right, so that's pretty much it for static table.

241
00:10:11,144 --> 00:10:12,776
These are pretty straightforward to do.

242
00:10:12,845 --> 00:10:14,712
So I'm gonna clear this UI out of here,

243
00:10:14,780 --> 00:10:17,649
this featured enabled out of there, then we're gonna talk

244
00:10:17,717 --> 00:10:21,252
about a different kind of table view, which is dynamic.

245
00:10:21,321 --> 00:10:24,555
So a dynamic table view, you set it here by picking dynamic

246
00:10:24,624 --> 00:10:27,992
property, prototypes, rather, there instead of static cells,

247
00:10:28,060 --> 00:10:30,694
really is a totally different kind of animal, and

248
00:10:30,763 --> 00:10:33,798
I'm gonna switch back to plain style because usually dynamic

249
00:10:33,867 --> 00:10:35,700
tables are plain style.

250
00:10:35,769 --> 00:10:39,003
These rows now instead of being something you're

251
00:10:39,071 --> 00:10:40,338
gonna build the UI and

252
00:10:40,406 --> 00:10:43,274
they're static, instead they're prototypes.

253
00:10:43,343 --> 00:10:46,043
They're things that are gonna be copied for every row.

254
00:10:46,112 --> 00:10:48,813
So whatever UI you would build in one of these rows.

255
00:10:48,882 --> 00:10:50,381
And you can build customize UI,

256
00:10:50,450 --> 00:10:52,116
like we saw with the static one.

257
00:10:52,185 --> 00:10:54,518
It's gonna be copied for every single row.

258
00:10:54,587 --> 00:10:55,419
So these are prototypes.

259
00:10:55,488 --> 00:10:56,721
You see what I mean by prototype?

260
00:10:56,790 --> 00:10:58,923
It's like a template that's gonna be copied over and

261
00:10:58,992 --> 00:11:02,460
over and over to make your table.

262
00:11:02,529 --> 00:11:05,162
So that's a really different kind of

263
00:11:05,231 --> 00:11:06,197
way of looking at things.

264
00:11:06,266 --> 00:11:08,232
Because this data that's gonna go into these rows is

265
00:11:08,301 --> 00:11:10,969
coming from some database somewhere probably and

266
00:11:11,037 --> 00:11:12,403
filling out all this information.

267
00:11:12,472 --> 00:11:14,204
So it's a little more complicated to build

268
00:11:14,273 --> 00:11:16,641
a table like this, but not a lot more.

269
00:11:16,709 --> 00:11:19,977
So you can click on any one of the cells and

270
00:11:20,046 --> 00:11:21,612
you can inspect it, right?

271
00:11:21,681 --> 00:11:22,947
The prototypes that you want.

272
00:11:23,016 --> 00:11:26,250
For example you could change its type from being custom

273
00:11:26,319 --> 00:11:27,651
to being subtitle.

274
00:11:27,720 --> 00:11:29,854
All right, so here's what a subtitle cell looks like.

275
00:11:29,923 --> 00:11:31,956
Remember I showed you in the very second slide,

276
00:11:32,024 --> 00:11:34,391
it's one of the pre-canned types.

277
00:11:34,460 --> 00:11:35,693
And it just has, you know,

278
00:11:35,762 --> 00:11:38,463
a text field, like a little smaller text field.

279
00:11:38,531 --> 00:11:40,698
So that's a subtitle.

280
00:11:40,767 --> 00:11:43,535
You can also set with accessory there,

281
00:11:43,603 --> 00:11:45,536
a little thing that can appear on the right.

282
00:11:45,604 --> 00:11:48,506
It could be a little check mark that you turn on and off.

283
00:11:48,575 --> 00:11:49,873
It could be a disclosure indicator,

284
00:11:49,942 --> 00:11:52,544
which you want to put there if clicking on this row is going

285
00:11:52,612 --> 00:11:53,845
to segue.

286
00:11:53,913 --> 00:11:56,514
Okay, that little disclosure indicator is just a little,

287
00:11:56,583 --> 00:11:58,716
kind of gray arrow thing that lets the user know,

288
00:11:58,785 --> 00:12:00,918
hey if I click on this row, it's going to segue.

289
00:12:00,987 --> 00:12:05,423
There's also kind of a special one called detail disclosure.

290
00:12:05,492 --> 00:12:06,857
And the detail disclosure looks like this,

291
00:12:06,926 --> 00:12:08,292
it's a little "i" in a circle.

292
00:12:08,361 --> 00:12:10,662
And what's really cool about that is you can segue by

293
00:12:10,730 --> 00:12:13,898
clicking on the row, but if you click on the little blue

294
00:12:13,967 --> 00:12:16,066
I, it does a different segue.

295
00:12:16,135 --> 00:12:18,169
Okay, so you kind of have your row doing two different

296
00:12:18,238 --> 00:12:20,438
segues, depending on whether they touch on the little i or

297
00:12:20,506 --> 00:12:21,573
touch somewhere else.

298
00:12:21,641 --> 00:12:24,308
You see the little gray arrow next to the i?

299
00:12:24,377 --> 00:12:26,277
That's the disclosure indicator.

300
00:12:26,346 --> 00:12:28,579
So if I click on this row, it's going to segue.

301
00:12:28,648 --> 00:12:29,914
If I click on the little i,

302
00:12:29,982 --> 00:12:32,350
it's gonna do some different segue.

303
00:12:32,418 --> 00:12:34,818
Maybe bring up some modal panel with some information or

304
00:12:34,887 --> 00:12:36,287
something like that.

305
00:12:36,355 --> 00:12:39,423
We'll talk about how that works in a second.

306
00:12:39,492 --> 00:12:41,225
All right, so I'm gonna go back to non-details,

307
00:12:41,293 --> 00:12:43,327
go ahead and get rid of that thing.

308
00:12:43,396 --> 00:12:45,997
But another style besides the four pre-canned

309
00:12:46,066 --> 00:12:48,433
ones I talked about in the beginning of this lecture

310
00:12:48,502 --> 00:12:49,834
that you can pick is custom.

311
00:12:49,902 --> 00:12:53,438
So custom means that, that's just a UIView,

312
00:12:53,506 --> 00:12:55,606
that you can build any UI you want.

313
00:12:55,675 --> 00:12:57,842
Again similar to that feature-enabled

314
00:12:57,911 --> 00:12:59,911
with the switch that I showed.

315
00:12:59,979 --> 00:13:01,779
But again, this UI is going to get copied over and

316
00:13:01,848 --> 00:13:05,550
over and over for

317
00:13:05,618 --> 00:13:07,785
Notice, by the way, there are multiple prototypes.

318
00:13:07,854 --> 00:13:10,421
That means you can have different setups of UI

319
00:13:10,489 --> 00:13:13,123
that you could use for different rows, okay?

320
00:13:13,192 --> 00:13:15,493
And we're gonna name each of these prototypes so

321
00:13:15,562 --> 00:13:18,229
that in our code, we can pick which prototype we want for

322
00:13:18,298 --> 00:13:18,996
a certain row.

323
00:13:19,065 --> 00:13:20,632
It will copy that prototype.

324
00:13:21,868 --> 00:13:26,237
Now, these custom cells, you can resize them.

325
00:13:26,306 --> 00:13:30,508
You can drag stuff into them, build UI you want.

326
00:13:30,577 --> 00:13:32,376
Here, I've built this complicated UI with text

327
00:13:32,445 --> 00:13:33,511
fields and an image.

328
00:13:33,580 --> 00:13:36,214
This is very similar to a UI that I'm gonna build in

329
00:13:36,282 --> 00:13:38,483
All right, now when you build this UI you're gonna want

330
00:13:38,484 --> 00:13:40,685
the demo.

331
00:13:40,753 --> 00:13:42,519
to use proper layout.

332
00:13:42,588 --> 00:13:45,589
So stack views and hooking it to the edges just like you did

333
00:13:45,658 --> 00:13:48,259
with the calculator or even stuff on the inside.

334
00:13:48,328 --> 00:13:49,827
I'll show you a little bit of that today,

335
00:13:49,896 --> 00:13:51,228
a little more auto layout.

336
00:13:51,297 --> 00:13:54,431
Because if you do that, then the table view will be able to

337
00:13:54,500 --> 00:13:58,436
figure out the size this thing needs to be dynamically.

338
00:13:58,505 --> 00:14:00,171
Okay, if you don't do the right auto layout then you

339
00:14:00,240 --> 00:14:02,273
kind of just have to fix the height of the rows, and

340
00:14:02,341 --> 00:14:05,109
I'm going to talk about that in a minute as well.

341
00:14:05,178 --> 00:14:07,144
So generally you want to do auto layout properly

342
00:14:07,213 --> 00:14:08,445
in there if you can.

343
00:14:08,514 --> 00:14:11,348
Now ther's no way I could wire up these

344
00:14:11,417 --> 00:14:13,184
elements directly to my controller.

345
00:14:13,252 --> 00:14:14,451
Do you see why?

346
00:14:14,520 --> 00:14:18,222
Because ther's only one outlet in my controller for

347
00:14:18,291 --> 00:14:19,757
one of these labels.

348
00:14:19,826 --> 00:14:21,492
But there are hundreds of rows.

349
00:14:21,561 --> 00:14:22,794
So how is my one outlet gonna?

350
00:14:22,862 --> 00:14:25,997
It can't be hooked up to 100 at once, okay.

351
00:14:26,066 --> 00:14:28,566
But I still need outlets because how am I gonna

352
00:14:28,635 --> 00:14:29,834
set these things?

353
00:14:29,903 --> 00:14:30,968
All right, and so

354
00:14:31,037 --> 00:14:33,538
the way we're gonna deal with that is we're gonna wire these

355
00:14:33,606 --> 00:14:37,474
things up to outlets in the UITableViewCell.

356
00:14:37,543 --> 00:14:40,645
The UIView that contains them.

357
00:14:40,714 --> 00:14:42,780
So I told you that this cell is a UIView,

358
00:14:42,848 --> 00:14:46,050
a UITableViewCell, and it contains all of these things,

359
00:14:46,119 --> 00:14:47,485
these labels and stuff.

360
00:14:47,554 --> 00:14:48,753
So, we're gonna have outlets in that.

361
00:14:48,821 --> 00:14:50,488
Now this is the first time you've ever seen

362
00:14:50,556 --> 00:14:53,390
outlet in anything but a controller and pretty much

363
00:14:53,459 --> 00:14:55,493
this is the only other time you're gonna have outlets.

364
00:14:55,561 --> 00:14:57,795
You can't have outlets in a regular view, but

365
00:14:57,863 --> 00:15:01,699
you can have outlets in these special table view cells.

366
00:15:01,767 --> 00:15:04,569
All right, so let's see a little bit of how that works.

367
00:15:04,637 --> 00:15:07,238
So, one thing, if you're gonna have outlets,

368
00:15:07,306 --> 00:15:09,974
you know you're gonna need to have subclass, right?

369
00:15:10,043 --> 00:15:12,476
Just like you have a controller, you can't use

370
00:15:12,545 --> 00:15:15,812
a generic UIViewController, can't put any outlets in that;

371
00:15:15,881 --> 00:15:19,050
you have to subclass it so you can wire out, same thing here.

372
00:15:19,118 --> 00:15:21,419
You're gonna have to make a custom subclass,

373
00:15:21,488 --> 00:15:22,686
a UITableViewCell.

374
00:15:22,755 --> 00:15:24,288
You do that with New File.

375
00:15:24,357 --> 00:15:27,058
It is still a Cocoa Touch Class, but here you're going

376
00:15:27,127 --> 00:15:29,459
to choose UITableViewCell as the super class,

377
00:15:29,528 --> 00:15:31,028
not UITableViewController.

378
00:15:31,096 --> 00:15:32,830
UITableViewCell.

379
00:15:32,899 --> 00:15:36,400
And again UITableViewCell is a subclass of UIView also,

380
00:15:36,469 --> 00:15:37,619
All right, so you're going to pick a UITableViewCell,

381
00:15:37,620 --> 00:15:38,770
by the way.

382
00:15:38,838 --> 00:15:41,605
call it something like MyTableViewCell or whatever.

383
00:15:41,674 --> 00:15:43,841
And then you're gonna do the exact same thing where you're

384
00:15:43,910 --> 00:15:45,409
gonna have that cell selected.

385
00:15:45,478 --> 00:15:47,478
And you're gonna go to the identity inspector.

386
00:15:47,547 --> 00:15:49,614
And you're gonna change it from being a generic

387
00:15:49,683 --> 00:15:51,882
UITableViewCell to being MyTableViewCell.

388
00:15:51,951 --> 00:15:54,585
And this is gonna allow you to create outlets

389
00:15:54,654 --> 00:15:57,922
In MyTableViewCell to these things that are contained

390
00:15:57,991 --> 00:15:59,990
inside MyTableViewCell.

391
00:16:00,059 --> 00:16:02,092
Okay, so now we can wire them up.

392
00:16:02,161 --> 00:16:04,696
So remember that static elements,

393
00:16:04,764 --> 00:16:06,630
those things I showed you at the beginning,

394
00:16:06,699 --> 00:16:08,533
those are wired up to the controller.

395
00:16:08,601 --> 00:16:11,468
Dynamic elements, where we have these prototypes,

396
00:16:11,537 --> 00:16:15,205
those are wired up to the TableViewCell outlets.

397
00:16:15,274 --> 00:16:18,009
So what does it look like to wire them up?

398
00:16:18,077 --> 00:16:20,244
I'm gonna have to do the same thing with the controller

399
00:16:20,313 --> 00:16:23,781
where I'm gonna get the UI and the code on screen

400
00:16:23,849 --> 00:16:25,349
at the same time with the assistant editor.

401
00:16:25,418 --> 00:16:29,153
By the way, when you do that, if you're in automatic mode,

402
00:16:29,221 --> 00:16:30,388
there, see where it says automatic?

403
00:16:30,457 --> 00:16:31,722
It's pointing at automatic.

404
00:16:31,791 --> 00:16:34,992
It's not going to bring up the UITableViewCell, even if you

405
00:16:35,061 --> 00:16:37,261
have the TableViewCell selected in the UI.

406
00:16:37,330 --> 00:16:39,696
It's still gonna bring up the controller, okay?

407
00:16:39,765 --> 00:16:42,566
So if you want to wire up outlets to a TableViewCell,

408
00:16:42,635 --> 00:16:44,034
you have to manually or

409
00:16:44,103 --> 00:16:46,670
forcibly get that TableViewCell- not

410
00:16:46,739 --> 00:16:49,840
the TableViewController- TableViewCell, on this side.

411
00:16:49,908 --> 00:16:53,044
So one way you can do it is by switching from Automatic

412
00:16:53,112 --> 00:16:56,146
to Manual and then navigating over to finding your

413
00:16:56,215 --> 00:16:58,649
TableViewCell.swift class, right?

414
00:16:58,718 --> 00:17:00,017
And then choosing that.

415
00:17:00,086 --> 00:17:01,052
And now you're in manual mode,

416
00:17:01,121 --> 00:17:02,620
you've got the TableViewCell on the right, and

417
00:17:02,689 --> 00:17:03,987
you've got your storyboard on the left.

418
00:17:04,056 --> 00:17:05,656
So, now you can Ctrl+drag, right?

419
00:17:05,725 --> 00:17:06,991
You just need to be able to Ctrl+drag

420
00:17:07,060 --> 00:17:08,091
between them is the problem.

421
00:17:08,160 --> 00:17:10,094
So you gotta have them both on screen.

422
00:17:10,163 --> 00:17:11,828
All right, so then, once I have them on screen,

423
00:17:11,897 --> 00:17:14,965
I Ctrl+drag, just absolutely normally.

424
00:17:15,034 --> 00:17:17,167
And it's gonna do all the things that an outlet does,

425
00:17:17,236 --> 00:17:18,870
it's gonna ask me, an outlet or action.

426
00:17:18,938 --> 00:17:20,337
By the way, you can do outlet or action here.

427
00:17:20,406 --> 00:17:21,371
And it's gonna ask.

428
00:17:21,440 --> 00:17:24,141
So here, I've picked that photo, the blue thing.

429
00:17:24,210 --> 00:17:26,043
Let's say it's a photo.

430
00:17:26,112 --> 00:17:28,112
And I'm calling this my photoImageView.

431
00:17:28,181 --> 00:17:30,081
And it creates an outlet here.

432
00:17:30,149 --> 00:17:31,782
Okay, so that's great.

433
00:17:31,851 --> 00:17:35,152
Now this TableViewCell code can talk to that photo.

434
00:17:35,221 --> 00:17:38,055
The ImageView could for example set the image or

435
00:17:38,123 --> 00:17:39,122
whatever.

436
00:17:39,191 --> 00:17:42,360
But of course it needs to know what information to put

437
00:17:42,428 --> 00:17:44,829
in that photo for that row, right?

438
00:17:44,898 --> 00:17:47,765
This thing is gonna be repeated 100 times, and

439
00:17:47,834 --> 00:17:51,068
each one needs to know what its row's photo is.

440
00:17:51,136 --> 00:17:54,472
So you're also gonna need some public API on your

441
00:17:54,540 --> 00:17:58,376
TableViewCell which gives it the data it needs to fill up

442
00:17:58,444 --> 00:17:59,643
all its outlets.

443
00:17:59,712 --> 00:18:02,246
Okay, so you're gonna have some var, which I've

444
00:18:02,315 --> 00:18:06,183
called infoShownByThisCell, could be of any type you want.

445
00:18:06,252 --> 00:18:09,319
And somebody is gonna set it, you'll see soon who sets it.

446
00:18:09,388 --> 00:18:11,822
And once it sets it, now we can update the UI and

447
00:18:11,891 --> 00:18:15,026
put all this information into the outlets.

448
00:18:15,094 --> 00:18:18,028
Okay, so this is how the information at each row in

449
00:18:18,097 --> 00:18:21,098
the table is going to be put into these UI elements.

450
00:18:21,167 --> 00:18:23,067
You all following me so far?

451
00:18:24,804 --> 00:18:28,305
All right, let's talk about these two protocols,

452
00:18:28,374 --> 00:18:31,142
the dataSource and the delegate, okay.

453
00:18:31,210 --> 00:18:33,277
They're critical to making UITableView work.

454
00:18:33,346 --> 00:18:35,980
UITableView is a class that literally cannot function

455
00:18:36,049 --> 00:18:37,915
without its dataSource and delegate.

456
00:18:37,983 --> 00:18:40,650
It's not really like split view controller where, eh, you

457
00:18:40,719 --> 00:18:43,454
don't have to do anything with a delegate if you don't want,

458
00:18:43,523 --> 00:18:44,388
it'll still work.

459
00:18:44,457 --> 00:18:46,022
This, you really have to do it.

460
00:18:46,091 --> 00:18:47,157
Especially the dataSource.

461
00:18:47,226 --> 00:18:49,059
If you don't give it a dataSource, the only

462
00:18:49,128 --> 00:18:51,262
way a table view would work without its delegate and

463
00:18:51,330 --> 00:18:53,597
dataSource is if it were purely static table.

464
00:18:53,666 --> 00:18:55,833
Like the table that had the feature enabled with

465
00:18:55,902 --> 00:18:56,467
the switch.

466
00:18:56,535 --> 00:18:58,435
That you could deal without the dataSource.

467
00:18:58,504 --> 00:19:00,771
But otherwise, if it's providing dynamic data,

468
00:19:00,840 --> 00:19:01,806
obviously it needs the data.

469
00:19:01,874 --> 00:19:03,574
And the only way it can get data is

470
00:19:03,643 --> 00:19:05,042
through its dataSource.

471
00:19:05,111 --> 00:19:07,745
So, as I already told you, UITableViewController

472
00:19:07,813 --> 00:19:10,848
automatically sets itself as its delegate and dataSource.

473
00:19:10,916 --> 00:19:13,284
So you can just put your code for these delegate methods

474
00:19:13,352 --> 00:19:15,953
right in your subclass of UITableViewController, right.

475
00:19:16,021 --> 00:19:21,858
MyTableViewController, or whatever, and put it in there.

476
00:19:21,927 --> 00:19:25,596
Also, there's a cool var in TableViewController called

477
00:19:25,665 --> 00:19:29,633
tableView, which is basically gonna return self.view, but

478
00:19:29,702 --> 00:19:31,034
as a UITableView.

479
00:19:31,103 --> 00:19:34,171
And that way you can talk to the UITableView that your

480
00:19:34,240 --> 00:19:36,740
UITableViewController is controlling.

481
00:19:36,809 --> 00:19:39,343
So when do we need to implement the dataSource?

482
00:19:39,412 --> 00:19:41,812
Anytime we have dynamic data, non-static.

483
00:19:41,881 --> 00:19:44,748
There are three really important methods in this

484
00:19:44,817 --> 00:19:46,467
One is, how many sections are in my table?

485
00:19:46,468 --> 00:19:48,118
protocol.

486
00:19:48,187 --> 00:19:49,654
Could be one section if the whole thing is just

487
00:19:49,722 --> 00:19:50,221
a bunch of rows.

488
00:19:50,289 --> 00:19:51,521
How many sections, and

489
00:19:51,590 --> 00:19:53,691
then how many rows are in each section?

490
00:19:53,759 --> 00:19:55,359
You're gonna be asked one by one.

491
00:19:55,428 --> 00:19:56,326
How many rows in this section?

492
00:19:56,395 --> 00:19:57,995
How many rows in this section? How many are in this section?

493
00:19:58,064 --> 00:20:00,231
So it knows how many rows are in every section.

494
00:20:00,300 --> 00:20:03,200
And then most importantly, give me one of those

495
00:20:03,268 --> 00:20:06,103
UITableViewCells to draw this row.

496
00:20:06,172 --> 00:20:09,339
Okay, so for each row that the TableView wants to draw,

497
00:20:09,408 --> 00:20:11,675
i's going to ask you, okay, give me a UITableViewCell now,

498
00:20:11,744 --> 00:20:14,011
cuz I'm going to draw this row.

499
00:20:14,080 --> 00:20:14,978
Okay, so that's how it works,

500
00:20:15,047 --> 00:20:16,714
that's fundamentally how this works.

501
00:20:16,782 --> 00:20:19,717
Now, all these methods are in the UITableViewDataSource

502
00:20:19,785 --> 00:20:20,884
protocol.

503
00:20:20,953 --> 00:20:23,420
So let's look at the last one, the give me a UITableViewCell,

504
00:20:23,489 --> 00:20:24,755
cuz it's the most complicated.

505
00:20:24,824 --> 00:20:27,158
The other ones are super, super simple.

506
00:20:27,226 --> 00:20:30,894
So the way that you are going to give a UITableViewCell

507
00:20:30,963 --> 00:20:34,965
back to the TableView when it's time to draw a certain

508
00:20:35,034 --> 00:20:37,367
row is by a method being called.

509
00:20:37,436 --> 00:20:39,770
Now, you might be worried here, it's like woah,

510
00:20:39,839 --> 00:20:43,173
I'm gonna have this big UI with all these labels and

511
00:20:43,242 --> 00:20:47,477
image views in it, and I have, what if I have 100,000 rows?

512
00:20:47,546 --> 00:20:48,846
I'm going to make 100,000 views.

513
00:20:48,915 --> 00:20:52,115
Surely that's going to be terrible performance.

514
00:20:52,184 --> 00:20:54,451
And in fact, that would be terrible performance, okay.

515
00:20:54,520 --> 00:20:55,353
Views are not cheap.

516
00:20:56,655 --> 00:20:59,957
But no worries, because all your UITableViewCells,

517
00:21:00,025 --> 00:21:03,861
these UIViews that draw the rows, they're reused.

518
00:21:03,930 --> 00:21:06,897
So only the visible ones have UITableViewCells.

519
00:21:06,966 --> 00:21:09,900
As you scroll around, the ones that scroll off the top

520
00:21:09,969 --> 00:21:13,770
get picked up and put around and used on the bottom, okay?

521
00:21:13,839 --> 00:21:16,340
And the new data keeps getting pumped into them.

522
00:21:16,409 --> 00:21:17,474
Do you see what I'm saying?

523
00:21:17,543 --> 00:21:18,876
So those cells, only the,

524
00:21:18,945 --> 00:21:20,845
maybe the ones on the screen plus two or

525
00:21:20,913 --> 00:21:23,547
three on either side are actually getting created.

526
00:21:23,616 --> 00:21:24,815
They're just getting reused.

527
00:21:24,884 --> 00:21:26,884
As you scroll up and down, they keep getting reused.

528
00:21:28,754 --> 00:21:30,287
Now, the thing about that reuse,

529
00:21:30,356 --> 00:21:31,422
I want you to be very careful of.

530
00:21:31,490 --> 00:21:32,255
I put it in red.

531
00:21:32,324 --> 00:21:34,191
When I put it in red, you know that means wake up and

532
00:21:34,260 --> 00:21:36,427
watch out, cuz your homework.

533
00:21:36,496 --> 00:21:38,795
When you're doing multithreaded things,

534
00:21:38,864 --> 00:21:39,530
you've got to be careful,

535
00:21:39,599 --> 00:21:42,366
because by the time you come back from something you asked

536
00:21:42,435 --> 00:21:47,471
to do on another thread, your cell might be reused, okay.

537
00:21:47,540 --> 00:21:49,773
And so you've got to be prepared for that.

538
00:21:49,842 --> 00:21:52,609
You gotta understand whether you're still the cell you

539
00:21:52,678 --> 00:21:55,346
thought you were when you sent something off to go in

540
00:21:55,414 --> 00:21:56,646
another thread.

541
00:21:56,715 --> 00:21:58,715
Okay, so I'm warning you.

542
00:21:58,784 --> 00:22:01,518
So what does this method look like that the UITableView is

543
00:22:01,587 --> 00:22:03,954
gonna send to its data source to say,

544
00:22:04,023 --> 00:22:05,355
give me a UITableViewCell?

545
00:22:05,424 --> 00:22:08,425
It's called cellForRowAt indexPath.

546
00:22:08,494 --> 00:22:09,827
You see it right there.

547
00:22:09,895 --> 00:22:11,094
That's its signature.

548
00:22:11,163 --> 00:22:14,165
It really only has that one argument, indexPath.

549
00:22:14,233 --> 00:22:16,700
The indexPath is just a little container of

550
00:22:16,769 --> 00:22:18,469
the section and row.

551
00:22:18,537 --> 00:22:20,704
You could imagine this is even called cellForRowAt

552
00:22:20,772 --> 00:22:21,505
section and row.

553
00:22:21,573 --> 00:22:23,974
But it just puts them in one argument called

554
00:22:24,043 --> 00:22:25,275
an indexPath, okay.

555
00:22:25,344 --> 00:22:27,577
And then all you return is a UITableViewCell.

556
00:22:27,646 --> 00:22:30,047
And it's gonna use that UITableViewCell to draw

557
00:22:30,115 --> 00:22:31,048
that row.

558
00:22:31,117 --> 00:22:33,651
So it really couldn't be a simpler API.

559
00:22:33,719 --> 00:22:36,687
It's at the heart of exactly what it's asking you to do.

560
00:22:36,756 --> 00:22:38,555
Now, what are you gonna do inside this method?

561
00:22:38,624 --> 00:22:41,859
Well, first you're going to have to get the data from your

562
00:22:41,928 --> 00:22:44,628
model that you want to show in that row.

563
00:22:45,732 --> 00:22:46,463
Okay.

564
00:22:46,532 --> 00:22:47,998
And you can do this any way you want.

565
00:22:48,066 --> 00:22:50,234
I have a very convenient data structure here called

566
00:22:50,302 --> 00:22:52,569
myInternalDataStructure that happens to be divided

567
00:22:52,637 --> 00:22:54,038
in sections and rows.

568
00:22:54,107 --> 00:22:55,639
So I can just index into it.

569
00:22:55,708 --> 00:22:57,508
But you might have a different data structure.

570
00:22:57,576 --> 00:22:59,543
But you've gotta take the section and row so

571
00:22:59,611 --> 00:23:01,912
that you know which row you're talking about, and

572
00:23:01,981 --> 00:23:03,347
get the data out of your model.

573
00:23:03,416 --> 00:23:04,949
Maybe you're doing a database query.

574
00:23:05,017 --> 00:23:07,685
Maybe you're even doing a network query in another

575
00:23:07,753 --> 00:23:10,921
thread and it's gonna return and fill this out, whatever.

576
00:23:10,989 --> 00:23:12,889
You need to figure out how to get your data.

577
00:23:12,958 --> 00:23:15,959
Now, once you have your data, you're gonna create a cell.

578
00:23:16,028 --> 00:23:17,328
I'm gonna show you how to do that in a second.

579
00:23:17,396 --> 00:23:19,029
And then you're just gonna load up that cell

580
00:23:19,098 --> 00:23:19,764
with the data.

581
00:23:21,200 --> 00:23:23,733
So let's talk about how we create that cell and

582
00:23:23,802 --> 00:23:24,902
So I'm gonna take this little piece of code, and

583
00:23:24,903 --> 00:23:26,003
load it up.

584
00:23:26,072 --> 00:23:28,605
I'm gonna keep it on screen while I go back to showing you

585
00:23:28,674 --> 00:23:31,408
what's happening in the UI here.

586
00:23:31,477 --> 00:23:37,147
So first let's talk about a cell that's not a custom cell.

587
00:23:37,216 --> 00:23:38,648
It's just a regular cell like subtitle.

588
00:23:38,717 --> 00:23:40,450
You see subtitle up there?

589
00:23:40,519 --> 00:23:43,687
Okay, so we're gonna use this method here called

590
00:23:43,756 --> 00:23:47,925
dequeueReusableCell(withIdent- ifier: for: indexPath).

591
00:23:47,993 --> 00:23:50,461
And that's just gonna return us a UITableViewCell.

592
00:23:50,530 --> 00:23:53,630
Now, again, this is a reused UITableViewCell.

593
00:23:53,699 --> 00:23:57,468
Okay, being reused,

594
00:23:57,536 --> 00:24:01,438
now if this cell, if there's not enough been created yet,

595
00:24:01,507 --> 00:24:03,573
then it will create one based on your prototype.

596
00:24:03,642 --> 00:24:05,776
Whatever your prototype you pick in there.

597
00:24:05,845 --> 00:24:08,979
And you pick which prototype with this string,

598
00:24:09,047 --> 00:24:10,281
the identifier string

599
00:24:10,349 --> 00:24:13,650
which you set in the inspector for the cell.

600
00:24:13,719 --> 00:24:15,652
So, it's just in there, it's called identifier,

601
00:24:15,721 --> 00:24:18,489
the utilities inspector on the right is inspecting that cell,

602
00:24:18,558 --> 00:24:20,424
that top cell that says title, subtitle,

603
00:24:20,492 --> 00:24:21,258
it's inspecting that.

604
00:24:21,326 --> 00:24:23,761
And I'm just setting the identifier of my cell, so

605
00:24:23,829 --> 00:24:26,596
now in my code when I say, dequeueReuseableCellwithIdent-

606
00:24:26,665 --> 00:24:30,634
ifier of MyCell, it's gonna make a copy of that prototype.

607
00:24:31,737 --> 00:24:33,303
Unless there's some to be reused,

608
00:24:33,372 --> 00:24:34,638
then it'll just reuse them.

609
00:24:34,706 --> 00:24:36,339
But until it gets enough to reuse,

610
00:24:36,408 --> 00:24:37,273
it uses that prototype and

611
00:24:37,342 --> 00:24:39,043
just makes copies of it as necessary.

612
00:24:40,479 --> 00:24:43,680
Now, this is a non-custom cell, so

613
00:24:43,749 --> 00:24:46,149
the only, well there's a few fields you can set.

614
00:24:46,218 --> 00:24:50,787
You can go look at the API for UITableViewCell to find out.

615
00:24:50,856 --> 00:24:54,325
But the cell, set those two pieces of text, title and

616
00:24:54,393 --> 00:24:55,258
subtitle there.

617
00:24:55,327 --> 00:24:58,362
You just, you use textlabel.text and

618
00:24:58,430 --> 00:25:00,530
detailtextlabel.text.

619
00:25:00,599 --> 00:25:02,399
Those are optional, so they could be nil,

620
00:25:02,468 --> 00:25:04,134
because if there's a custom cell, for

621
00:25:04,203 --> 00:25:05,469
example, it might be nil.

622
00:25:06,606 --> 00:25:08,472
So anyway that's it, you just set those,

623
00:25:08,541 --> 00:25:09,673
those are just UILabels.

624
00:25:09,742 --> 00:25:12,842
And so you just set the text, it couldn't be easier.

625
00:25:12,911 --> 00:25:13,710
And that's true for

626
00:25:13,779 --> 00:25:16,279
all the pre-canned ones, you're gonna set these.

627
00:25:16,348 --> 00:25:18,849
There is actually, I can show it, but there's an image also,

628
00:25:18,918 --> 00:25:22,419
that you can set, a little image in the cell.

629
00:25:22,488 --> 00:25:23,920
And that's also in the pre-canned ones,

630
00:25:23,989 --> 00:25:25,889
so you could do that as well, okay?

631
00:25:25,957 --> 00:25:28,125
So that's it, that's just simple,

632
00:25:28,194 --> 00:25:30,761
that's all you need to do to provide your data

633
00:25:30,829 --> 00:25:33,764
to the TableViewCell is just dequeue one of these cells.

634
00:25:33,832 --> 00:25:35,599
Just load it up and return it, and

635
00:25:35,668 --> 00:25:38,868
now the tableView will use that to draw.

636
00:25:38,937 --> 00:25:41,838
But let's talk about a custom cell, so

637
00:25:41,907 --> 00:25:43,974
now I'm talking about the second row down.

638
00:25:44,042 --> 00:25:45,342
And look at its type,

639
00:25:45,410 --> 00:25:48,278
it's custom- it's not subtitle- it's custom.

640
00:25:48,346 --> 00:25:50,647
Little different for a custom cell.

641
00:25:50,716 --> 00:25:53,383
You're still gonna do dequeueReusableCellwithIdenti-

642
00:25:53,452 --> 00:25:54,751
fier for index path, okay?

643
00:25:54,820 --> 00:25:57,688
But of course you're going to use a different identifier,

644
00:25:57,756 --> 00:26:00,524
cuz now I'm talking about the second cell down which I'm

645
00:26:00,593 --> 00:26:01,758
calling my custom cell.

646
00:26:01,827 --> 00:26:06,029
Now here there's no title and subtitle in that second row.

647
00:26:06,098 --> 00:26:08,298
Presumably there's that image and

648
00:26:08,366 --> 00:26:10,868
the thing under text under it and text on the side.

649
00:26:10,937 --> 00:26:12,735
All the things, whatever your UI switch,

650
00:26:12,804 --> 00:26:15,138
whatever you built in this custom cell.

651
00:26:15,207 --> 00:26:18,274
And all that stuff has got outlets hooked up to

652
00:26:18,343 --> 00:26:21,879
the UITableViewCell containing it, remember all that we did?

653
00:26:21,947 --> 00:26:25,549
So you need to just pass the data to that UITableViewCell

654
00:26:25,618 --> 00:26:28,752
and it's responsible for loading up all the UI.

655
00:26:28,821 --> 00:26:30,153
Now how do you do that?

656
00:26:30,222 --> 00:26:31,955
First thing you need to do is take that dequeued

657
00:26:32,023 --> 00:26:36,126
thing that came back, which is of type UITableViewCell.

658
00:26:36,195 --> 00:26:38,895
And cast it with "as" to be of

659
00:26:38,964 --> 00:26:41,765
the type of your subclass of UITableViewCell.

660
00:26:41,834 --> 00:26:44,000
Otherwise you won't be able to call any of this API.

661
00:26:44,069 --> 00:26:47,871
Okay, so you're just gonna do, if I can let this cell equal

662
00:26:47,940 --> 00:26:50,574
the dequeued thing as MyTableViewCell.

663
00:26:50,642 --> 00:26:54,444
Then I'm going to talk to MyTableViewCell using its API

664
00:26:54,513 --> 00:26:58,148
and set, for example, infoShownByThisCell to be

665
00:26:58,217 --> 00:27:01,084
the data that's app that section in row.

666
00:27:01,153 --> 00:27:04,087
Okay, so to go back to the code I was showing before,

667
00:27:04,156 --> 00:27:07,191
that info shown by the cell is that var right there.

668
00:27:08,928 --> 00:27:11,628
The var that I made public in MyTableViewCell.

669
00:27:11,697 --> 00:27:14,331
And then it's gonna update UI and set all of its outlets and

670
00:27:14,400 --> 00:27:14,931
all of that.

671
00:27:15,000 --> 00:27:16,933
Okay, so that's it, that how it works.

672
00:27:17,002 --> 00:27:19,236
Those are the two cases, the kind of pre-canned one and

673
00:27:19,304 --> 00:27:21,271
the custom one.

674
00:27:21,339 --> 00:27:23,540
They're almost identical, you're still dequeuing cells,

675
00:27:23,609 --> 00:27:26,676
you just set the data a little bit differently.

676
00:27:26,745 --> 00:27:32,149
Okay, the data source also has to know how many sections and

677
00:27:32,218 --> 00:27:32,815
rows.

678
00:27:32,884 --> 00:27:33,650
It's really simple,

679
00:27:33,719 --> 00:27:35,919
there's a method called numberOfSections in tableView.

680
00:27:35,988 --> 00:27:37,287
And that's going to return int,

681
00:27:37,356 --> 00:27:38,788
how many sections there are.

682
00:27:38,857 --> 00:27:39,989
By the way that one is optional;

683
00:27:40,058 --> 00:27:41,558
you don't have to implement that one.

684
00:27:41,626 --> 00:27:43,927
If you don't, it will assume there's one section,

685
00:27:43,996 --> 00:27:46,629
that all the rows are in this one big section.

686
00:27:46,698 --> 00:27:49,466
The other one though, which is numberOfRowsInSection where it

687
00:27:49,535 --> 00:27:50,900
passes you a section number, and

688
00:27:50,969 --> 00:27:53,003
you have to say how many rows are in the section.

689
00:27:53,071 --> 00:27:54,171
That is not optional,

690
00:27:54,239 --> 00:27:57,140
that is mandatory, and you must answer this question for

691
00:27:57,208 --> 00:27:59,976
every single section that you claim that your table has

692
00:28:00,045 --> 00:28:03,513
with numberOfSections in table, okay?

693
00:28:03,581 --> 00:28:06,450
So that's it, that's simple, why does it need to know how

694
00:28:06,519 --> 00:28:08,751
many rows and all of the sections, by the way?

695
00:28:08,820 --> 00:28:11,155
Cuz it's a scroll view and it needs to know how big a thing,

696
00:28:11,223 --> 00:28:13,457
it needs to set it's content size basically, right?

697
00:28:13,525 --> 00:28:15,992
It needs to know how big a thing it's scrolling over, so

698
00:28:16,061 --> 00:28:16,826
it needs to know.

699
00:28:16,895 --> 00:28:20,296
But it also needs to know when to ask you for the data and

700
00:28:20,365 --> 00:28:23,066
all that, so it's pretty obvious it needs to know that.

701
00:28:23,135 --> 00:28:24,534
In a static table by the way,

702
00:28:24,603 --> 00:28:26,102
it's not gonna ask you these questions.

703
00:28:26,171 --> 00:28:27,437
So don't even worry about that.

704
00:28:27,506 --> 00:28:29,906
The static table is fixed in the StoryBoard, so

705
00:28:29,975 --> 00:28:32,142
it's never asking you for the data.

706
00:28:32,211 --> 00:28:35,312
So it's never gonna ask you how many rows and sections and

707
00:28:35,381 --> 00:28:37,113
all that stuff there is.

708
00:28:37,182 --> 00:28:39,849
So the summary is you set the tableView's data source.

709
00:28:39,918 --> 00:28:42,219
That's automatic if you're using UITableViewController.

710
00:28:42,287 --> 00:28:44,888
You implement numberOfSections and numberOfRowsInSection.

711
00:28:44,957 --> 00:28:47,090
And then you implement cellForRowAt.

712
00:28:47,159 --> 00:28:48,324
And give back a tableView cell,

713
00:28:48,393 --> 00:28:50,527
either a custom subclass if you're doing custom,

714
00:28:50,595 --> 00:28:54,431
or just setting the detailed text label and

715
00:28:54,499 --> 00:28:57,501
then the normal text label if you're not, question?

716
00:28:57,570 --> 00:28:59,303
Okay, so the question is, what do I answer for

717
00:28:59,371 --> 00:29:01,972
that number of sections thing if, over time,

718
00:29:02,041 --> 00:29:03,707
my tableView is growing, right?

719
00:29:03,775 --> 00:29:05,541
Maybe data is coming in from the network, or

720
00:29:05,610 --> 00:29:08,378
the user is clicking on things that makes more table happen.

721
00:29:08,446 --> 00:29:11,948
You can answer it that differently in any time, but

722
00:29:12,017 --> 00:29:15,619
what you're basically saying is, what if my model changes?

723
00:29:15,688 --> 00:29:18,455
I need my UI, right, to keep up with it.

724
00:29:18,524 --> 00:29:21,090
If my model gets bigger, then I need more rows.

725
00:29:21,159 --> 00:29:23,960
Well, you're gonna see that it's really important to,

726
00:29:24,029 --> 00:29:25,529
every time your model changes,

727
00:29:25,598 --> 00:29:27,697
you need to tell the tableView about it.

728
00:29:27,766 --> 00:29:28,931
And you're gonna tell it things like

729
00:29:29,000 --> 00:29:30,667
I've added a new section.

730
00:29:30,736 --> 00:29:31,501
And then it will come back and

731
00:29:31,570 --> 00:29:34,404
ask you all these questions again, all right.

732
00:29:34,473 --> 00:29:35,839
So, that's how it works.

733
00:29:35,907 --> 00:29:37,907
It might come back and ask you these questions including

734
00:29:37,976 --> 00:29:40,043
cellForRowAt over and over and over.

735
00:29:40,112 --> 00:29:42,178
As you tell it that you've changed your model.

736
00:29:42,247 --> 00:29:44,047
But of course, your model can change over time.

737
00:29:46,519 --> 00:29:48,184
By the way, the titles of the sections,

738
00:29:48,253 --> 00:29:50,153
remember when I showed you the countries and it had Japan and

739
00:29:50,222 --> 00:29:51,220
Mexico as titles.

740
00:29:51,289 --> 00:29:53,056
Those are considered part of the data.

741
00:29:53,125 --> 00:29:56,026
So, those are part of the UITableViewDataSource

742
00:29:56,095 --> 00:29:57,193
protocol as well.

743
00:29:57,262 --> 00:30:01,164
This method title for header or footer in section, and

744
00:30:01,232 --> 00:30:02,933
you pass the section number and it gives you the thing.

745
00:30:03,002 --> 00:30:06,002
You can also do it with a view, using the delegate.

746
00:30:06,071 --> 00:30:07,537
But if you want to just do it as a string,

747
00:30:07,606 --> 00:30:09,840
you'd use the data source.

748
00:30:09,909 --> 00:30:11,641
There's a lot of other methods in the protocol.

749
00:30:11,710 --> 00:30:12,776
I'm not gonna really talk about them,

750
00:30:12,844 --> 00:30:15,278
they have to do with things like deleting rows or

751
00:30:15,347 --> 00:30:18,348
rearranging the rows, things like that.

752
00:30:18,416 --> 00:30:20,450
If your model allows those things to happen,

753
00:30:20,519 --> 00:30:21,484
like things being deleted.

754
00:30:21,553 --> 00:30:23,786
Then you're gonna have to teach yourself this.

755
00:30:23,855 --> 00:30:26,089
Most of you will probably end up doing this for

756
00:30:26,158 --> 00:30:27,157
your final project.

757
00:30:27,225 --> 00:30:28,692
I'm not gonna ask you to do it in the homework, but

758
00:30:28,761 --> 00:30:30,093
you'll probably do it for your final project.

759
00:30:30,161 --> 00:30:31,360
It's extra credit in the homework,

760
00:30:31,429 --> 00:30:34,130
if you wanna get a head start on that.

761
00:30:34,199 --> 00:30:36,733
All right let's talk about seguing from a row.

762
00:30:36,802 --> 00:30:38,234
So I've got a row there, okay,

763
00:30:38,303 --> 00:30:41,270
this one actually has a detail disclosure in there as well.

764
00:30:41,339 --> 00:30:44,474
And I wanna segue out of that thing, how do I do that?

765
00:30:45,511 --> 00:30:46,409
Very simple,

766
00:30:46,478 --> 00:30:49,179
I do it just like any other segueing from the button.

767
00:30:49,248 --> 00:30:53,483
I'm just gonna Ctrl+drag from the row to the MVC I want to

768
00:30:53,551 --> 00:30:54,318
segue to.

769
00:30:54,386 --> 00:30:56,386
And it's going to put up this black window.

770
00:30:56,454 --> 00:30:57,187
Now, this black window

771
00:30:57,256 --> 00:30:58,622
is a little different than other segues.

772
00:30:58,690 --> 00:31:02,459
Because you see it has two sections, Selection Segue and

773
00:31:02,528 --> 00:31:04,761
Accessory Action, okay?

774
00:31:04,830 --> 00:31:07,697
So the Selection Segue is if they click on the row and

775
00:31:07,766 --> 00:31:09,099
the Accessory Action is if they click on

776
00:31:09,168 --> 00:31:10,234
the little accessory button.

777
00:31:12,303 --> 00:31:16,639
But it's just a normal segue, once you create the segue,

778
00:31:16,708 --> 00:31:20,109
you can click on it and inspect it.

779
00:31:20,178 --> 00:31:21,778
Just like any other segue,

780
00:31:21,847 --> 00:31:24,848
you can set its identifier up there to something.

781
00:31:24,917 --> 00:31:26,683
And then you're gonna have prepare for segue.

782
00:31:26,752 --> 00:31:30,053
So, here I've set the identifier to be AbcSegue.

783
00:31:30,122 --> 00:31:32,088
So lets take a look at what prepare for

784
00:31:32,157 --> 00:31:35,092
segue looks like when you're doing this kinda segue.

785
00:31:35,160 --> 00:31:36,893
It looks almost exactly the same,

786
00:31:36,961 --> 00:31:38,761
here I've got a prepare for segue.

787
00:31:38,830 --> 00:31:40,964
I've noticed that the sender there is Any.

788
00:31:41,033 --> 00:31:43,200
And when you're segueing into tableView,

789
00:31:43,269 --> 00:31:45,836
what do you think that Any is gonna be?

790
00:31:45,904 --> 00:31:49,272
UITableViewCell, okay, that view that contains the row.

791
00:31:49,340 --> 00:31:51,008
So that is going to be the sender.

792
00:31:52,577 --> 00:31:53,710
Just like a button is the sender

793
00:31:53,779 --> 00:31:55,812
if you click on a button to segue, the row,

794
00:31:55,881 --> 00:31:58,382
the UITableViewCell, is the sender in that case.

795
00:32:00,085 --> 00:32:01,785
So the first thing you're gonna wanna

796
00:32:01,853 --> 00:32:04,554
do is convert the sender to a TableViewCell.

797
00:32:04,623 --> 00:32:08,191
And specifically to your subclass or table view cell.

798
00:32:08,260 --> 00:32:11,327
If you have a custom cell in case you wanna

799
00:32:11,396 --> 00:32:13,830
do anything that's specific to your TableView cell.

800
00:32:13,898 --> 00:32:17,534
If not then you can just do it to UITableViewCell.

801
00:32:17,603 --> 00:32:20,570
And then you wanna get the index path of that cell so

802
00:32:20,638 --> 00:32:23,272
that you know what row where you're segueing from.

803
00:32:23,341 --> 00:32:25,975
Because every row, you can click on it, it will segue.

804
00:32:26,044 --> 00:32:27,410
So, you need to know which row.

805
00:32:27,479 --> 00:32:31,547
And you do that by

806
00:32:31,616 --> 00:32:34,083
And you can't pass any to that, you have to pass

807
00:32:34,152 --> 00:32:37,754
UITableViewCell or subclass thereof, indexPath(for: cell).

808
00:32:37,823 --> 00:32:39,289
Now, I'm gonna give you one of those index path

809
00:32:39,357 --> 00:32:42,492
things remember?

810
00:32:42,561 --> 00:32:44,660
and row.

811
00:32:44,729 --> 00:32:48,398
Then, you're gonna get your seguedToMVC as usual.

812
00:32:48,467 --> 00:32:53,069
And you're going to prepare your Segue to public API, and

813
00:32:53,137 --> 00:32:56,739
you're going to do it using the data in your model based

814
00:32:56,808 --> 00:32:59,776
on the section and row that was clicked on.

815
00:33:01,446 --> 00:33:02,812
Got it?

816
00:33:02,881 --> 00:33:04,614
So pretty easy segue from it.

817
00:33:06,118 --> 00:33:07,750
So yes you're gonna use your public API of your

818
00:33:07,819 --> 00:33:08,585
segue to MVC.

819
00:33:09,688 --> 00:33:11,321
What about the table view's delegate?

820
00:33:11,390 --> 00:33:12,222
We talked about the data

821
00:33:12,290 --> 00:33:13,890
source; what about the table view's delegate?

822
00:33:13,958 --> 00:33:15,592
It's got a kind of a miscellaneous

823
00:33:15,660 --> 00:33:18,194
bunch of stuff in there but generally the delegate

824
00:33:18,263 --> 00:33:21,030
is talking about how the table view is displayed, and

825
00:33:21,099 --> 00:33:24,967
the data source is what data is actually in the table.

826
00:33:25,036 --> 00:33:25,769
Okay so that's the difference.

827
00:33:25,837 --> 00:33:30,039
So the delegate we're talking about things,

828
00:33:30,108 --> 00:33:31,574
yeah they're usually the same object.

829
00:33:31,643 --> 00:33:36,246
So the delegate also has all the will, did, should things.

830
00:33:36,314 --> 00:33:38,448
That you could watch what's happening in the table view.

831
00:33:38,516 --> 00:33:40,750
This row did get selected, things like that.

832
00:33:40,819 --> 00:33:44,988
For example, here's table view target action, so

833
00:33:45,057 --> 00:33:47,356
if when you click on a row, if you don't want a segue, but

834
00:33:47,425 --> 00:33:49,859
you just want to be target action like a button,

835
00:33:49,928 --> 00:33:50,960
well you can't really do that.

836
00:33:51,029 --> 00:33:53,163
You can't do target action because a row is not

837
00:33:53,232 --> 00:33:54,030
a UIButton.

838
00:33:54,099 --> 00:33:56,766
But you can implement this delegate method tableView

839
00:33:56,835 --> 00:33:58,801
didSelectRowAt indexPath.

840
00:33:58,870 --> 00:34:00,736
And when someone touches on that row,

841
00:34:00,805 --> 00:34:02,104
this is gonna get called.

842
00:34:02,173 --> 00:34:03,506
So, it's just like target action right.

843
00:34:03,575 --> 00:34:05,542
It told you what happened.

844
00:34:05,610 --> 00:34:08,211
So, now you can look at the index path row in section to

845
00:34:08,280 --> 00:34:11,681
know which row was selected so we call that target action.

846
00:34:11,750 --> 00:34:13,550
You did the same thing with that detail

847
00:34:13,618 --> 00:34:14,551
disclosure by the way.

848
00:34:14,619 --> 00:34:17,119
So I'm gonna click on the detail disclosure we're gonna

849
00:34:17,188 --> 00:34:18,889
get this method in your delegate called

850
00:34:18,957 --> 00:34:22,058
accessoryButtonTappedForRow- With indexPath.

851
00:34:22,127 --> 00:34:23,560
Okay, so now you know which row is that.

852
00:34:23,628 --> 00:34:26,162
So when things are clicked on, you can use segue or

853
00:34:26,230 --> 00:34:28,898
you can use these to find out things were clicked on and

854
00:34:28,966 --> 00:34:29,699
do whatever you want.

855
00:34:31,136 --> 00:34:33,135
So yeah, a lot of wills and dids and all those things.

856
00:34:33,204 --> 00:34:35,137
You can look at the documentation for

857
00:34:35,206 --> 00:34:37,340
UITableViewDelegate.

858
00:34:37,408 --> 00:34:39,142
Now back to what this guy was asking before.

859
00:34:39,210 --> 00:34:40,710
What happens if my model changes?

860
00:34:40,778 --> 00:34:41,444
It gets bigger?

861
00:34:41,512 --> 00:34:43,279
Or even gets smaller or whatever?

862
00:34:43,348 --> 00:34:45,949
One thing you can do that's kind of a hammer is

863
00:34:46,018 --> 00:34:47,850
reloadData.

864
00:34:47,919 --> 00:34:50,286
If you go reloadData on your table view it's going to call

865
00:34:50,355 --> 00:34:51,988
all of your data source methods again.

866
00:34:52,056 --> 00:34:54,257
How many sections you got, how many rows in each section?

867
00:34:54,325 --> 00:34:56,158
Give me a cell for every single visible row.

868
00:34:56,227 --> 00:34:56,759
You see what I mean?

869
00:34:56,828 --> 00:34:58,695
It's going to do the whole thing all over again.

870
00:34:58,763 --> 00:35:01,230
It's kind of a hammer because if you know that you only

871
00:35:01,299 --> 00:35:03,599
changed one section okay?

872
00:35:03,668 --> 00:35:06,169
Then you can call something like reloadRows (at

873
00:35:06,237 --> 00:35:07,403
indexPaths...).

874
00:35:07,472 --> 00:35:09,939
And indexPaths would tell the sections and rows.

875
00:35:10,008 --> 00:35:11,474
With some animation.

876
00:35:11,543 --> 00:35:14,677
And animations can be like fade in or

877
00:35:14,746 --> 00:35:17,614
slide from the bottom or things like that.

878
00:35:17,683 --> 00:35:19,349
So there are lighter weight ones you can call.

879
00:35:19,417 --> 00:35:20,716
And I'm actually gonna show you in the demo,

880
00:35:20,785 --> 00:35:23,720
we're gonna call one where we're just gonna tell

881
00:35:23,788 --> 00:35:26,122
the table view that we inserted a section and

882
00:35:26,191 --> 00:35:28,657
it's going to immediately just ask me

883
00:35:28,726 --> 00:35:32,294
the data source message about that section and nothing else.

884
00:35:32,363 --> 00:35:35,531
So you do need to tell the table view

885
00:35:35,600 --> 00:35:37,667
every time you change your model.

886
00:35:37,736 --> 00:35:38,601
If you change your model in

887
00:35:38,670 --> 00:35:41,404
any way that would change the number of sections and rows.

888
00:35:41,473 --> 00:35:42,672
Or even the display of a row,

889
00:35:42,741 --> 00:35:44,708
you need to tell the table view.

890
00:35:44,776 --> 00:35:46,242
So, just always think about that when you're

891
00:35:46,311 --> 00:35:47,210
writing table view code.

892
00:35:47,279 --> 00:35:49,679
Change my model, tell the table view.

893
00:35:49,748 --> 00:35:50,379
Right away.

894
00:35:50,448 --> 00:35:52,215
You want to tell the table view right away.

895
00:35:52,283 --> 00:35:54,684
And change your model first, then change your table view.

896
00:35:54,753 --> 00:35:55,852
Because when you tell your table view

897
00:35:55,920 --> 00:35:58,588
things have changed, it's gonna go back and ask you, so

898
00:35:58,656 --> 00:36:00,357
for IndexPath, number of sections,

899
00:36:00,425 --> 00:36:02,725
it'll ask you those questions, some of them again.

900
00:36:02,794 --> 00:36:04,593
So make sure your models are already changed and

901
00:36:04,662 --> 00:36:06,996
ready to answer those questions.

902
00:36:07,065 --> 00:36:08,932
Le's talk about the height of rows.

903
00:36:10,501 --> 00:36:11,334
The height of the row

904
00:36:11,403 --> 00:36:13,702
generally set in the Storyboard.

905
00:36:13,771 --> 00:36:17,373
So you could resize it and set it and tha's what it is but

906
00:36:17,442 --> 00:36:20,110
you can also ask the delegate.

907
00:36:20,178 --> 00:36:22,845
You can also implement a method in the delegate and

908
00:36:22,914 --> 00:36:25,915
it'll ask the delegate, what height should this row be?

909
00:36:25,984 --> 00:36:28,784
This might be very useful in your homework, by the way.

910
00:36:28,853 --> 00:36:31,688
But this is for when you have

911
00:36:31,757 --> 00:36:34,991
the rows that change height in some calculated way.

912
00:36:36,228 --> 00:36:37,393
Maybe you have an image in there, and

913
00:36:37,462 --> 00:36:41,097
it's got different aspect ratios, for example.

914
00:36:41,165 --> 00:36:43,266
And so it's different heights sometimes, whatever.

915
00:36:43,335 --> 00:36:44,901
So you can answer it this way.

916
00:36:46,304 --> 00:36:48,304
Of course, the other way you can control the height

917
00:36:48,373 --> 00:36:50,440
is by doing auto layout, and

918
00:36:50,509 --> 00:36:53,443
setting your height to be automatic dimension.

919
00:36:53,512 --> 00:36:56,780
If you set your height to be UITableViewAutomaticDimension,

920
00:36:56,848 --> 00:37:00,450
that means go figure it out from the auto layout please.

921
00:37:00,518 --> 00:37:02,051
So those are the three was you can set the height.

922
00:37:02,120 --> 00:37:05,554
Set it fixed in the story board, answer this delegate

923
00:37:05,623 --> 00:37:07,657
method here, heightForRowAt indexPath,

924
00:37:07,726 --> 00:37:10,092
or set it to the automatic dimension.

925
00:37:10,161 --> 00:37:13,863
If you do the automatic ways then you also probably want to

926
00:37:13,932 --> 00:37:16,232
set the estimated row height.

927
00:37:16,301 --> 00:37:19,302
That just tells the table view calculate from auto layout but

928
00:37:19,370 --> 00:37:22,238
for all those cells the 100,000 cells that aren't

929
00:37:22,306 --> 00:37:26,075
on screen please don't do auto layout for 100,000 cells.

930
00:37:26,144 --> 00:37:28,711
Just estimate them to be about this and as they start to come

931
00:37:28,780 --> 00:37:30,846
on screen then it's gonna do the auto layout and

932
00:37:30,915 --> 00:37:33,749
pick the exact right height okay.

933
00:37:33,818 --> 00:37:35,118
So that's why you need to estimate.

934
00:37:35,186 --> 00:37:36,419
And there's also a delicate method,

935
00:37:36,488 --> 00:37:39,856
estimated height per row at whatever.

936
00:37:39,924 --> 00:37:42,892
So there's dozens of methods also, in table view itself.

937
00:37:42,961 --> 00:37:45,795
Not in its delegates, but in table view itself.

938
00:37:45,864 --> 00:37:48,597
You can scroll to a row cuz it's a scroll view.

939
00:37:48,666 --> 00:37:49,632
It knows how to do scrolling.

940
00:37:49,701 --> 00:37:53,002
You can control the look, the separators between rows.

941
00:37:53,071 --> 00:37:54,003
All those kind of things.

942
00:37:54,071 --> 00:37:56,406
So you're definitely want to familiarize yourself

943
00:37:56,475 --> 00:37:58,708
with the table view API itself.

944
00:37:58,777 --> 00:37:59,508
Don't forget about that.

945
00:37:59,577 --> 00:38:02,478
All right, so I'm not coming back to this slide.

946
00:38:02,547 --> 00:38:04,881
So just give you a quick coming up here.

947
00:38:04,949 --> 00:38:06,382
We have collection view on Friday.

948
00:38:06,451 --> 00:38:08,551
So collection view is very similar to table view,

949
00:38:08,620 --> 00:38:11,454
but the layout doesn't have to be in a strict table.

950
00:38:11,522 --> 00:38:13,689
It can be kind of laid out any way you want.

951
00:38:13,758 --> 00:38:15,691
But it's the same kind of thing where there's data and

952
00:38:15,760 --> 00:38:18,561
it's gonna ask you how many sections there, how many row,

953
00:38:18,629 --> 00:38:21,430
not rows but items in that section, then it's gonna have

954
00:38:21,499 --> 00:38:23,633
this little extra mechanism for doing a lay out.

955
00:38:23,702 --> 00:38:24,601
So it's really awesome.

956
00:38:24,669 --> 00:38:26,836
I'd love to have time to teach it in lecture not in

957
00:38:26,905 --> 00:38:29,438
the optional section but I've got so much to teach in this

958
00:38:29,507 --> 00:38:32,142
course and you really need to understand TableView first,

959
00:38:32,210 --> 00:38:34,210
which is a little simpler, before you can move onto

960
00:38:34,279 --> 00:38:36,379
CollectionView- but really don't miss Friday.

961
00:38:36,448 --> 00:38:40,282
It will be a good way to really it much more powerful

962
00:38:40,351 --> 00:38:42,719
kind of data presentation UI.

963
00:38:42,787 --> 00:38:45,221
And then next week we gonna talk about Core Data,

964
00:38:45,289 --> 00:38:47,756
which is the object-oriented database in iOS,

965
00:38:47,825 --> 00:38:49,959
really powerful mechanism.

966
00:38:50,028 --> 00:38:52,995
Right now, I'm gonna be doing a big demo that shows

967
00:38:53,064 --> 00:38:54,730
how to do all this TableView stuff and

968
00:38:54,799 --> 00:38:56,999
also TextField and some other things.

969
00:38:57,068 --> 00:38:58,634
And your Assignment 4 is out,

970
00:38:58,703 --> 00:39:01,537
and it's due in one week, on Wednesday and it's

971
00:39:01,606 --> 00:39:05,241
basically to take what I do today and build a better one.

972
00:39:05,310 --> 00:39:07,343
More feature-full.

973
00:39:07,412 --> 00:39:08,210
So that's why you

974
00:39:08,279 --> 00:39:10,780
always want to understand what I'm doing in lecture, because

975
00:39:10,848 --> 00:39:13,115
I'm almost always just asking you to do the same thing.

976
00:39:13,184 --> 00:39:14,984
Okay so I'm gonna build a completely

977
00:39:15,053 --> 00:39:16,286
fresh app from scratch.

978
00:39:16,354 --> 00:39:18,554
Like I said before it's gonna be a Twitter client.

979
00:39:18,623 --> 00:39:21,790
We're gonna be doing Twitter searches.

980
00:39:21,859 --> 00:39:23,927
It's gonna be a single view app.

981
00:39:23,995 --> 00:39:26,079
i'm gonna call it Smashtag, kind of like hashtag.

982
00:39:26,080 --> 00:39:28,164
As always,

983
00:39:28,233 --> 00:39:30,099
This is gonna be an iPhone-only app.

984
00:39:30,168 --> 00:39:32,034
And that's true for your homework as well.

985
00:39:32,103 --> 00:39:34,570
Okay, iPhone-only, we're not gonna do an iPad thing.

986
00:39:34,639 --> 00:39:36,439
You already learned that with assignment three.

987
00:39:36,508 --> 00:39:39,208
Trying to keep what you're learning

988
00:39:39,277 --> 00:39:41,243
as new as possible with each one.

989
00:39:41,312 --> 00:39:44,113
I'm gonna put this where I always put everything.

990
00:39:44,182 --> 00:39:47,350
Here we go, I'm gonna get rid of some of these things over

991
00:39:47,419 --> 00:39:50,120
here that we don't really use very much.

992
00:39:50,188 --> 00:39:52,955
Actually I'm gonna leave plist as you'll see.

993
00:39:53,024 --> 00:39:57,427
New group, we'll do Supporting Files here, and

994
00:39:57,495 --> 00:39:59,428
I will move that down.

995
00:39:59,497 --> 00:40:02,498
Now I'm gonna start by taking my Storyboard here and

996
00:40:02,567 --> 00:40:04,167
just totally wiping it out.

997
00:40:04,235 --> 00:40:06,402
Okay, I'm just gonna take the one controller that I got,

998
00:40:06,470 --> 00:40:07,670
the free one, and just delete it.

999
00:40:07,738 --> 00:40:09,939
I'm even gonna go over to this code right here and

1000
00:40:10,008 --> 00:40:12,408
delete that, same thing I did in the last demo.

1001
00:40:12,477 --> 00:40:14,344
Cuz I don't need any of that,

1002
00:40:14,412 --> 00:40:17,212
I'm gonna start from scratch here.

1003
00:40:17,281 --> 00:40:18,748
So, we're building a table view app, so

1004
00:40:18,817 --> 00:40:21,551
let's grab a table view, I'm gonna scroll down here.

1005
00:40:21,620 --> 00:40:24,287
Here's a table view right here, I just drag it out.

1006
00:40:24,355 --> 00:40:28,558
Now this table view if we wanna use it as a delegate and

1007
00:40:28,627 --> 00:40:31,260
data source, or if we wanna have outlets to it, we,

1008
00:40:31,329 --> 00:40:32,795
of course, need a subclass of it.

1009
00:40:32,864 --> 00:40:37,533
So let's go ahead and do that, New > File, okay.

1010
00:40:37,602 --> 00:40:40,102
It's gonna be a Cocoa Touch subclass,

1011
00:40:40,171 --> 00:40:42,471
namely a UITableViewController.

1012
00:40:42,540 --> 00:40:45,374
And I'm gonna call this my TweetTableViewController,

1013
00:40:45,443 --> 00:40:47,510
because it's gonna show tweets.

1014
00:40:47,578 --> 00:40:49,812
All right, and I'm gonna be very careful to put it here,

1015
00:40:49,881 --> 00:40:52,215
not at the top level of my project there.

1016
00:40:53,584 --> 00:40:56,185
And here we go, here's our code right here.

1017
00:40:56,254 --> 00:40:59,656
I'm gonna delete this View Controller Lifecycle

1018
00:40:59,724 --> 00:41:00,656
stuff, as usual.

1019
00:41:00,725 --> 00:41:02,124
But you'll notice the TableViewController

1020
00:41:02,193 --> 00:41:03,826
also has some extra stuff.

1021
00:41:03,895 --> 00:41:06,629
You recognize those methods, numberOfSections, okay,

1022
00:41:06,697 --> 00:41:10,133
numberOfRowsInSection, and cellForRowAt indexPath.

1023
00:41:10,202 --> 00:41:15,604
These are the key UITableViewDataSource

1024
00:41:15,673 --> 00:41:17,674
methods here.

1025
00:41:17,742 --> 00:41:20,476
Now there's some other UITableViewDataSource

1026
00:41:20,545 --> 00:41:22,678
methods here as well, these are for

1027
00:41:22,747 --> 00:41:25,181
things like deleting rows, moving rows.

1028
00:41:25,250 --> 00:41:27,149
So when you're doing your extra credit, or

1029
00:41:27,218 --> 00:41:28,817
when you're doing your final project,

1030
00:41:28,886 --> 00:41:30,486
you'll be wanting to not delete those.

1031
00:41:30,555 --> 00:41:34,390
But I will delete those just to make our code a little bit

1032
00:41:34,459 --> 00:41:36,359
cleaner here.

1033
00:41:36,428 --> 00:41:37,893
So that's our UITableViewController

1034
00:41:37,962 --> 00:41:40,129
subclass, we'll have to implement these in a second.

1035
00:41:40,198 --> 00:41:41,898
But let's go back to our Storyboard.

1036
00:41:41,966 --> 00:41:47,103
We also obviously wanna set our identity here to instead

1037
00:41:47,171 --> 00:41:51,641
of being just generic UITableViewController,

1038
00:41:51,709 --> 00:41:55,978
we want it to be a TweetTableViewController.

1039
00:41:56,046 --> 00:41:57,780
Also, where's our arrow coming in?

1040
00:41:57,849 --> 00:42:00,482
There's no arrow, so let's select it again and

1041
00:42:00,551 --> 00:42:03,953
go back to attributes and pick is initial view controller, so

1042
00:42:04,022 --> 00:42:05,621
we get this arrow coming in.

1043
00:42:05,690 --> 00:42:07,656
Okay, otherwise, when we launch our app,

1044
00:42:07,725 --> 00:42:10,926
it's not gonna know what MVC to start with, all right?

1045
00:42:10,995 --> 00:42:13,830
Now whenever we have a new MVC,

1046
00:42:13,898 --> 00:42:16,632
what's one of the first things we always wanna do?

1047
00:42:16,701 --> 00:42:18,200
Define its model.

1048
00:42:18,269 --> 00:42:21,103
Understand what this MVC is all about.

1049
00:42:21,172 --> 00:42:23,639
What does it show or do?

1050
00:42:23,707 --> 00:42:29,645
And I'm going to pick my model to be an array of tweets.

1051
00:42:29,714 --> 00:42:31,313
Okay, I'm gonna call it tweets.

1052
00:42:31,382 --> 00:42:34,883
But I'm actually gonna make it be an array

1053
00:42:34,952 --> 00:42:37,253
of array of tweets.

1054
00:42:37,322 --> 00:42:40,890
Okay, why am I making an array of an array of tweets?

1055
00:42:40,959 --> 00:42:44,160
Because I'm going to be able to put some tweets in my table

1056
00:42:44,228 --> 00:42:46,629
and then go fetch some more and put more in.

1057
00:42:46,697 --> 00:42:49,432
And every time I put more in, I'm gonna put it as a new

1058
00:42:49,500 --> 00:42:52,101
section, okay, table view section.

1059
00:42:52,170 --> 00:42:54,904
So each array on the inside of this array

1060
00:42:54,973 --> 00:42:56,438
is another batch of tweets.

1061
00:42:56,507 --> 00:42:58,808
And the outer array is all of my sections.

1062
00:42:58,876 --> 00:43:00,376
So I have a really nice data structure here.

1063
00:43:00,444 --> 00:43:02,578
It really matches up nicely with table view.

1064
00:43:02,647 --> 00:43:05,748
And it's kind of nice to have that kind of data structure.

1065
00:43:05,817 --> 00:43:07,817
And I kind of recommend that in the homework if you can

1066
00:43:07,885 --> 00:43:10,219
make your data structure match up with sections and

1067
00:43:10,288 --> 00:43:12,055
rows, then it makes the implementation

1068
00:43:12,123 --> 00:43:14,757
of all these methods down here a lot simpler.

1069
00:43:16,026 --> 00:43:19,294
All right, so, I've got another part of my model,

1070
00:43:19,363 --> 00:43:22,064
though, which is some searchText.

1071
00:43:22,133 --> 00:43:24,400
So the searchText is like #stanford,

1072
00:43:24,469 --> 00:43:26,936
that's what I wanna search for.

1073
00:43:27,004 --> 00:43:29,271
So this searchText is what I'm searching for

1074
00:43:29,340 --> 00:43:30,740
to find my tweets.

1075
00:43:30,809 --> 00:43:32,141
And I'm making this one public,

1076
00:43:32,209 --> 00:43:34,410
this is gonna be a public part of my model.

1077
00:43:34,478 --> 00:43:37,779
So anyone using my MVC, they set the search text.

1078
00:43:37,848 --> 00:43:40,082
I will show those tweets.

1079
00:43:40,151 --> 00:43:40,917
That's what I do.

1080
00:43:42,519 --> 00:43:45,188
All right, and I'm gonna do that by populating this part

1081
00:43:45,256 --> 00:43:47,623
of my model over here to show them.

1082
00:43:47,691 --> 00:43:51,393
So what do I need to do if the searchText is set?

1083
00:43:51,462 --> 00:43:54,163
So I need to do some didSet here, so the public model,

1084
00:43:54,231 --> 00:43:56,699
if something sets it, I have to react well to it.

1085
00:43:56,767 --> 00:43:59,469
I mean, one thing that I'm gonna wanna do is remove

1086
00:43:59,537 --> 00:44:02,138
all the tweets that are already in my table.

1087
00:44:02,207 --> 00:44:05,340
And when I remove those from my model up here,

1088
00:44:05,409 --> 00:44:07,743
I need to tell the table view about it.

1089
00:44:07,812 --> 00:44:10,479
So I'm gonna have the tableView.reloadData(), which

1090
00:44:10,548 --> 00:44:13,382
is the hammer, which is okay, because I removed everything,

1091
00:44:13,451 --> 00:44:15,250
so the hammer's gonna be pretty light,

1092
00:44:15,319 --> 00:44:16,619
a little ball-peen hammer.

1093
00:44:16,687 --> 00:44:18,754
Okay, just going to clear the table out, so

1094
00:44:18,823 --> 00:44:20,723
tha's perfectly fine in this case.

1095
00:44:22,059 --> 00:44:22,591
What else do I need to do?

1096
00:44:22,660 --> 00:44:25,093
Well, I, now I need to search for tweets.

1097
00:44:25,162 --> 00:44:27,963
So I have to write a function to do that to search for

1098
00:44:28,032 --> 00:44:28,998
some tweet.

1099
00:44:29,067 --> 00:44:32,501
I'm also gonna set my title equal to the searchText.

1100
00:44:32,569 --> 00:44:34,703
That way if I happen to be in a navigation controller or

1101
00:44:34,772 --> 00:44:37,272
something like that, it'll show whatever I'm searching

1102
00:44:37,341 --> 00:44:40,208
for, #stanford or whatever at the top, so

1103
00:44:40,277 --> 00:44:43,613
I'll just make my UI look nice there.

1104
00:44:44,815 --> 00:44:45,547
All right, so

1105
00:44:45,616 --> 00:44:48,384
we got to do this private func searchForTweets.

1106
00:44:50,888 --> 00:44:53,055
Okay, so this is the thing that needs to go off and

1107
00:44:53,124 --> 00:44:58,060
find these tweets, and so we'll do that in a moment.

1108
00:44:58,128 --> 00:45:00,395
One thing I'm also gonna do is I'm gonna do viewDidLoad,

1109
00:45:00,464 --> 00:45:01,531
just for testing purposes.

1110
00:45:01,599 --> 00:45:04,466
You notice I do this a lot when I'm developing, and

1111
00:45:04,535 --> 00:45:05,868
I wanna have some testing,

1112
00:45:05,937 --> 00:45:08,137
I'm gonna just set my model to something.

1113
00:45:08,206 --> 00:45:11,740
So we'll do #stanford, okay, just for testing.

1114
00:45:11,809 --> 00:45:13,509
Once we're got our MVC working,

1115
00:45:13,577 --> 00:45:17,012
its public API is working, then we will remove this code.

1116
00:45:17,081 --> 00:45:17,914
It's just testing code.

1117
00:45:19,050 --> 00:45:20,916
Okay, now, we have an error here.

1118
00:45:20,985 --> 00:45:24,586
And this error is Swift saying excuse me.

1119
00:45:24,655 --> 00:45:25,755
What is tweet?

1120
00:45:27,358 --> 00:45:28,991
What is that type?

1121
00:45:29,060 --> 00:45:32,094
And I didn't really want you to be wasting your time in

1122
00:45:32,163 --> 00:45:35,231
your homework figuring out how to go fetch

1123
00:45:35,299 --> 00:45:38,167
a tweet from Twitter and do a request and all that.

1124
00:45:38,236 --> 00:45:41,703
So I wrote a framework that did it for you.

1125
00:45:41,772 --> 00:45:44,440
And by framework, I mean a framework like this.

1126
00:45:44,508 --> 00:45:48,076
Like UIKit, right, UIKit is this like library of a whole

1127
00:45:48,145 --> 00:45:50,746
bunch of data structures that you can use to build your app.

1128
00:45:50,815 --> 00:45:54,083
Well, I wrote one for you that will do Twitter stuff for it.

1129
00:45:54,152 --> 00:45:55,718
And it has something in it called tweet.

1130
00:45:55,786 --> 00:45:57,620
And it also has something called request that lets

1131
00:45:57,689 --> 00:45:59,655
you make a Twitter request.

1132
00:45:59,723 --> 00:46:02,925
All right, so that thing is right over here.

1133
00:46:02,994 --> 00:46:06,195
Now, how do frameworks work?

1134
00:46:06,264 --> 00:46:08,731
How do you use them when they're not built into

1135
00:46:08,799 --> 00:46:10,265
the system like Apple?

1136
00:46:10,334 --> 00:46:14,903
And the answer is, you need to build a higher level structure

1137
00:46:14,972 --> 00:46:18,006
for Xcode to work with called a workspace.

1138
00:46:18,075 --> 00:46:21,343
So I'm actually gonna close this project.

1139
00:46:21,412 --> 00:46:22,745
I'm closing this project.

1140
00:46:22,814 --> 00:46:25,648
And I'm going to Xcode, and I'm gonna create a new thing,

1141
00:46:25,717 --> 00:46:28,184
which you've never seen before, called a workspace.

1142
00:46:29,253 --> 00:46:30,485
Now when I create this workspace,

1143
00:46:30,554 --> 00:46:31,620
it wants to know where to put it.

1144
00:46:31,688 --> 00:46:32,722
Be careful here, look,

1145
00:46:32,790 --> 00:46:34,957
it's trying to put it inside my Smashtag project,

1146
00:46:35,026 --> 00:46:36,325
which I don't wanna do that.

1147
00:46:36,394 --> 00:46:39,995
I wanna put it up the top of my Developer level here,

1148
00:46:40,064 --> 00:46:41,630
same place I put all of my projects, okay,

1149
00:46:41,699 --> 00:46:43,565
so really be careful about that.

1150
00:46:43,634 --> 00:46:46,502
So I'm gonna call this L9, this is lecture 9, so

1151
00:46:46,571 --> 00:46:47,703
we'll call it L9.

1152
00:46:47,772 --> 00:46:50,006
And I hit Save, and this created this workspace.

1153
00:46:50,074 --> 00:46:52,341
But notice in the navigator, there's nothing there.

1154
00:46:53,610 --> 00:46:55,177
So what do we put in a workspace?

1155
00:46:55,246 --> 00:46:57,980
Well, what we put in a workspace are other projects.

1156
00:46:58,048 --> 00:47:00,649
And this workspace is just gonna collect all those

1157
00:47:00,718 --> 00:47:02,651
projects, because they kind of go together.

1158
00:47:02,719 --> 00:47:05,821
And obviously, this Twitter framework that I'm providing

1159
00:47:05,890 --> 00:47:08,291
to you right here goes together with Smashtag,

1160
00:47:08,359 --> 00:47:11,694
which is this thing we've been working on so far.

1161
00:47:11,762 --> 00:47:14,830
Now what you drag down in here is the .xcodeproj,

1162
00:47:14,899 --> 00:47:18,334
because it's the project itself that you wanna put in

1163
00:47:18,402 --> 00:47:19,535
this workspace.

1164
00:47:19,603 --> 00:47:21,670
So you just drag that in for both of them, so

1165
00:47:21,739 --> 00:47:23,639
I'm gonna open this one as well.

1166
00:47:23,708 --> 00:47:26,609
Here's the Xcode project for this Twitter thing.

1167
00:47:26,678 --> 00:47:29,378
Drag in, now be careful not to put it inside,

1168
00:47:29,447 --> 00:47:32,481
see how that's trying to put it inside Smashtag there?

1169
00:47:32,550 --> 00:47:35,217
Put it outside, so that they're siblings.

1170
00:47:35,285 --> 00:47:38,454
Now I have this workspace right here that has two

1171
00:47:38,523 --> 00:47:43,359
projects in it, and you even go here and hide others.

1172
00:47:43,427 --> 00:47:46,028
And if we look in the Smashtag one, woo, looks familiar.

1173
00:47:46,097 --> 00:47:48,997
This is the code we were just working on, right?

1174
00:47:49,066 --> 00:47:50,599
If we look in the Twitter one,

1175
00:47:50,668 --> 00:47:52,134
this is the code I am providing you.

1176
00:47:52,203 --> 00:47:53,702
Now, what's in here?

1177
00:47:53,771 --> 00:47:56,005
Here's tweet which is this struct and

1178
00:47:56,074 --> 00:47:58,874
it's got all the things you would expect in a tweet.

1179
00:47:58,943 --> 00:48:01,210
The text of the tweet, the user who created it,

1180
00:48:01,279 --> 00:48:03,279
which is another thing, user right here,

1181
00:48:03,347 --> 00:48:06,082
and the user has a screen name that's at sign something,

1182
00:48:06,150 --> 00:48:09,318
the actual name, a unique identifier for the user.

1183
00:48:09,387 --> 00:48:12,888
Back to tweet, it's also got a unique identifier.

1184
00:48:12,956 --> 00:48:15,858
It's also got things that are embedded in the tweet like

1185
00:48:15,927 --> 00:48:16,858
other hashtags and

1186
00:48:16,927 --> 00:48:19,294
other users that are referenced inside the tweet.

1187
00:48:19,363 --> 00:48:21,163
And even media cuz you know a lot of times

1188
00:48:21,231 --> 00:48:23,899
tweets have an image with them too.

1189
00:48:23,967 --> 00:48:26,301
And the other thing that's of importance in this Twitter

1190
00:48:26,370 --> 00:48:28,637
framework that I'm giving you is this class Request,

1191
00:48:28,706 --> 00:48:30,305
Twitter Request right here.

1192
00:48:30,374 --> 00:48:34,510
And this Request class is the thing you use to make requests

1193
00:48:34,579 --> 00:48:35,544
for Twitter.

1194
00:48:35,612 --> 00:48:39,248
Now, you don't need to look at any of the implementation

1195
00:48:39,316 --> 00:48:41,683
of any of this, and in fact, you can go and

1196
00:48:41,752 --> 00:48:44,119
do assistant editor.

1197
00:48:44,188 --> 00:48:46,989
And if you do assistant editor on something like this,

1198
00:48:47,058 --> 00:48:50,426
you're actually gonna see its public API here.

1199
00:48:50,494 --> 00:48:53,229
See all those public, public public, public,

1200
00:48:53,297 --> 00:48:57,433
public; now we have not seen this public keyword before,

1201
00:48:57,502 --> 00:49:00,435
all we've seen is private or fileprivate.

1202
00:49:00,504 --> 00:49:02,771
So what does this public thing mean?

1203
00:49:02,840 --> 00:49:06,608
Look, I put public in all this these things over here.

1204
00:49:06,677 --> 00:49:10,078
Public means that not only is it not private but

1205
00:49:10,147 --> 00:49:12,781
you can see it even if this framework is being used by

1206
00:49:12,850 --> 00:49:14,583
some other project.

1207
00:49:14,651 --> 00:49:18,754
So public means public outside of this framework, right,

1208
00:49:18,823 --> 00:49:19,421
make sense?

1209
00:49:19,490 --> 00:49:21,656
So in UIKit a lot of things are marked public.

1210
00:49:21,725 --> 00:49:23,659
All the things you can use have to be marked public cuz

1211
00:49:23,727 --> 00:49:25,460
it's in a different framework than your app.

1212
00:49:25,529 --> 00:49:30,098
Your app is kind of a framework, in a sense, so

1213
00:49:30,167 --> 00:49:30,666
that's public.

1214
00:49:30,735 --> 00:49:32,501
And then, also notice farther down,

1215
00:49:32,569 --> 00:49:35,070
these methods are marked internal; that means I can

1216
00:49:35,139 --> 00:49:38,641
only use them inside my framework, so I can't call any

1217
00:49:38,709 --> 00:49:41,643
of these methods from Smashtag, they're internal.

1218
00:49:41,712 --> 00:49:44,412
This actually, you haven't seen this keyword because

1219
00:49:44,481 --> 00:49:47,449
it's the default, all the methods you've ever created

1220
00:49:47,517 --> 00:49:51,152
that you didn't mark private or fileprivate are internal.

1221
00:49:51,221 --> 00:49:52,221
It's the default, so

1222
00:49:52,290 --> 00:49:55,858
you haven't put the word internal there, okay.

1223
00:49:55,926 --> 00:49:56,859
So, let's look at the public API.

1224
00:49:56,927 --> 00:49:58,994
Let's not even pay any attention to that, and

1225
00:49:59,063 --> 00:50:00,429
look at the public API.

1226
00:50:00,498 --> 00:50:03,398
This public API of Request, for making requests,

1227
00:50:03,467 --> 00:50:05,200
we're only going to use three things.

1228
00:50:05,269 --> 00:50:07,736
One is this convenience initializer

1229
00:50:07,804 --> 00:50:10,205
where you just give it something to search for and

1230
00:50:10,274 --> 00:50:12,174
how many results you want.

1231
00:50:12,243 --> 00:50:15,010
And then this method fetchTweets where you just

1232
00:50:15,079 --> 00:50:18,314
give it this closure which it will call when it's done.

1233
00:50:18,382 --> 00:50:20,416
It's gonna go off and do it on another thread and

1234
00:50:20,485 --> 00:50:22,251
when it's done it will call.

1235
00:50:22,319 --> 00:50:24,653
And that's going to have an array of the tweets it found

1236
00:50:24,722 --> 00:50:27,389
that match your search.

1237
00:50:27,458 --> 00:50:28,724
what we're gonna use is this one down here, newer where if

1238
00:50:28,725 --> 00:50:29,991
And then last,

1239
00:50:30,061 --> 00:50:32,161
you ask it a request, give me a newer request.

1240
00:50:32,230 --> 00:50:35,197
It'll give your request that you can use to get newer

1241
00:50:35,266 --> 00:50:35,731
tweets.

1242
00:50:35,799 --> 00:50:37,065
Tweets that have been tweeted after

1243
00:50:37,134 --> 00:50:38,967
the previous one that you've got.

1244
00:50:39,036 --> 00:50:39,968
So, that's all we're gonna use here.

1245
00:50:40,037 --> 00:50:42,905
We're not really gonna use any of the other API

1246
00:50:42,973 --> 00:50:43,939
in this request.

1247
00:50:44,008 --> 00:50:46,708
In your homework, you'll have to know this API here of

1248
00:50:46,777 --> 00:50:48,777
Tweet cause you'll have to be able to get the text and

1249
00:50:48,846 --> 00:50:52,047
the user information and also MediaItems so

1250
00:50:52,116 --> 00:50:57,285
you can get the URLs of images that are in there, etc.

1251
00:50:57,354 --> 00:50:59,521
But you never have to look at the private implementation of

1252
00:50:59,590 --> 00:51:01,924
this framework so don't even waste your time looking there.

1253
00:51:01,992 --> 00:51:04,026
Just look at things marked public,

1254
00:51:04,095 --> 00:51:07,462
there's not a lot of things marked public- that's the only

1255
00:51:07,531 --> 00:51:09,698
thing you're going to look for.

1256
00:51:09,767 --> 00:51:12,334
Now how do I use this framework,

1257
00:51:12,402 --> 00:51:14,970
this Twitter framework in Smashtag?

1258
00:51:15,039 --> 00:51:16,472
Well, you have to do one step.

1259
00:51:16,540 --> 00:51:18,807
You can't just put them in the same workspace and

1260
00:51:18,876 --> 00:51:20,075
start working.

1261
00:51:20,144 --> 00:51:24,245
Well, two steps, one is I need to say import Twitter.

1262
00:51:24,314 --> 00:51:26,748
Just like I say import UIKit, if I want to use this Twitter

1263
00:51:26,817 --> 00:51:29,118
framework up here I have to say import Twitter.

1264
00:51:29,186 --> 00:51:31,620
That's gonna cause this tweet to start being

1265
00:51:31,689 --> 00:51:34,323
recognized as a type because it's gonna see this

1266
00:51:34,392 --> 00:51:36,292
tweet type right over here.

1267
00:51:36,360 --> 00:51:40,062
But the other important thing, don't forget,

1268
00:51:40,131 --> 00:51:44,500
is you need to tell Xcode that when you build Smashtag that

1269
00:51:44,569 --> 00:51:47,269
app includes Twitter in it.

1270
00:51:47,337 --> 00:51:50,806
And you do that by going to the Smashtag project, okay,

1271
00:51:50,874 --> 00:51:51,640
the project settings.

1272
00:51:51,709 --> 00:51:53,175
And go all the way to the bottom where it says

1273
00:51:53,244 --> 00:51:54,776
Embedded Binaries.

1274
00:51:54,845 --> 00:51:58,980
And just pick up the product of your Twitter framework.

1275
00:51:59,049 --> 00:52:00,549
You see where it says Products right here?

1276
00:52:00,618 --> 00:52:04,653
Just pick that up and drag it in here, and that says,

1277
00:52:04,722 --> 00:52:08,891
please put Twitter framework into my Smashtag,

1278
00:52:08,960 --> 00:52:10,058
because my Smashtag uses it.

1279
00:52:10,127 --> 00:52:12,694
If you don't do this step, then it'll all compile but

1280
00:52:12,763 --> 00:52:15,130
then when Smashtag runs, Twitter won't be there, and

1281
00:52:15,198 --> 00:52:15,965
so it will fail.

1282
00:52:18,569 --> 00:52:20,068
Now, I'm gonna make you do that step as part of

1283
00:52:20,137 --> 00:52:20,969
your homework.

1284
00:52:21,038 --> 00:52:23,638
I will post this code for Smashtag, but

1285
00:52:23,707 --> 00:52:26,208
I'm not gonna post the workspace, so

1286
00:52:26,277 --> 00:52:29,945
you're gonna have to build the workspace on your own.

1287
00:52:30,014 --> 00:52:30,913
All right, so let's continue.

1288
00:52:30,982 --> 00:52:32,981
Now that we've got this array of tweets,

1289
00:52:33,050 --> 00:52:35,283
what are we gonna do with this array of tweets?

1290
00:52:35,352 --> 00:52:40,555
Let's start by doing a fetch for our search text.

1291
00:52:40,624 --> 00:52:41,790
So we got our search text,

1292
00:52:41,858 --> 00:52:44,092
we wanna go fetch all those things on there.

1293
00:52:44,161 --> 00:52:45,995
That's what we're supposed to do in search for tweets.

1294
00:52:47,064 --> 00:52:48,096
Let's make another function here,

1295
00:52:48,165 --> 00:52:50,065
another little private func.

1296
00:52:50,133 --> 00:52:52,801
I'm gonna call it twitterRequest,

1297
00:52:52,870 --> 00:52:56,104
which is gonna return a Twitter.Request.

1298
00:52:56,173 --> 00:52:57,973
But yeah, here's another thing.

1299
00:52:58,041 --> 00:53:00,809
This I can call tweet because I'm importing this Twitter

1300
00:53:00,878 --> 00:53:03,678
framework and there's no other class called tweet, so

1301
00:53:03,747 --> 00:53:04,780
i just have to call it tweet.

1302
00:53:04,849 --> 00:53:07,983
Its full name is actually Twitter.Tweet.

1303
00:53:08,052 --> 00:53:11,720
Just like, you know, UITableViewController,

1304
00:53:11,789 --> 00:53:15,490
it's full name is UIKit.UITableViewController.

1305
00:53:15,559 --> 00:53:16,892
use Twitter.Tweet because I think in Assignment 5, you

1306
00:53:16,893 --> 00:53:18,226
Now i'm gonna

1307
00:53:18,295 --> 00:53:21,530
might end up wanting to have you own local tweet class.

1308
00:53:21,598 --> 00:53:23,164
So I'm gonna use Twitter.Tweet and

1309
00:53:23,233 --> 00:53:26,034
Twitter.Request everywhere but I wouldn't have to as long as

1310
00:53:26,102 --> 00:53:28,670
I didn't have a class called Tweet or Request otherwise.

1311
00:53:28,739 --> 00:53:31,840
But this is a pretty generic name request so putting

1312
00:53:31,909 --> 00:53:35,644
the Twitter dot on front might be kind of a good idea anyway.

1313
00:53:36,781 --> 00:53:37,713
All right so

1314
00:53:37,781 --> 00:53:40,282
the Twitter.Request function here is just going to return

1315
00:53:40,351 --> 00:53:44,386
a Twitter request that matches this search text.

1316
00:53:44,455 --> 00:53:45,420
And that's really, really simple,

1317
00:53:45,489 --> 00:53:48,556
I'm just gonna say, if I can let the query for

1318
00:53:48,625 --> 00:53:51,393
the search term equal the search text.

1319
00:53:51,461 --> 00:53:55,030
And I wanna make sure that that query is not empty.

1320
00:53:55,098 --> 00:53:58,800
So I don't wanna search for nil or for the empty string.

1321
00:53:58,869 --> 00:54:01,503
So I'm just keeping that out of it right here.

1322
00:54:01,572 --> 00:54:04,305
And otherwise I'm just gonna return a Twitter request using

1323
00:54:04,374 --> 00:54:07,042
that convenient initializer I told you about called Search.

1324
00:54:08,245 --> 00:54:11,046
And I'm just gonna pass that query and,

1325
00:54:11,115 --> 00:54:12,781
well let's get 100 of them.

1326
00:54:12,850 --> 00:54:15,351
Okay, so we're gonna, we'll grab 100 tweets at a time.

1327
00:54:17,021 --> 00:54:20,188
And if that's not true, if the search term is nil or

1328
00:54:20,257 --> 00:54:23,391
it's empty, then I'm gonna return nil from this.

1329
00:54:23,460 --> 00:54:25,628
So let's make this be, you know, optional.

1330
00:54:27,164 --> 00:54:28,563
Okay, so everyone understand what this function does?

1331
00:54:28,632 --> 00:54:31,800
It just makes a Twitter request that will search for

1332
00:54:31,869 --> 00:54:35,036
our searchText, that's all it does.

1333
00:54:35,105 --> 00:54:36,538
So now down here in searchForTweets,

1334
00:54:36,606 --> 00:54:41,343
I can say if I can let request equal the twitterRequest,

1335
00:54:41,412 --> 00:54:43,111
which hopefully it can make.

1336
00:54:43,180 --> 00:54:46,047
Okay, now I have a request.

1337
00:54:46,116 --> 00:54:50,819
Now I just need to cause that request to happen.

1338
00:54:50,888 --> 00:54:58,727
So I'm just gonna say this Twitter request.fetchTweets.

1339
00:54:58,796 --> 00:55:02,364
So this fetchTweets function right there, you see it?

1340
00:55:02,433 --> 00:55:03,765
The top one, okay,

1341
00:55:03,834 --> 00:55:07,603
it takes this closure right here as an argument.

1342
00:55:07,671 --> 00:55:11,172
I'm gonna double click on it, to show what it does here.

1343
00:55:11,241 --> 00:55:14,309
I'm going to use trailing closure syntax to get rid of

1344
00:55:14,377 --> 00:55:16,345
the parentheses there.

1345
00:55:16,413 --> 00:55:17,179
Now what's this?

1346
00:55:17,248 --> 00:55:19,648
This is the only argument in my closure.

1347
00:55:19,717 --> 00:55:21,783
Those are the tweets that it fetched.

1348
00:55:21,852 --> 00:55:23,351
See it's an array of tweets.

1349
00:55:23,420 --> 00:55:24,286
I'll call this newTweets.

1350
00:55:24,355 --> 00:55:26,522
Okay, so that's going to be an array of tweets,

1351
00:55:26,590 --> 00:55:29,490
I don't even need the parentheses here by the way.

1352
00:55:29,559 --> 00:55:30,192
So I have newTweets.

1353
00:55:30,260 --> 00:55:32,394
So newTweets is gonna be an array of Tweet that it

1354
00:55:32,463 --> 00:55:33,695
fetched; now, of course,

1355
00:55:33,764 --> 00:55:35,763
it's doing this off the main queue, right?

1356
00:55:35,832 --> 00:55:38,066
It's gotta go do that Twitter request,

1357
00:55:38,135 --> 00:55:40,168
what if it's a really slow network?

1358
00:55:40,237 --> 00:55:43,572
Or Twitter is really slow that time or whatever.

1359
00:55:43,640 --> 00:55:45,106
I finally got these new tweets back, what do I wanna do?

1360
00:55:45,107 --> 00:55:46,573
So inside here,

1361
00:55:46,643 --> 00:55:50,913
Well I just want to add them on to the end of my model,

1362
00:55:50,981 --> 00:55:52,748
Here's my model, it's an array of array of tweets.

1363
00:55:52,749 --> 00:55:54,516
right?

1364
00:55:54,584 --> 00:55:58,853
Here's an array, so I'm just going to take my model, and

1365
00:55:58,922 --> 00:56:02,257
append onto it this array of tweets.

1366
00:56:02,325 --> 00:56:05,727
And actually, I'm not gonna append it on the end because

1367
00:56:05,796 --> 00:56:08,830
I want all my new tweets to show up at the beginning,

1368
00:56:08,899 --> 00:56:11,200
so in section zero at the beginning, so

1369
00:56:11,268 --> 00:56:14,369
I'm gonna insert these new tweets at 0 in my array.

1370
00:56:14,438 --> 00:56:15,570
So right at the top.

1371
00:56:15,639 --> 00:56:17,573
So my new tweets are gonna come in at the top.

1372
00:56:18,809 --> 00:56:19,374
Make sense?

1373
00:56:19,443 --> 00:56:21,109
Now, we have an error there.

1374
00:56:21,178 --> 00:56:24,112
Can anyone guess why this error is here before I

1375
00:56:24,181 --> 00:56:24,746
open it?

1376
00:56:24,815 --> 00:56:25,447
>> Mutating.

1377
00:56:25,516 --> 00:56:27,249
>> What? >> Yeah, mutating.

1378
00:56:27,318 --> 00:56:27,949
>> Mutating.

1379
00:56:28,018 --> 00:56:29,484
That's a good guess but no.

1380
00:56:29,553 --> 00:56:34,489
It's because self, it's the old closure cycle problem,

1381
00:56:34,558 --> 00:56:35,490
right?

1382
00:56:35,559 --> 00:56:37,392
Since we're accessing self here,

1383
00:56:37,460 --> 00:56:39,228
these tweets as part of our self.

1384
00:56:39,296 --> 00:56:41,630
We need to explicitly say that so

1385
00:56:41,698 --> 00:56:44,433
that we can notice, we might have a memory cycle.

1386
00:56:44,501 --> 00:56:46,668
And do we have a memory cycle here?

1387
00:56:46,737 --> 00:56:48,536
In fact we do.

1388
00:56:48,605 --> 00:56:51,106
Because what if this view controller goes off to

1389
00:56:51,175 --> 00:56:53,374
fetch some tweets and it takes forever.

1390
00:56:53,443 --> 00:56:57,078
And so the person says, I'll search for something else.

1391
00:56:57,147 --> 00:56:59,014
Now they said the search text is on the else and

1392
00:56:59,083 --> 00:57:00,482
another fetch goes off.

1393
00:57:00,551 --> 00:57:03,652
And now here comes the first fetch and it's irrelevant now

1394
00:57:03,720 --> 00:57:05,453
because I already looked for something else.

1395
00:57:05,522 --> 00:57:08,823
So we do here, want to be careful to ignore

1396
00:57:08,892 --> 00:57:12,460
this when it comes back and we also, if someone searches and

1397
00:57:12,529 --> 00:57:15,130
it's taking forever and they hit back, we want our view

1398
00:57:15,199 --> 00:57:17,833
controllers to be able to leave memory as well.

1399
00:57:17,902 --> 00:57:19,701
So we don't want the closure, the cycle here,

1400
00:57:19,770 --> 00:57:21,936
we don't want this closure holding our self in memory.

1401
00:57:22,005 --> 00:57:24,639
So we don't want this to be a strong pointer and

1402
00:57:24,708 --> 00:57:27,709
we need to check to make sure that when we get back,

1403
00:57:27,778 --> 00:57:29,877
it's still what we're interested in.

1404
00:57:29,946 --> 00:57:31,880
So how can we break this cycle?

1405
00:57:31,949 --> 00:57:33,915
We're just gonna use our friend weak self, okay?

1406
00:57:33,916 --> 00:57:35,882
That's easy.

1407
00:57:35,952 --> 00:57:37,552
And that turns this into an optional.

1408
00:57:37,621 --> 00:57:39,253
So we added a question mark.

1409
00:57:39,322 --> 00:57:40,422
Boom, we broke that cycle.

1410
00:57:40,491 --> 00:57:42,457
So even if this fetch is sitting out there fetching,

1411
00:57:42,525 --> 00:57:44,325
it's not gonna be keeping our view controller in memory.

1412
00:57:44,394 --> 00:57:46,060
Our view control can leave memory, and

1413
00:57:46,129 --> 00:57:46,795
if it comes back and

1414
00:57:46,864 --> 00:57:49,897
it's gone, then this line of code will not execute.

1415
00:57:49,966 --> 00:57:52,267
How about dealing with the fact that our request might

1416
00:57:52,336 --> 00:57:53,635
have changed?

1417
00:57:53,704 --> 00:57:54,969
Well, to do that,

1418
00:57:55,038 --> 00:57:59,073
I'm gonna have to keep track of our lastTwitterRequest,

1419
00:57:59,142 --> 00:58:02,211
actually we've got to put it inside here.

1420
00:58:04,181 --> 00:58:08,349
Okay, I'm gonna keep track of it, and

1421
00:58:08,418 --> 00:58:13,388
then in here I'm not going to do this unless our

1422
00:58:13,457 --> 00:58:18,060
request equals the lastTwitterRequest.

1423
00:58:18,128 --> 00:58:21,029
So if this request that came back is not the last one we

1424
00:58:21,098 --> 00:58:22,797
issued, then I'm not gonna do it.

1425
00:58:22,866 --> 00:58:24,866
And so let me go up here and

1426
00:58:24,935 --> 00:58:28,169
say private var lastTwitterRequest and

1427
00:58:28,238 --> 00:58:32,907
that's going to be a Twitter.Request of course.

1428
00:58:32,976 --> 00:58:38,079
Request, optional, is not always set.

1429
00:58:38,148 --> 00:58:39,914
Everyone kinda see what I'm doing there?

1430
00:58:39,983 --> 00:58:42,583
And of course this is saying self again, so we'll put self

1431
00:58:42,652 --> 00:58:44,920
in there and of course self is weak so we'll do that.

1432
00:58:46,056 --> 00:58:46,988
So that's all good.

1433
00:58:47,057 --> 00:58:48,957
Any other problems you can see with this?

1434
00:58:49,026 --> 00:58:51,493
I don't see any so far.

1435
00:58:52,529 --> 00:58:53,428
So it's all good. So,

1436
00:58:53,497 --> 00:58:55,363
before we go hooking up our table view,

1437
00:58:55,432 --> 00:58:59,167
let's just make sure that our Twitter fetches are working.

1438
00:58:59,236 --> 00:59:02,137
And I'm gonna do that by putting a didSet

1439
00:59:02,206 --> 00:59:06,007
up here on my model, and every time my model changes,

1440
00:59:06,076 --> 00:59:08,310
I'm just gonna print the tweets out.

1441
00:59:08,379 --> 00:59:09,778
Now luckily I've made it so

1442
00:59:09,847 --> 00:59:11,979
the tweet is CustomStringConvertible,

1443
00:59:12,048 --> 00:59:13,615
it implements description.

1444
00:59:13,683 --> 00:59:15,383
It can print itself as a string so

1445
00:59:15,452 --> 00:59:16,885
this is an array of those.

1446
00:59:16,953 --> 00:59:19,521
So this will print out an array, actually an array

1447
00:59:19,589 --> 00:59:22,224
of an array of this tweet printed out as a string.

1448
00:59:22,293 --> 00:59:26,294
So we're just gonna print it out there.

1449
00:59:26,363 --> 00:59:27,695
Just seems like it should work?

1450
00:59:27,764 --> 00:59:30,865
Let's go give it a try and find out.

1451
00:59:30,934 --> 00:59:33,068
We'll do this on iPhone 7.

1452
00:59:37,107 --> 00:59:38,706
Pay attention right now because this

1453
00:59:38,775 --> 00:59:40,742
is not in fact going to work.

1454
00:59:40,810 --> 00:59:43,177
And this won't work for you either and you're gonna need

1455
00:59:43,246 --> 00:59:45,581
to do a couple of things to make a Twitter fetch work.

1456
00:59:46,917 --> 00:59:49,951
By the way you see we have these prototype cells that

1457
00:59:50,020 --> 00:59:53,055
have to have reuse identifiers; gotta remember to

1458
00:59:53,123 --> 00:59:55,356
fix that later.

1459
00:59:55,425 --> 01:00:00,762
Alright, so we run, and look at this thing it puts up here,

1460
01:00:00,831 --> 01:00:02,964
Smashtag would like to access Twitter accounts.

1461
01:00:03,033 --> 01:00:05,166
So you're not allowed to write an app that just starts

1462
01:00:05,235 --> 01:00:07,935
posting things for people on Twitter behind the scenes.

1463
01:00:08,004 --> 01:00:11,806
Okay, when you write an app it is always going to ask,

1464
01:00:11,875 --> 01:00:14,709
the first time you try to use Twitter, whether it's allowed.

1465
01:00:14,777 --> 01:00:18,513
So I'll click okay, and let's go look in our console and

1466
01:00:18,582 --> 01:00:19,214
see if it printed.

1467
01:00:21,384 --> 01:00:24,218
It didn't, all it printed out here is, couldn't discover

1468
01:00:24,287 --> 01:00:27,689
Twitter account type, hm, why would it say that?

1469
01:00:27,757 --> 01:00:31,026
Well, that's because your simulator, it's just a device,

1470
01:00:31,094 --> 01:00:34,229
it needs to have Twitter, a Twitter account, basically,

1471
01:00:34,298 --> 01:00:35,463
your device needs a Twitter account, so

1472
01:00:35,531 --> 01:00:36,331
where do we set that?

1473
01:00:36,399 --> 01:00:38,299
So let's go back to our simulator,

1474
01:00:38,368 --> 01:00:42,737
here it is, I'm gonna go hardware, home button, okay,

1475
01:00:42,805 --> 01:00:44,405
you can also do command, shift, F.

1476
01:00:44,474 --> 01:00:45,306
Is hardware home button.

1477
01:00:45,375 --> 01:00:49,477
And I'm gonna go over to the Settings app on my simulator.

1478
01:00:49,546 --> 01:00:51,512
But you can do it on your device as well.

1479
01:00:51,581 --> 01:00:54,082
And if you go down in settings, here's Twitter.

1480
01:00:54,151 --> 01:00:54,916
Look at that.

1481
01:00:54,985 --> 01:00:55,550
Twitter right there.

1482
01:00:55,619 --> 01:00:57,218
And here's where you type in your

1483
01:00:57,287 --> 01:00:58,386
Twitter username and password.

1484
01:00:58,455 --> 01:00:59,854
And if you don't type this in,

1485
01:00:59,923 --> 01:01:03,391
then no apps on your system can access Twitter.

1486
01:01:03,460 --> 01:01:06,094
Cuz how would they- they'd have to know who you are.

1487
01:01:06,163 --> 01:01:08,730
So I'm gonna type this here, I'm gonna do it off screen cuz

1488
01:01:08,799 --> 01:01:11,466
I don't want you to see my password.

1489
01:01:11,535 --> 01:01:14,269
So now I am logged in on Twitter.

1490
01:01:15,539 --> 01:01:17,139
So now if I go back and start my app

1491
01:01:18,875 --> 01:01:21,876
It will both be in allowed because I clicked OK.

1492
01:01:21,945 --> 01:01:23,878
And I'll be logged in so

1493
01:01:23,947 --> 01:01:25,980
it'll have an actual Twitter user that can do it.

1494
01:01:26,049 --> 01:01:27,782
And sure enough, look down here at the bottom.

1495
01:01:27,850 --> 01:01:31,186
We're getting all kinds of tweets being printed out here.

1496
01:01:31,255 --> 01:01:32,387
So here's a tweet.

1497
01:01:32,455 --> 01:01:34,756
Here's its unique ID.

1498
01:01:34,824 --> 01:01:36,691
Here's the person who tweeted it.

1499
01:01:36,760 --> 01:01:38,559
Here's when it was tweeted.

1500
01:01:38,628 --> 01:01:41,729
Here is the text of the tweet.

1501
01:01:41,798 --> 01:01:44,432
This one's got an embedded URL, etc.

1502
01:01:44,501 --> 01:01:45,700
So we're doing well.

1503
01:01:45,769 --> 01:01:47,702
We've got our tweets coming in.

1504
01:01:47,771 --> 01:01:50,638
So now all we need to do is load them up into our

1505
01:01:50,707 --> 01:01:51,506
table view.

1506
01:01:51,575 --> 01:01:53,608
So what do we need to do to load this thing up in

1507
01:01:53,676 --> 01:01:54,409
the table view?

1508
01:01:54,478 --> 01:01:57,879
Now, surprisingly simple actually, the two pieces we

1509
01:01:57,948 --> 01:02:01,249
have to do, one is every time we change our model we have

1510
01:02:01,317 --> 01:02:04,519
to tell the table view that it changed and then we have

1511
01:02:04,587 --> 01:02:07,989
to implement those table view data source methods.

1512
01:02:08,057 --> 01:02:09,323
So let's start with the first one.

1513
01:02:09,392 --> 01:02:12,760
Actually we have already changed our model once.

1514
01:02:12,829 --> 01:02:14,962
Right here, we changed our model and

1515
01:02:15,031 --> 01:02:17,965
we told the table view about it, so that's good.

1516
01:02:18,034 --> 01:02:20,001
Here we're changing our model.

1517
01:02:20,070 --> 01:02:23,137
So we need to tell the table view about it.

1518
01:02:23,206 --> 01:02:26,207
So self?.tableView.

1519
01:02:26,276 --> 01:02:27,909
And what did I do here to my model?

1520
01:02:27,977 --> 01:02:30,611
I just inserted a section at the beginning.

1521
01:02:30,680 --> 01:02:34,882
So there happens to be a tableView method called

1522
01:02:34,951 --> 01:02:36,484
insertSection.

1523
01:02:36,553 --> 01:02:38,419
And it just says, you inserted some sections.

1524
01:02:38,488 --> 01:02:39,720
Which ones?

1525
01:02:39,789 --> 01:02:41,289
ask you about those and put the rows in there for you.

1526
01:02:41,290 --> 01:02:42,790
I will go and

1527
01:02:42,859 --> 01:02:44,792
And this sections is an index set,

1528
01:02:44,861 --> 01:02:47,428
which you can give it an array literal.

1529
01:02:47,497 --> 01:02:49,697
So I just inserted section zero.

1530
01:02:49,766 --> 01:02:52,066
So I'll just put an array with just zero in it.

1531
01:02:52,135 --> 01:02:54,702
And I'm gonna use the fade animation

1532
01:02:54,771 --> 01:02:56,138
to show that fading in.

1533
01:02:58,208 --> 01:02:59,507
So, insertSections.

1534
01:02:59,575 --> 01:03:02,777
So, this is me telling the tableView, I changed my model,

1535
01:03:02,845 --> 01:03:04,379
so ask me again.

1536
01:03:04,447 --> 01:03:05,780
Ask me those tableView data source.

1537
01:03:05,849 --> 01:03:08,483
Now, since I told it exactly what I did it's only gonna ask

1538
01:03:08,551 --> 01:03:11,252
me about that section, which is nice, higher performance.

1539
01:03:11,321 --> 01:03:13,488
Then reloadData, the hammer reloadData,

1540
01:03:13,557 --> 01:03:16,124
in which case it would ask me for all rows in all sections

1541
01:03:16,193 --> 01:03:20,361
again; so here I know exactly what I did.

1542
01:03:20,430 --> 01:03:24,365
Now this actually is dangerous code here.

1543
01:03:24,434 --> 01:03:26,334
This is really easy to add this line of code and

1544
01:03:26,403 --> 01:03:28,102
now your app just acts weird.

1545
01:03:28,171 --> 01:03:30,204
It just acts weird all the time.

1546
01:03:30,273 --> 01:03:33,240
Can anyone, want, guess why this

1547
01:03:33,309 --> 01:03:36,144
adding this line of code would cause my app to go all weird?

1548
01:03:37,647 --> 01:03:42,149
It's because this is a UI call.

1549
01:03:42,218 --> 01:03:46,153
And what queue are we on here?

1550
01:03:46,222 --> 01:03:47,622
Some queue, not the main queue.

1551
01:03:47,691 --> 01:03:50,725
Whatever queue we fetched those tweets on, okay?

1552
01:03:50,794 --> 01:03:52,159
So we're not on the main queue.

1553
01:03:52,228 --> 01:03:54,862
So we can't make a UI call here.

1554
01:03:54,931 --> 01:04:00,035
Right, so we have to dispatch this back to the main queue.

1555
01:04:01,971 --> 01:04:03,138
So this is something that,

1556
01:04:03,207 --> 01:04:04,839
will just take some getting used to for

1557
01:04:04,907 --> 01:04:06,474
you guys with this multithreading,

1558
01:04:06,543 --> 01:04:08,910
cuz you're gonna do these things in this other queue,

1559
01:04:08,978 --> 01:04:11,479
and you're gonna update your table view, and then

1560
01:04:11,548 --> 01:04:14,215
it's like what's going on my app is just acting so strange.

1561
01:04:14,283 --> 01:04:15,817
And that's why- because you can do

1562
01:04:15,886 --> 01:04:17,151
UI stuff on the main queue.

1563
01:04:17,220 --> 01:04:19,387
And it's not gonna warn you or necessarily crash,

1564
01:04:19,455 --> 01:04:22,023
it might eventually crash, it's just gonna act all weird.

1565
01:04:22,091 --> 01:04:27,161
So, fixed that.

1566
01:04:27,230 --> 01:04:28,096
This is good.

1567
01:04:28,165 --> 01:04:30,064
We've got the table view updating our model and we've

1568
01:04:30,133 --> 01:04:32,333
got the table view knowing about change to the model.

1569
01:04:32,402 --> 01:04:35,236
So now all we need to do is implement this

1570
01:04:35,305 --> 01:04:38,707
UITableViewDataSource protocol so

1571
01:04:38,775 --> 01:04:42,077
that it can get the data from us.

1572
01:04:42,145 --> 01:04:43,044
So let's do it.

1573
01:04:43,113 --> 01:04:47,849
Number of sections, how many sections are in our table?

1574
01:04:47,918 --> 01:04:49,784
Anyone know?

1575
01:04:51,488 --> 01:04:54,488
Yeah.

1576
01:04:54,557 --> 01:04:57,992
Exactly, candy thrown at you cuz that's exactly right.

1577
01:04:58,061 --> 01:04:59,426
tweets.count.

1578
01:04:59,495 --> 01:05:03,464
It's just the number of arrays that we have in our model here

1579
01:05:03,533 --> 01:05:07,602
because each of this arrays inside here are a section, so

1580
01:05:07,671 --> 01:05:08,502
perfect.

1581
01:05:08,571 --> 01:05:11,106
And then what about this one?

1582
01:05:11,174 --> 01:05:15,443
Here we're being asked how many rows are there in tweets

1583
01:05:15,512 --> 01:05:17,044
subsection?

1584
01:05:17,113 --> 01:05:20,215
That's just count also.

1585
01:05:21,752 --> 01:05:23,484
So we've designed our data structure so

1586
01:05:23,553 --> 01:05:25,152
that these are super easy to implement,

1587
01:05:25,221 --> 01:05:26,888
which I highly recommend if you can do it.

1588
01:05:26,957 --> 01:05:27,788
You can't always do it.

1589
01:05:27,857 --> 01:05:29,758
But if you can it's nice.

1590
01:05:29,826 --> 01:05:32,527
So now a little more difficult, only a little

1591
01:05:32,596 --> 01:05:35,596
though, is cellForRowAt index path right here.

1592
01:05:35,665 --> 01:05:38,666
So here's where we have to return the UITableViewCell

1593
01:05:38,735 --> 01:05:40,435
that we're gonna use to draw.

1594
01:05:40,504 --> 01:05:44,238
Now, let's go back to our Storyboard here and

1595
01:05:44,307 --> 01:05:48,242
let's just start out with something simple.

1596
01:05:48,311 --> 01:05:51,579
Let's try using here a subtitle cell.

1597
01:05:51,648 --> 01:05:53,048
So I'm gonna click on this cell.

1598
01:05:53,116 --> 01:05:55,616
And will change its style from being custom

1599
01:05:55,685 --> 01:05:56,784
to being subtitle.

1600
01:05:56,853 --> 01:05:57,718
So there's title and subtitle.

1601
01:05:57,787 --> 01:06:00,655
And I'm gonna set the title to be the text with the tweet.

1602
01:06:00,724 --> 01:06:02,089
And I'm gonna set the subtitle

1603
01:06:02,158 --> 01:06:03,525
to be the person who tweeted it.

1604
01:06:05,528 --> 01:06:07,895
So let's try that and see how that looks.

1605
01:06:07,964 --> 01:06:09,597
So how am I gonna do that?

1606
01:06:09,666 --> 01:06:11,266
Two things I need to do here.

1607
01:06:11,334 --> 01:06:14,001
One is I need to dequeue a reusable cell, and

1608
01:06:14,070 --> 01:06:19,407
I to tell iOS which prototype to use,

1609
01:06:19,475 --> 01:06:20,742
which prototype in the Storyboard.

1610
01:06:20,810 --> 01:06:23,377
So lets go back to our Storyboard.

1611
01:06:23,446 --> 01:06:24,879
And I only have one prototype.

1612
01:06:24,948 --> 01:06:25,613
It's this one.

1613
01:06:25,682 --> 01:06:27,048
That's the one I wanna use.

1614
01:06:27,117 --> 01:06:28,549
So I need to give it an identifier.

1615
01:06:28,618 --> 01:06:29,884
I'm gonna call it Tweet,

1616
01:06:29,953 --> 01:06:32,386
because that's what this cell shows.

1617
01:06:32,455 --> 01:06:33,287
It shows a tweet.

1618
01:06:33,356 --> 01:06:35,490
Notice that caused my warning to go away.

1619
01:06:35,558 --> 01:06:36,957
Because all these prototype cells

1620
01:06:37,026 --> 01:06:38,760
always need an identifier.

1621
01:06:38,829 --> 01:06:40,127
And now when I go back here,

1622
01:06:40,196 --> 01:06:43,631
I can change this from reuseIdentifier to Tweet.

1623
01:06:43,700 --> 01:06:47,468
Okay, so now, I am able to dequeueReusableCell

1624
01:06:47,536 --> 01:06:50,071
that will be a copy of that prototype that's subtitled.

1625
01:06:50,140 --> 01:06:52,741
So all my rows are gonna be subtitle rows.

1626
01:06:53,710 --> 01:06:55,076
So now I've got this cell,

1627
01:06:55,145 --> 01:06:57,512
it's of type UITableViewCell by the way,

1628
01:06:57,581 --> 01:06:59,781
since it's a standard type not a custom type.

1629
01:06:59,849 --> 01:07:00,748
How do I configure it?

1630
01:07:00,817 --> 01:07:03,785
Well, for me to configure the cells, to set the title and

1631
01:07:03,853 --> 01:07:05,787
I need to know which Tweet it's asking me for here.

1632
01:07:05,788 --> 01:07:07,722
the subtitle,

1633
01:07:07,791 --> 01:07:09,657
And I know which Tweet it's asking because it's

1634
01:07:09,726 --> 01:07:11,859
saying cellForRowAt.

1635
01:07:11,928 --> 01:07:15,897
This is the row that's the tweet that is asking

1636
01:07:15,966 --> 01:07:20,101
me to give it a UITableViewCell for.

1637
01:07:20,170 --> 01:07:25,306
So I'm gonna let tweet equal

1638
01:07:25,374 --> 01:07:32,046
my model sub indexPath.section and

1639
01:07:32,115 --> 01:07:35,550
indexPath.row.

1640
01:07:35,618 --> 01:07:38,352
So I'm just getting this row in this section,

1641
01:07:38,421 --> 01:07:41,322
this gets the first array, the section,

1642
01:07:41,390 --> 01:07:42,790
I'm just getting the row out of it.

1643
01:07:42,858 --> 01:07:46,427
So now I got the tweet, so now I can just update the cell

1644
01:07:46,496 --> 01:07:51,598
really easily, cell.textLabel.

1645
01:07:51,667 --> 01:07:53,801
It might be an optional ?.text equals,

1646
01:07:53,870 --> 01:07:56,638
let's have that be the tweet's text.

1647
01:07:56,706 --> 01:08:00,174
This is something that you'll see in here, we go to

1648
01:08:00,243 --> 01:08:03,711
the Twitter, and look for the Twitter framework at Tweet,

1649
01:08:03,779 --> 01:08:07,014
and you'll see that the very first one in fact, is text.

1650
01:08:07,083 --> 01:08:11,018
And then we'll make this cell detailTextLabel,

1651
01:08:11,087 --> 01:08:15,589
its text will be the tweet's user's name, let's say.

1652
01:08:15,658 --> 01:08:20,261
So again, Tweet, user, username.

1653
01:08:20,329 --> 01:08:24,265
So, that's why I'm getting that information.

1654
01:08:24,334 --> 01:08:25,366
Do you understand that?

1655
01:08:25,435 --> 01:08:26,934
Part of it, okay?

1656
01:08:27,003 --> 01:08:28,736
So, that I'll came out of this Tweet.

1657
01:08:28,804 --> 01:08:31,272
This is of type Tweet.

1658
01:08:34,944 --> 01:08:35,442
Everybody got that?

1659
01:08:35,511 --> 01:08:40,014
All right, so is that it?

1660
01:08:40,082 --> 01:08:43,684
Do we need to do anything else to hook this thing up and

1661
01:08:43,753 --> 01:08:44,552
make it work?

1662
01:08:44,621 --> 01:08:46,921
Turns out no.

1663
01:08:46,990 --> 01:08:47,956
So let's just run.

1664
01:08:51,561 --> 01:08:53,094
Okay, there it is.

1665
01:08:53,163 --> 01:08:55,362
The world's greatest Twitter client.

1666
01:08:55,431 --> 01:08:55,963
Look at that.

1667
01:08:56,032 --> 01:08:56,965
It looks beautiful.

1668
01:08:58,201 --> 01:08:58,832
No, of course, in fact,

1669
01:08:58,901 --> 01:09:01,469
this is the world's ugliest Twitter client right here.

1670
01:09:01,538 --> 01:09:02,470
But it is working.

1671
01:09:02,539 --> 01:09:03,704
These are tweets.

1672
01:09:03,773 --> 01:09:06,073
But anyway, you can see here's the tweets and

1673
01:09:06,142 --> 01:09:09,110
here are the person who tweeted it.

1674
01:09:10,446 --> 01:09:13,414
Now obviously, this is awful UI.

1675
01:09:13,483 --> 01:09:14,648
Just absolutely horrendous UI.

1676
01:09:14,717 --> 01:09:16,918
You would never have a Twitter client like this.

1677
01:09:16,986 --> 01:09:19,954
We want our UI in these cells to look much nicer,

1678
01:09:20,023 --> 01:09:22,190
much more customized to a tweet.

1679
01:09:22,259 --> 01:09:24,759
So we're gonna go back to our Storyboard here.

1680
01:09:24,828 --> 01:09:28,963
And instead of using this awful subtitle style cell,

1681
01:09:29,032 --> 01:09:30,631
we're gonna build a custom cell.

1682
01:09:30,699 --> 01:09:35,236
And this custom cell is gonna have more good looking and

1683
01:09:35,305 --> 01:09:38,672
more of the data that comes with a Tweet.

1684
01:09:38,741 --> 01:09:39,840
So let's just build it.

1685
01:09:39,909 --> 01:09:43,611
Let's go here and make this a little bigger, make some room.

1686
01:09:43,679 --> 01:09:45,312
All right, I'm gonna grab some labels out of here.

1687
01:09:45,381 --> 01:09:47,982
There's a label, this will maybe be,

1688
01:09:48,051 --> 01:09:49,584
let's say this is the Tweeter.

1689
01:09:49,653 --> 01:09:51,753
This is the person who's doing the Tweet.

1690
01:09:51,821 --> 01:09:55,089
By the way, this is a case where we're showing user

1691
01:09:55,157 --> 01:09:56,190
content really.

1692
01:09:56,259 --> 01:09:57,625
These tweets are content.

1693
01:09:57,694 --> 01:09:59,793
They're not like the title of a button or something,

1694
01:09:59,862 --> 01:10:03,030
it's actually the content that the user has requested to see.

1695
01:10:03,099 --> 01:10:04,598
So I'm gonna use a font here.

1696
01:10:04,667 --> 01:10:05,400
You see this font?

1697
01:10:05,468 --> 01:10:06,867
I'm not gonna use the system font.

1698
01:10:06,936 --> 01:10:10,137
I'm going to go down and start using this text styles.

1699
01:10:10,206 --> 01:10:12,940
So the Tweeter is going to be at the top.

1700
01:10:13,009 --> 01:10:15,509
I'm gonna have that be a headline font.

1701
01:10:15,578 --> 01:10:17,378
So this is gonna be the headline font and

1702
01:10:17,447 --> 01:10:20,415
this could change over time, okay, whatever the system

1703
01:10:20,483 --> 01:10:23,050
thinks headline font is and it'll be true in every app.

1704
01:10:23,118 --> 01:10:26,087
The headline will always be using this font in every app

1705
01:10:26,156 --> 01:10:28,389
and users could even go into settings and

1706
01:10:28,458 --> 01:10:30,124
change the size of their fonts.

1707
01:10:30,192 --> 01:10:31,225
If they're like me and

1708
01:10:31,294 --> 01:10:33,995
they're visions going they can set them bigger.

1709
01:10:34,064 --> 01:10:37,332
And the fonts will get bigger automatically so

1710
01:10:37,400 --> 01:10:41,101
ther's big advantage to using these font styles.

1711
01:10:41,170 --> 01:10:42,703
So there's that one.

1712
01:10:42,772 --> 01:10:45,138
There is the text of the tweet itself, so

1713
01:10:45,207 --> 01:10:47,675
we'll just call that text.

1714
01:10:47,744 --> 01:10:49,310
maybe a good font is body font because this is really, this

1715
01:10:49,311 --> 01:10:50,877
For this one,

1716
01:10:50,947 --> 01:10:53,281
is the heart of what we're doing here, this body thing.

1717
01:10:53,349 --> 01:10:56,217
One thing that's kinda cool with UILabel, the text

1718
01:10:56,286 --> 01:10:58,252
in the tweet is probably gonna be multiple lines, and

1719
01:10:58,320 --> 01:10:59,387
it's gonna wrap.

1720
01:10:59,455 --> 01:11:01,389
When you have a UI label like that,

1721
01:11:01,457 --> 01:11:05,760
you wanna set this property lines to be zero.

1722
01:11:05,828 --> 01:11:09,230
If you have zero predefined lines then the UILabel

1723
01:11:09,298 --> 01:11:12,199
will be however many lines it needs to be fit

1724
01:11:12,268 --> 01:11:15,136
the information with wrapping.

1725
01:11:15,205 --> 01:11:18,473
Whereas this one is line one this all one line.

1726
01:11:18,541 --> 01:11:22,443
And if it's too long it just gets dot dot dot at the end,

1727
01:11:22,511 --> 01:11:23,310
all right?

1728
01:11:23,379 --> 01:11:24,311
What else do I wanna do here?

1729
01:11:24,380 --> 01:11:26,547
Let's do another label here for

1730
01:11:26,616 --> 01:11:30,251
when the tweet was tweeted out, when it was created.

1731
01:11:30,319 --> 01:11:34,321
That one is probably something like a caption, we'll say.

1732
01:11:34,390 --> 01:11:36,624
Small little text at the bottom.

1733
01:11:36,693 --> 01:11:40,094
We'll go ahead and center than right there.

1734
01:11:40,163 --> 01:11:41,895
Let's also get an image.

1735
01:11:41,964 --> 01:11:44,131
Let's go down and find the image view down here.

1736
01:11:44,200 --> 01:11:44,832
Where is our image view?

1737
01:11:44,901 --> 01:11:45,666
Here it is.

1738
01:11:45,735 --> 01:11:48,202
Drag it out here. This is gonna be the profile

1739
01:11:48,270 --> 01:11:49,970
image of the Tweeter.

1740
01:11:50,039 --> 01:11:52,607
So whoever tweeted this will have their little image here.

1741
01:11:53,676 --> 01:11:54,575
This one, by the way,

1742
01:11:54,643 --> 01:11:57,879
I don't know how big profile images are on Twitter.

1743
01:11:57,947 --> 01:12:00,447
And I don't care because I'm gonna make this thing

1744
01:12:00,516 --> 01:12:02,216
always be a fixed size.

1745
01:12:02,285 --> 01:12:05,419
So how do we make an image like this be a fixed size

1746
01:12:05,488 --> 01:12:06,153
using auto layout?

1747
01:12:06,221 --> 01:12:09,924
And it turns out what you do is you Ctrl+Drag to itself.

1748
01:12:09,992 --> 01:12:11,058
And when you do,

1749
01:12:11,127 --> 01:12:14,662
you'll see that you have the option to fix its width.

1750
01:12:14,731 --> 01:12:17,130
And you can Ctrl+Drag, and fix its height.

1751
01:12:17,199 --> 01:12:18,899
You can also to both at the same time.

1752
01:12:18,968 --> 01:12:21,402
And, so what width and height has it fixed it to?

1753
01:12:21,470 --> 01:12:23,871
Well, we can look over here in the size inspector,

1754
01:12:23,940 --> 01:12:25,873
and see that it's fixed it to 71 by 67.

1755
01:12:25,941 --> 01:12:30,878
That doesn't sound very computer science-y,

1756
01:12:30,947 --> 01:12:34,315
I'm gonna fix it to 64 by 64.

1757
01:12:34,384 --> 01:12:35,416
So I've made it so

1758
01:12:35,484 --> 01:12:38,352
this image view is always gonna be 64 by 64.

1759
01:12:38,421 --> 01:12:41,455
I don't care how big the person's actual profile image

1760
01:12:41,524 --> 01:12:42,690
is, I always want it to be that way.

1761
01:12:42,759 --> 01:12:44,592
Okay, so there's another little auto layout

1762
01:12:44,660 --> 01:12:45,426
tidbit for you.

1763
01:12:47,129 --> 01:12:48,512
speaking of auto layouts, I need to lay this stuff out.

1764
01:12:48,513 --> 01:12:49,896
All right, so

1765
01:12:49,966 --> 01:12:52,700
I kinda want it to look, eh, something like this.

1766
01:12:52,768 --> 01:12:53,801
See what I mean?

1767
01:12:53,870 --> 01:12:56,370
Approximately, and so I'm just gonna use stack view.

1768
01:12:56,439 --> 01:13:01,475
So we'll stack those two things together, like that.

1769
01:13:01,544 --> 01:13:02,877
Look at our things here, fill and fill.

1770
01:13:02,945 --> 01:13:04,845
That's perfectly fine.

1771
01:13:04,914 --> 01:13:06,580
Let's go over here.

1772
01:13:06,649 --> 01:13:07,615
Let's stack those together.

1773
01:13:07,683 --> 01:13:09,783
That's fill and fill.

1774
01:13:09,852 --> 01:13:12,353
One thing about these two, by the way, they're gonna be

1775
01:13:12,421 --> 01:13:16,556
sharing the space in this stack view equally.

1776
01:13:16,625 --> 01:13:19,494
But I don't want them sharing equally.

1777
01:13:19,562 --> 01:13:24,065
I actually want the text to get more of this space.

1778
01:13:24,133 --> 01:13:26,967
So I'm gonna click on the Tweeter.

1779
01:13:27,036 --> 01:13:29,069
And I'm gonna go over to this size inspector.

1780
01:13:29,138 --> 01:13:30,404
And I'm gonna do something cool,

1781
01:13:30,473 --> 01:13:32,573
which is set its content hugging priority.

1782
01:13:32,641 --> 01:13:35,209
I'm gonna set its vertical content

1783
01:13:35,278 --> 01:13:37,911
hugging priority to be higher than the other one.

1784
01:13:37,980 --> 01:13:38,612
So they're both 251.

1785
01:13:38,681 --> 01:13:41,282
You see, that one's 251, that one's 251.

1786
01:13:41,351 --> 01:13:43,083
So I'm gonna set this one to be 300,

1787
01:13:43,152 --> 01:13:44,451
just anything higher than 251.

1788
01:13:44,520 --> 01:13:47,454
And that means that when the space is being allocated

1789
01:13:47,523 --> 01:13:48,389
between this tweeter and

1790
01:13:48,458 --> 01:13:52,360
the text, it's gonna hug the tweeter's content.

1791
01:13:52,429 --> 01:13:55,229
And the text is gonna get all the rest.

1792
01:13:55,298 --> 01:13:56,330
So that's a way that you can kinda,

1793
01:13:56,399 --> 01:13:59,834
when you're sharing space between two things.

1794
01:13:59,902 --> 01:14:03,370
All right, so now let's put these two in a stack.

1795
01:14:03,439 --> 01:14:08,142
Maybe we'll put some spacing here, something like that.

1796
01:14:08,210 --> 01:14:10,911
Alignment here, top is good, I want them both at the top.

1797
01:14:10,980 --> 01:14:14,148
I think that's good, lined up at the top.

1798
01:14:14,217 --> 01:14:17,451
If I like that and fill is fine, I've got this.

1799
01:14:17,520 --> 01:14:19,119
Now I'm gonna do the same thing we did before,

1800
01:14:19,188 --> 01:14:21,355
which is I'm gonna put this in the corner.

1801
01:14:21,423 --> 01:14:24,425
And I'm gonna Ctrl drag to the top.

1802
01:14:24,494 --> 01:14:28,028
I'm gonna Ctrl drag to the leading edge.

1803
01:14:28,097 --> 01:14:31,098
I'm gonna Ctrl drag to the trailing edge.

1804
01:14:31,166 --> 01:14:34,000
And I'm gonna Ctrl drag to the bottom edge.

1805
01:14:34,069 --> 01:14:35,035
So I want that out there.

1806
01:14:35,104 --> 01:14:36,136
And again, the same thing.

1807
01:14:36,205 --> 01:14:39,640
I'm gonna take this and change it to standard if I can.

1808
01:14:39,709 --> 01:14:40,907
I can't, so we'll go 0.

1809
01:14:40,976 --> 01:14:42,443
And same thing here.

1810
01:14:43,546 --> 01:14:47,915
Standard if I can, can't, we'll do 0.

1811
01:14:47,984 --> 01:14:50,551
So I've made this stock view that contains all

1812
01:14:50,620 --> 01:14:51,819
the stuff fit in there.

1813
01:14:51,888 --> 01:14:56,123
So I basically done the auto layout necessary to make this

1814
01:14:56,192 --> 01:14:58,759
thing use the space properly.

1815
01:14:58,828 --> 01:15:01,662
And I can still change the size of the cell, all right?

1816
01:15:01,730 --> 01:15:04,998
I can click on it and I can make it a little bit smaller

1817
01:15:05,067 --> 01:15:06,634
and all that stuff is going to, you know,

1818
01:15:06,703 --> 01:15:08,435
stick to the edges, so that'll be fine.

1819
01:15:08,504 --> 01:15:09,836
Now, this is great,

1820
01:15:09,905 --> 01:15:13,240
in fact if we go back to our table view controller and

1821
01:15:13,308 --> 01:15:17,110
if I comment out this cell configuration because we don't

1822
01:15:17,179 --> 01:15:20,848
have a subtitle so these don't make any sense any more.

1823
01:15:20,917 --> 01:15:24,084
And we run, then we gonna see that our UI hopefully,

1824
01:15:24,153 --> 01:15:26,220
if we didn't forget anything.

1825
01:15:27,790 --> 01:15:30,791
It's going to look in some ways a little better.

1826
01:15:30,860 --> 01:15:32,226
Yeah, so it kinda looks better.

1827
01:15:32,294 --> 01:15:35,496
Now, the only thing that's not better is we lost our data

1828
01:15:35,565 --> 01:15:38,899
because I commented out the data loading right here.

1829
01:15:38,968 --> 01:15:41,902
So this is what we want UI to look like basically with

1830
01:15:41,971 --> 01:15:43,403
an image here and that there.

1831
01:15:43,472 --> 01:15:45,472
But we need to set all this data.

1832
01:15:45,541 --> 01:15:46,406
So how do we that?

1833
01:15:46,475 --> 01:15:49,109
Since this is a custom cell over here.

1834
01:15:49,178 --> 01:15:51,845
We have to do with a custom subclass

1835
01:15:51,914 --> 01:15:54,215
of this UI table view cell right here.

1836
01:15:54,283 --> 01:15:55,983
So, I'm gonna create one of those, New File.

1837
01:15:56,052 --> 01:16:01,255
Let's go here and New File.

1838
01:16:01,323 --> 01:16:03,691
Again, Cocoa Touch Class; this time though,

1839
01:16:03,760 --> 01:16:07,127
it's not a TableViewController it's a TableViewCell.

1840
01:16:07,196 --> 01:16:09,029
I'm gonna call it TweetTableViewCell cuz

1841
01:16:09,098 --> 01:16:10,998
it shows the tweet,

1842
01:16:11,066 --> 01:16:15,002
put in the same place as all the rest of my stuff there.

1843
01:16:15,070 --> 01:16:17,772
Here's my table table view cell, it gives me awakeFromNib

1844
01:16:17,840 --> 01:16:20,340
which is kinda nice but I don't need it and setSelected

1845
01:16:20,409 --> 01:16:22,843
I don't do anything special when my table view cell is

1846
01:16:22,911 --> 01:16:25,413
selected but I could, I could draw a blue background or

1847
01:16:25,481 --> 01:16:28,549
something like that if I wanted, but I don't.

1848
01:16:28,618 --> 01:16:30,750
So, I have this TableViewCell subclass.

1849
01:16:30,819 --> 01:16:32,586
I'm gonna go back to my Storyboard and

1850
01:16:32,654 --> 01:16:35,322
make sure that I set the identity,

1851
01:16:35,391 --> 01:16:37,124
don't forget this step.

1852
01:16:37,192 --> 01:16:40,294
Set the identity to be a TweetTableViewCell.

1853
01:16:40,363 --> 01:16:41,361
If you forget this step,

1854
01:16:41,430 --> 01:16:43,464
you won't be able to do any outlets or anything like that.

1855
01:16:45,201 --> 01:16:48,269
Now, I wanna wire outlets up to this new class I

1856
01:16:48,337 --> 01:16:50,471
just created, so I need to get them both on screen,

1857
01:16:50,539 --> 01:16:52,373
I'll show you kind of a cool way to do that.

1858
01:16:52,442 --> 01:16:54,408
Let's get the assistant editor up here,

1859
01:16:54,477 --> 01:16:56,377
remember I could do manual, blah, blah, blah,

1860
01:16:56,445 --> 01:16:59,680
but another way is to hold down the option key, and

1861
01:16:59,748 --> 01:17:02,249
just click on the thing that you want to be on the right,

1862
01:17:02,318 --> 01:17:04,852
I think I showed this before, but option

1863
01:17:04,921 --> 01:17:08,956
clicking in the navigator will put that thing on the right.

1864
01:17:09,024 --> 01:17:13,093
All right so let's move this over more, some space there.

1865
01:17:13,162 --> 01:17:15,196
All right, so I need to wire up outlets to these four

1866
01:17:15,264 --> 01:17:17,164
things, right, the tweet or the text or the image.

1867
01:17:17,232 --> 01:17:18,465
So let's just do that.

1868
01:17:18,534 --> 01:17:19,800
We'll go here, Ctrl+drag,

1869
01:17:19,869 --> 01:17:24,437
screen out, I'll call this my tweet, what did I call this,

1870
01:17:24,506 --> 01:17:30,177
my tweetProfileImageView.

1871
01:17:30,246 --> 01:17:32,279
Cuz it's gonna be a UIImageView that shows

1872
01:17:32,347 --> 01:17:34,915
the Tweeter's profile.

1873
01:17:34,984 --> 01:17:38,419
Let's do the little create down here,

1874
01:17:38,487 --> 01:17:41,021
Ctrl+Drag, from that.

1875
01:17:41,089 --> 01:17:43,924
We'll call that tweetCreatedLabel.

1876
01:17:43,993 --> 01:17:46,693
To label it.

1877
01:17:46,762 --> 01:17:50,497
Shows when it was created; let's do out little tweeter

1878
01:17:50,566 --> 01:17:55,269
right here and we call that our tweetUserLabel,

1879
01:17:55,338 --> 01:17:57,871
this is gonna show the label of the tweet

1880
01:17:57,940 --> 01:18:00,540
user and then we have the text right here that's gonna show

1881
01:18:00,609 --> 01:18:02,943
the actual tweetText, tweetTextLabel.

1882
01:18:06,649 --> 01:18:09,950
So I've got these nice little outlets right here.

1883
01:18:10,018 --> 01:18:12,620
Now of course I need to be able to set these outlets with

1884
01:18:12,688 --> 01:18:16,323
something and here's where I need public API in my

1885
01:18:16,392 --> 01:18:19,994
table view cell, that gives me the data I need to do that.

1886
01:18:20,062 --> 01:18:23,898
And I'm just going to have my public API be tweet,

1887
01:18:23,966 --> 01:18:27,400
give me the Twitter.Tweet that you want and

1888
01:18:27,469 --> 01:18:29,170
I'll load these babies up.

1889
01:18:30,139 --> 01:18:30,971
That's what it's saying here.

1890
01:18:31,040 --> 01:18:33,541
Of course we need to import Twitter.

1891
01:18:34,676 --> 01:18:37,144
Cuz we're using it in this class.

1892
01:18:37,212 --> 01:18:40,781
And when you set this Tweet I'm just going to on didSet.

1893
01:18:40,849 --> 01:18:43,150
Update my UI just like I was a controller but

1894
01:18:43,218 --> 01:18:46,120
I'm not, I'm not a controller, I'm a view actually.

1895
01:18:46,188 --> 01:18:49,723
It's the only time a view can have these outlets.

1896
01:18:49,792 --> 01:18:54,095
So I need some private func to do that updateUI.

1897
01:18:56,565 --> 01:19:00,000
Now, time is running a little bit short here, so

1898
01:19:00,069 --> 01:19:02,569
I'm just going to type this in real quick

1899
01:19:02,638 --> 01:19:04,571
I believe I have tweet cell.

1900
01:19:04,640 --> 01:19:05,506
There it is, okay?

1901
01:19:06,976 --> 01:19:07,875
But you can look at this later.

1902
01:19:07,944 --> 01:19:10,343
But I'm just basically setting all the outlets here.

1903
01:19:10,412 --> 01:19:13,013
See how I'm just setting these outlets like setting the tweet

1904
01:19:13,082 --> 01:19:15,282
label, text to be the tweet's text,

1905
01:19:15,350 --> 01:19:18,252
setting the user label to be the user description.

1906
01:19:18,321 --> 01:19:20,521
Notice by the way I'm blocking the main thread here.

1907
01:19:22,558 --> 01:19:25,458
If this was my homework, bam I just got dinged.

1908
01:19:25,527 --> 01:19:27,361
So make sure you fix this, okay?

1909
01:19:27,429 --> 01:19:30,497
If you're gonna use my code in any way in your homework,

1910
01:19:30,566 --> 01:19:31,865
which you probably want to,

1911
01:19:31,933 --> 01:19:34,434
then you're gonna wanna fix this.

1912
01:19:34,503 --> 01:19:35,669
Don't do this on the main thread.

1913
01:19:35,738 --> 01:19:36,904
Don't block the main thread.

1914
01:19:36,972 --> 01:19:39,173
But, does anyone understand what updateUI is doing here?

1915
01:19:39,242 --> 01:19:41,041
It's just taking this Tweet that I was giving,

1916
01:19:41,110 --> 01:19:42,742
and loading this up.

1917
01:19:42,811 --> 01:19:44,544
And this is happening over and over for

1918
01:19:44,613 --> 01:19:47,681
every row in the table that gets displayed.

1919
01:19:47,750 --> 01:19:50,550
This is happening, the copy of this class has been made and

1920
01:19:50,619 --> 01:19:51,852
this is happening.

1921
01:19:51,921 --> 01:19:53,720
Now, how do we set this?

1922
01:19:53,789 --> 01:19:58,692
We set this back over here and our TweetTableViewController.

1923
01:19:58,761 --> 01:20:02,429
In the same place that we configured the cell here for

1924
01:20:02,498 --> 01:20:04,197
the subtitle one.

1925
01:20:04,266 --> 01:20:07,000
And in fact, I still need the tweet, but I don't need that.

1926
01:20:07,069 --> 01:20:08,368
I'll leave those there, so

1927
01:20:08,437 --> 01:20:10,804
you can remember that code when you look at it later.

1928
01:20:10,873 --> 01:20:13,807
But instead of setting those things, I just want

1929
01:20:13,875 --> 01:20:17,277
to set that tweet, I wanna set this var right here.

1930
01:20:17,346 --> 01:20:19,046
But for me to set the var right here,

1931
01:20:19,115 --> 01:20:21,281
I need to get my table view to be one of these.

1932
01:20:21,350 --> 01:20:22,349
So, I need to use an as.

1933
01:20:22,418 --> 01:20:24,484
So, I'm gonna say,

1934
01:20:24,553 --> 01:20:28,655
if I can let the tweetCell equal the cell,

1935
01:20:28,724 --> 01:20:34,494
this reusable cell that I got, as a TweetTableViewCell,

1936
01:20:34,563 --> 01:20:39,600
then, I can say, cell set your tweet to be my tweet.

1937
01:20:39,669 --> 01:20:44,605
That goes in this row, section, and row.

1938
01:20:44,674 --> 01:20:51,578
Now, we set the, what, sorry, tweetCell.tweet.

1939
01:20:51,646 --> 01:20:55,215
We set the class of these, of this prototype right here,

1940
01:20:55,284 --> 01:20:57,484
the prototype for this cell.

1941
01:20:57,553 --> 01:20:59,018
We set it with the identity

1942
01:20:59,087 --> 01:21:01,722
inspector to be a TweetTableViewCell.

1943
01:21:01,790 --> 01:21:03,790
So, when we come in here, it will, in fact,

1944
01:21:03,859 --> 01:21:05,425
this as will work.

1945
01:21:05,494 --> 01:21:08,161
Okay, it will be a TweetTableViewCell cuz we said

1946
01:21:08,230 --> 01:21:11,532
that in the Storyboard, so, it created that kind of thing,

1947
01:21:11,600 --> 01:21:12,198
all right?

1948
01:21:12,267 --> 01:21:13,634
So, let see if this works.

1949
01:21:18,474 --> 01:21:19,806
Okay, it is working.

1950
01:21:19,875 --> 01:21:22,743
Look, we've got the time the person tweeted this,

1951
01:21:22,812 --> 01:21:24,711
it's got the person who tweeted it,

1952
01:21:24,780 --> 01:21:28,682
it's got the text of the tweeting, but we get no image.

1953
01:21:28,751 --> 01:21:32,152
Why didn't we get people's images here?

1954
01:21:32,221 --> 01:21:33,520
Okay, why do you think we didn't get these,

1955
01:21:33,589 --> 01:21:35,222
these images?

1956
01:21:35,291 --> 01:21:37,657
Well, let's go look at our console.

1957
01:21:37,726 --> 01:21:39,058
What does it say?

1958
01:21:39,127 --> 01:21:39,626
No!

1959
01:21:39,695 --> 01:21:41,428
App Transport Security.

1960
01:21:41,496 --> 01:21:43,597
You recognize that from last time?

1961
01:21:43,665 --> 01:21:47,601
It's because these profiles are http something not

1962
01:21:47,669 --> 01:21:49,102
https something.

1963
01:21:49,171 --> 01:21:50,371
So, we know how to fix that.

1964
01:21:50,439 --> 01:21:53,240
We'll just go back to Info.plist right here.

1965
01:21:53,309 --> 01:21:56,877
And add a row for App Transport Security.

1966
01:21:56,946 --> 01:22:01,348
We'll open that up, we'll add Arbitrary Loads here,

1967
01:22:01,416 --> 01:22:05,619
we'll make that be, yes, we allow arbitrary loads.

1968
01:22:05,688 --> 01:22:07,086
There's another problem here though.

1969
01:22:07,155 --> 01:22:08,422
Look at all these tweets.

1970
01:22:08,490 --> 01:22:11,157
Look how they're cut off, you see?

1971
01:22:11,226 --> 01:22:14,928
Every row is the same size and it's not big enough for

1972
01:22:14,997 --> 01:22:15,729
most of the tweets.

1973
01:22:15,798 --> 01:22:17,831
It's just dot, dot, dot, dot, dot, dot.

1974
01:22:17,900 --> 01:22:20,801
Wouldn't it be cool if these rows could be different sizes

1975
01:22:20,869 --> 01:22:22,969
depending on how big the tweet is?

1976
01:22:23,038 --> 01:22:24,604
Well, of course we can do that.

1977
01:22:24,673 --> 01:22:25,672
Let's do it.

1978
01:22:25,740 --> 01:22:28,508
Let's go see how this size is being said right now.

1979
01:22:28,577 --> 01:22:31,411
Right now, it's being said, if we go and

1980
01:22:31,480 --> 01:22:34,782
inspect this cell in its size inspector, look,

1981
01:22:34,850 --> 01:22:38,552
the row height is 96, so, every single row is 96.

1982
01:22:38,620 --> 01:22:43,156
What we wanna do is in our viewDidLoad right here,

1983
01:22:43,225 --> 01:22:47,827
we wanna say that our tableView's row height is not

1984
01:22:47,896 --> 01:22:52,432
96, it's UITableViewAutomaticDimension.

1985
01:22:52,501 --> 01:22:55,869
But as I said before, we also want to give it a little help

1986
01:22:55,938 --> 01:22:59,439
by setting its estimated row height to something.

1987
01:22:59,508 --> 01:23:00,073
And I'll tell you what,

1988
01:23:00,142 --> 01:23:01,841
let's set it to what's in the Storyboard.

1989
01:23:01,910 --> 01:23:04,811
tableView.rowHeight, okay?

1990
01:23:04,880 --> 01:23:06,879
So, I'm getting the rowHeight out of the Storyboard,

1991
01:23:06,948 --> 01:23:08,114
using it as the estimate.

1992
01:23:08,183 --> 01:23:09,049
And then, I'm resetting

1993
01:23:09,117 --> 01:23:10,918
the rowHeight to be the AutomaticDimension.

1994
01:23:17,727 --> 01:23:19,059
And sure enough, see, look,

1995
01:23:19,128 --> 01:23:20,928
this tall tweet is getting extra space and

1996
01:23:20,996 --> 01:23:23,530
some of the smaller tweets, I don't know if we have any,

1997
01:23:23,599 --> 01:23:25,766
you can probably see it if we go like this.

1998
01:23:25,835 --> 01:23:30,370
The smaller tweets get less space, okay?

1999
01:23:30,438 --> 01:23:31,838
So, that's good.

2000
01:23:31,907 --> 01:23:35,275
We're out of time, so, if you have to go, feel free.

2001
01:23:35,344 --> 01:23:38,077
The last thing I'm gonna do here in a little over time is

2002
01:23:38,146 --> 01:23:40,580
add a text field at the top that lets us type in what

2003
01:23:40,649 --> 01:23:43,750
we wanna search for instead of always looking for Stanford.

2004
01:23:43,819 --> 01:23:46,420
So, we're gonna get Stanford out of there, okay?

2005
01:23:46,488 --> 01:23:47,387
So, how do we do that?

2006
01:23:47,455 --> 01:23:48,254
It's real easy.

2007
01:23:48,323 --> 01:23:49,656
We have, if you remember,

2008
01:23:49,725 --> 01:23:52,225
the table view, it's got this little header view at the top.

2009
01:23:52,294 --> 01:23:54,527
So, I'm just gonna take a UITextField.

2010
01:23:54,596 --> 01:23:56,396
Remember this editable text field we learned about in

2011
01:23:56,465 --> 01:23:57,130
the last lecture?

2012
01:23:57,199 --> 01:23:58,665
And I'm gonna put it on the top.

2013
01:23:58,734 --> 01:24:01,601
It's a little hard, sometimes, to see where it's going,

2014
01:24:01,670 --> 01:24:04,237
but when it looks like this, the width of the table, then,

2015
01:24:04,306 --> 01:24:06,139
you've got it, it's dropping it in there.

2016
01:24:06,208 --> 01:24:08,742
It's also a little hard to select and click on.

2017
01:24:08,811 --> 01:24:11,444
So, you're gonna wanna use that Ctrl + Shift + Click.

2018
01:24:11,513 --> 01:24:13,713
And that way, you can pick either the controller, or

2019
01:24:13,782 --> 01:24:16,449
the table view, or in this case, the text field.

2020
01:24:16,518 --> 01:24:18,318
I'm gonna inspect it and change it a little bit.

2021
01:24:18,387 --> 01:24:21,221
I'm just gonna make the font a little bit bigger,

2022
01:24:21,290 --> 01:24:22,255
we'll say 22.

2023
01:24:22,324 --> 01:24:24,991
Now, notice I can also set all those text field things I was

2024
01:24:25,060 --> 01:24:25,792
talking about.

2025
01:24:25,861 --> 01:24:27,694
Like, I don't want it auto-correcting.

2026
01:24:27,763 --> 01:24:30,931
I don't wanna say, search for hashtag SuperBowl and

2027
01:24:31,000 --> 01:24:33,734
change it hashtag SuperSpaceBowl, okay?

2028
01:24:33,803 --> 01:24:35,435
So, I don't want any correction going on.

2029
01:24:35,504 --> 01:24:36,803
Keyboard type, ooh, look,

2030
01:24:36,872 --> 01:24:38,405
there's a Twitter keyboard type.

2031
01:24:38,473 --> 01:24:41,275
It's probably got # and @ sign, things like that.

2032
01:24:41,343 --> 01:24:42,175
The return key,

2033
01:24:42,244 --> 01:24:44,978
that's just the key on the things says return.

2034
01:24:45,047 --> 01:24:47,213
I'm searching here, so, I wanted to say search.

2035
01:24:47,282 --> 01:24:50,517
So, that means the return keys gonna say, I'd search.

2036
01:24:50,586 --> 01:24:52,753
Also, a little clear button would be cool,

2037
01:24:52,821 --> 01:24:55,455
button you can press the clear out what's going on.

2038
01:24:55,524 --> 01:24:58,524
So, you can kinda configure this in any way you want

2039
01:24:58,593 --> 01:24:59,859
to make it work in there.

2040
01:24:59,928 --> 01:25:03,163
Now, normally I would run this and show you that it's there,

2041
01:25:03,231 --> 01:25:04,598
let's wire it up first, so, it actually does something.

2042
01:25:04,599 --> 01:25:05,966
but of course,

2043
01:25:06,034 --> 01:25:08,068
It's real easy to wire up a text field if you just

2044
01:25:08,136 --> 01:25:11,070
wanna hook it up to an outlet and set its delegate, and

2045
01:25:11,139 --> 01:25:13,440
then, you can find out when the return key is pressed.

2046
01:25:13,509 --> 01:25:14,808
So, let's do that.

2047
01:25:14,876 --> 01:25:17,677
We'll go here, let's get our TweetTableViewController on

2048
01:25:17,746 --> 01:25:18,846
screen at the same time.

2049
01:25:18,914 --> 01:25:21,081
We just wanna create an outlet to that thing.

2050
01:25:21,150 --> 01:25:23,182
I'll put it, right in here.

2051
01:25:23,251 --> 01:25:24,384
So, I'm just,

2052
01:25:24,452 --> 01:25:28,588
again, I will probably wanna Shift + Click to select it.

2053
01:25:28,657 --> 01:25:30,190
I, oops, picked the wrong one.

2054
01:25:31,960 --> 01:25:34,828
So, let's Shift + Click, click this, select this,

2055
01:25:34,896 --> 01:25:39,433
and Ctrl + Drag from it, and see it's a UITextField, and

2056
01:25:39,502 --> 01:25:41,969
I'm gonna call this my searchTextField.

2057
01:25:43,138 --> 01:25:43,904
Simple as that.

2058
01:25:43,972 --> 01:25:49,742
When it's set, I'm going to set myself as its delegates.

2059
01:25:49,811 --> 01:25:53,814
searchTextField.delegate = self.

2060
01:25:53,882 --> 01:25:58,051
Of course, for me to be its delegate, I have to go

2061
01:25:58,120 --> 01:26:02,422
up here and say yes, I am a UITextFieldDelegate.

2062
01:26:02,490 --> 01:26:05,225
Okay, they're all the methods are optional in there, so,

2063
01:26:05,293 --> 01:26:08,294
I have now successfully implemented that protocol.

2064
01:26:08,363 --> 01:26:11,298
Ooh, what happened here?

2065
01:26:11,367 --> 01:26:14,434
Yes, okay, so that's so I've set the delegate.

2066
01:26:14,503 --> 01:26:16,870
Now, I'm gonna implement the delegate method I want,

2067
01:26:16,939 --> 01:26:18,204
which is that should return.

2068
01:26:18,273 --> 01:26:20,440
It get sent to me when the return button is sent.

2069
01:26:20,508 --> 01:26:21,708
So that is textField,

2070
01:26:21,777 --> 01:26:24,244
notice as I type textField it shows me them all,

2071
01:26:24,313 --> 01:26:27,381
and it is this one right here textFieldShouldReturn.

2072
01:26:27,449 --> 01:26:30,617
Let me make this bigger, bigger so

2073
01:26:30,685 --> 01:26:32,719
you can see it better.

2074
01:26:32,788 --> 01:26:34,254
Okay, so here should return.

2075
01:26:34,323 --> 01:26:36,756
If I get return, I'm actually gonna check to make

2076
01:26:36,825 --> 01:26:39,259
sure I'm getting this from my searchTextField,

2077
01:26:39,328 --> 01:26:42,128
because someday I might have other text fields and I wanna

2078
01:26:42,197 --> 01:26:45,265
make sure I'm getting, I know which one I'm talking about.

2079
01:26:45,333 --> 01:26:47,066
So textField is this argument right here, and

2080
01:26:47,135 --> 01:26:48,969
I'm just checking to make sure it's me.

2081
01:26:49,038 --> 01:26:53,173
And if that is true then I'm just gonna set my

2082
01:26:53,242 --> 01:26:58,678
searchText = searchTextFields.text, okay?

2083
01:26:58,747 --> 01:27:00,480
Makes sense and when I set my searchText,

2084
01:27:00,549 --> 01:27:03,683
that's immediately going to start it going.

2085
01:27:03,752 --> 01:27:05,919
Notice that ShouldReturn also returns a Bool which is

2086
01:27:05,988 --> 01:27:08,988
whether to do what it normally does when return is pressed.

2087
01:27:09,057 --> 01:27:10,189
Which in this case is nothing,

2088
01:27:10,258 --> 01:27:11,691
cuz we don't have any target action or

2089
01:27:11,760 --> 01:27:13,326
anything else, but we'll return true.

2090
01:27:13,395 --> 01:27:15,996
Sure do what you normally do, now the only other thing

2091
01:27:16,064 --> 01:27:18,331
here is now that we have the searchTextField,

2092
01:27:18,400 --> 01:27:20,433
up here when we set our searchText.

2093
01:27:20,502 --> 01:27:23,003
We wanna update our searchTextField.

2094
01:27:25,374 --> 01:27:28,541
And I'll be careful here in case I'm doing it in prepare.

2095
01:27:28,610 --> 01:27:31,711
We'll set it to the searchText that we just set it to.

2096
01:27:31,780 --> 01:27:33,913
Also I'm going to have my searchTextField

2097
01:27:33,982 --> 01:27:37,049
resignFirstResponder here.

2098
01:27:37,118 --> 01:27:40,453
That's if somebody types something and hits go search,

2099
01:27:40,522 --> 01:27:42,488
and we search for something and put it in there.

2100
01:27:42,557 --> 01:27:43,923
I'm gonna take the keyboard away.

2101
01:27:43,992 --> 01:27:45,658
Cuz I just don't wanna have the keyboard blocking

2102
01:27:45,727 --> 01:27:47,427
the results that they just asked for.

2103
01:27:47,496 --> 01:27:48,761
And also someone sets it in code.

2104
01:27:48,830 --> 01:27:50,397
I'm gonna get rid of keyboard.

2105
01:27:50,465 --> 01:27:51,798
Someone might be in the middle of typing but

2106
01:27:51,867 --> 01:27:53,400
if someone sets it in code rather than typing.

2107
01:27:53,468 --> 01:27:56,769
Let's get that keyboard out of the way, all right?

2108
01:27:56,838 --> 01:27:57,537
So let's go do that.

2109
01:27:59,274 --> 01:28:01,642
Leave this code on the screen so you can see it.

2110
01:28:07,616 --> 01:28:11,451
All right, so here is our text field, it's kinda of hard to

2111
01:28:11,520 --> 01:28:14,888
see under this carrier, we'll fix that in a second.

2112
01:28:14,957 --> 01:28:17,224
Let's go and search for #stanford again.

2113
01:28:17,293 --> 01:28:19,526
Oops, I'm not gonna do this, watch this.

2114
01:28:19,595 --> 01:28:21,194
Okay that looked easy to type, didn't it?

2115
01:28:21,262 --> 01:28:22,729
Well let's go here and

2116
01:28:22,797 --> 01:28:28,301
say Keyboard, turn off the hardware keyboard.

2117
01:28:28,370 --> 01:28:29,635
Now when we click in here,

2118
01:28:29,704 --> 01:28:31,037
ooh, it's a lot harder to type.

2119
01:28:31,106 --> 01:28:35,242
#stanford, okay so now you're getting into what

2120
01:28:35,310 --> 01:28:39,846
I'm saying about learn to type like your users will be.

2121
01:28:39,915 --> 01:28:42,582
So here I'm going to search, goes in stanford and

2122
01:28:42,651 --> 01:28:43,450
search for it.

2123
01:28:43,518 --> 01:28:46,619
Let's go and search for something else here.

2124
01:28:46,688 --> 01:28:48,688
Maybe we'll search for,

2125
01:28:48,756 --> 01:28:53,159
this is kind of dangerous because people might say, but

2126
01:28:53,228 --> 01:28:59,198
Trump >> Okay,

2127
01:28:59,267 --> 01:29:01,468
there's some Trump ones.

2128
01:29:03,104 --> 01:29:04,303
Now, we've done all this.

2129
01:29:04,372 --> 01:29:05,672
I wanna fix this thing though,

2130
01:29:05,740 --> 01:29:08,207
where this looks really bad at the top here.

2131
01:29:08,276 --> 01:29:09,910
And there's this really easy fix to that.

2132
01:29:09,978 --> 01:29:11,845
Which is I'm just going to, this is the fix.

2133
01:29:11,913 --> 01:29:14,013
The fix is everything in the UI as you've learned.

2134
01:29:14,082 --> 01:29:17,917
I'm just gonna embed this in a navigation controller.

2135
01:29:17,986 --> 01:29:22,055
Okay, when you embed this in a navigation controller and run,

2136
01:29:22,123 --> 01:29:25,124
you can see that it makes a nice title at the top,

2137
01:29:25,193 --> 01:29:27,059
it moves the text field down,

2138
01:29:27,128 --> 01:29:29,429
it's just much nicer all around.

2139
01:29:29,498 --> 01:29:32,164
Okay, see how it has done that from a bit down here.

2140
01:29:32,233 --> 01:29:34,867
One other thing I'm gonna do is put placeholder text in

2141
01:29:34,936 --> 01:29:36,502
there, I meant to show you that.

2142
01:29:36,571 --> 01:29:40,940
Sorry, let's do that, if I go back to here click this.

2143
01:29:41,009 --> 01:29:44,110
That thing in here, swipe this guide.

2144
01:29:44,179 --> 01:29:48,648
You can put a placeholder text like this, Twitter Search and

2145
01:29:48,717 --> 01:29:50,984
see it shows it in there, kinda like gray.

2146
01:29:51,053 --> 01:29:54,421
So that when you run, it's more obvious to the user,

2147
01:29:54,490 --> 01:29:57,624
what is that big white space, all right?

2148
01:29:57,692 --> 01:30:00,093
Be clear to them that it's a Twitter search.

2149
01:30:01,729 --> 01:30:03,796
You know all you need to know to do your homework.

2150
01:30:03,865 --> 01:30:04,464
Good luck with it.

2151
01:30:06,101 --> 01:30:16,709
>> For more, please visit us at Stanford.edu.
>> 更多课程详见 stanford.edu
